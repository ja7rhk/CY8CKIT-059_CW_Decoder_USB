ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"port.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.data
  20              		.align	2
  21              		.type	uxCriticalNesting, %object
  22              		.size	uxCriticalNesting, 4
  23              	uxCriticalNesting:
  24 0000 AAAAAAAA 		.word	-1431655766
  25              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  26              		.align	2
  27              		.global	pxPortInitialiseStack
  28              		.thumb
  29              		.thumb_func
  30              		.type	pxPortInitialiseStack, %function
  31              	pxPortInitialiseStack:
  32              	.LFB64:
  33              		.file 1 "FreeRTOS\\port.c"
   1:FreeRTOS/port.c **** /*
   2:FreeRTOS/port.c ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:FreeRTOS/port.c ****     All rights reserved
   4:FreeRTOS/port.c **** 
   5:FreeRTOS/port.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/port.c **** 
   7:FreeRTOS/port.c ****     This file is part of the FreeRTOS distribution.
   8:FreeRTOS/port.c **** 
   9:FreeRTOS/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:FreeRTOS/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:FreeRTOS/port.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:FreeRTOS/port.c **** 
  13:FreeRTOS/port.c ****     ***************************************************************************
  14:FreeRTOS/port.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:FreeRTOS/port.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:FreeRTOS/port.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:FreeRTOS/port.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:FreeRTOS/port.c ****     ***************************************************************************
  19:FreeRTOS/port.c **** 
  20:FreeRTOS/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:FreeRTOS/port.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:FreeRTOS/port.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:FreeRTOS/port.c ****     link: http://www.freertos.org/a00114.html
  24:FreeRTOS/port.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 2


  25:FreeRTOS/port.c ****     ***************************************************************************
  26:FreeRTOS/port.c ****      *                                                                       *
  27:FreeRTOS/port.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:FreeRTOS/port.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:FreeRTOS/port.c ****      *    platform software that is more than just the market leader, it     *
  30:FreeRTOS/port.c ****      *    is the industry's de facto standard.                               *
  31:FreeRTOS/port.c ****      *                                                                       *
  32:FreeRTOS/port.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:FreeRTOS/port.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:FreeRTOS/port.c ****      *    tutorial book, reference manual, or both:                          *
  35:FreeRTOS/port.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:FreeRTOS/port.c ****      *                                                                       *
  37:FreeRTOS/port.c ****     ***************************************************************************
  38:FreeRTOS/port.c **** 
  39:FreeRTOS/port.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:FreeRTOS/port.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:FreeRTOS/port.c ****     defined configASSERT()?
  42:FreeRTOS/port.c **** 
  43:FreeRTOS/port.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:FreeRTOS/port.c ****     embedded software for free we request you assist our global community by
  45:FreeRTOS/port.c ****     participating in the support forum.
  46:FreeRTOS/port.c **** 
  47:FreeRTOS/port.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:FreeRTOS/port.c ****     be as productive as possible as early as possible.  Now you can receive
  49:FreeRTOS/port.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:FreeRTOS/port.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:FreeRTOS/port.c **** 
  52:FreeRTOS/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:FreeRTOS/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:FreeRTOS/port.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:FreeRTOS/port.c **** 
  56:FreeRTOS/port.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:FreeRTOS/port.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:FreeRTOS/port.c **** 
  59:FreeRTOS/port.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:FreeRTOS/port.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:FreeRTOS/port.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:FreeRTOS/port.c **** 
  63:FreeRTOS/port.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:FreeRTOS/port.c ****     engineered and independently SIL3 certified version for use in safety and
  65:FreeRTOS/port.c ****     mission critical applications that require provable dependability.
  66:FreeRTOS/port.c **** 
  67:FreeRTOS/port.c ****     1 tab == 4 spaces!
  68:FreeRTOS/port.c **** */
  69:FreeRTOS/port.c **** 
  70:FreeRTOS/port.c **** /*-----------------------------------------------------------
  71:FreeRTOS/port.c ****  * Implementation of functions defined in portable.h for the ARM CM3 port.
  72:FreeRTOS/port.c ****  *----------------------------------------------------------*/
  73:FreeRTOS/port.c **** 
  74:FreeRTOS/port.c **** /* Scheduler includes. */
  75:FreeRTOS/port.c **** #include "FreeRTOS.h"
  76:FreeRTOS/port.c **** #include "task.h"
  77:FreeRTOS/port.c **** 
  78:FreeRTOS/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  79:FreeRTOS/port.c **** defined.  The value should also ensure backward compatibility.
  80:FreeRTOS/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  81:FreeRTOS/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 3


  82:FreeRTOS/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  83:FreeRTOS/port.c **** #endif
  84:FreeRTOS/port.c **** 
  85:FreeRTOS/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  86:FreeRTOS/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  87:FreeRTOS/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  88:FreeRTOS/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  89:FreeRTOS/port.c **** #else
  90:FreeRTOS/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  91:FreeRTOS/port.c **** 	as the core. */
  92:FreeRTOS/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  93:FreeRTOS/port.c **** #endif
  94:FreeRTOS/port.c **** 
  95:FreeRTOS/port.c **** /* Constants required to manipulate the core.  Registers first... */
  96:FreeRTOS/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  97:FreeRTOS/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  98:FreeRTOS/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  99:FreeRTOS/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
 100:FreeRTOS/port.c **** /* ...then bits in the registers. */
 101:FreeRTOS/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
 102:FreeRTOS/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
 103:FreeRTOS/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
 104:FreeRTOS/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
 105:FreeRTOS/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
 106:FreeRTOS/port.c **** 
 107:FreeRTOS/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
 108:FreeRTOS/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
 109:FreeRTOS/port.c **** 
 110:FreeRTOS/port.c **** /* Constants required to check the validity of an interrupt priority. */
 111:FreeRTOS/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
 112:FreeRTOS/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
 113:FreeRTOS/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
 114:FreeRTOS/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
 115:FreeRTOS/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
 116:FreeRTOS/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
 117:FreeRTOS/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
 118:FreeRTOS/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
 119:FreeRTOS/port.c **** 
 120:FreeRTOS/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
 121:FreeRTOS/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
 122:FreeRTOS/port.c **** 
 123:FreeRTOS/port.c **** /* Constants required to set up the initial stack. */
 124:FreeRTOS/port.c **** #define portINITIAL_XPSR					( 0x01000000UL )
 125:FreeRTOS/port.c **** 
 126:FreeRTOS/port.c **** /* The systick is a 24-bit counter. */
 127:FreeRTOS/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
 128:FreeRTOS/port.c **** 
 129:FreeRTOS/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 130:FreeRTOS/port.c **** occurred while the SysTick counter is stopped during tickless idle
 131:FreeRTOS/port.c **** calculations. */
 132:FreeRTOS/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
 133:FreeRTOS/port.c **** 
 134:FreeRTOS/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 135:FreeRTOS/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
 136:FreeRTOS/port.c **** debugger. */
 137:FreeRTOS/port.c **** #ifdef configTASK_RETURN_ADDRESS
 138:FreeRTOS/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 4


 139:FreeRTOS/port.c **** #else
 140:FreeRTOS/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 141:FreeRTOS/port.c **** #endif
 142:FreeRTOS/port.c **** 
 143:FreeRTOS/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 144:FreeRTOS/port.c **** variable. */
 145:FreeRTOS/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 146:FreeRTOS/port.c **** 
 147:FreeRTOS/port.c **** /*
 148:FreeRTOS/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 149:FreeRTOS/port.c ****  * file is weak to allow application writers to change the timer used to
 150:FreeRTOS/port.c ****  * generate the tick interrupt.
 151:FreeRTOS/port.c ****  */
 152:FreeRTOS/port.c **** void vPortSetupTimerInterrupt( void );
 153:FreeRTOS/port.c **** 
 154:FreeRTOS/port.c **** /*
 155:FreeRTOS/port.c ****  * Exception handlers.
 156:FreeRTOS/port.c ****  */
 157:FreeRTOS/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 158:FreeRTOS/port.c **** void xPortSysTickHandler( void );
 159:FreeRTOS/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 160:FreeRTOS/port.c **** 
 161:FreeRTOS/port.c **** /*
 162:FreeRTOS/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 163:FreeRTOS/port.c ****  */
 164:FreeRTOS/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 165:FreeRTOS/port.c **** 
 166:FreeRTOS/port.c **** /*
 167:FreeRTOS/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 168:FreeRTOS/port.c ****  */
 169:FreeRTOS/port.c **** static void prvTaskExitError( void );
 170:FreeRTOS/port.c **** 
 171:FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 172:FreeRTOS/port.c **** 
 173:FreeRTOS/port.c **** /*
 174:FreeRTOS/port.c ****  * The number of SysTick increments that make up one tick period.
 175:FreeRTOS/port.c ****  */
 176:FreeRTOS/port.c **** #if configUSE_TICKLESS_IDLE == 1
 177:FreeRTOS/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 178:FreeRTOS/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 179:FreeRTOS/port.c **** 
 180:FreeRTOS/port.c **** /*
 181:FreeRTOS/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 182:FreeRTOS/port.c ****  * 24 bit resolution of the SysTick timer.
 183:FreeRTOS/port.c ****  */
 184:FreeRTOS/port.c **** #if configUSE_TICKLESS_IDLE == 1
 185:FreeRTOS/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 186:FreeRTOS/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 187:FreeRTOS/port.c **** 
 188:FreeRTOS/port.c **** /*
 189:FreeRTOS/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 190:FreeRTOS/port.c ****  * power functionality only.
 191:FreeRTOS/port.c ****  */
 192:FreeRTOS/port.c **** #if configUSE_TICKLESS_IDLE == 1
 193:FreeRTOS/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 194:FreeRTOS/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 195:FreeRTOS/port.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 5


 196:FreeRTOS/port.c **** /*
 197:FreeRTOS/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 198:FreeRTOS/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 199:FreeRTOS/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 200:FreeRTOS/port.c ****  */
 201:FreeRTOS/port.c **** #if ( configASSERT_DEFINED == 1 )
 202:FreeRTOS/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 203:FreeRTOS/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 204:FreeRTOS/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 205:FreeRTOS/port.c **** #endif /* configASSERT_DEFINED */
 206:FreeRTOS/port.c **** 
 207:FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 208:FreeRTOS/port.c **** 
 209:FreeRTOS/port.c **** /*
 210:FreeRTOS/port.c ****  * See header file for description.
 211:FreeRTOS/port.c ****  */
 212:FreeRTOS/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 213:FreeRTOS/port.c **** {
  34              		.loc 1 213 0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 16
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38              		@ link register save eliminated.
  39 0000 80B4     		push	{r7}
  40              		.cfi_def_cfa_offset 4
  41              		.cfi_offset 7, -4
  42 0002 85B0     		sub	sp, sp, #20
  43              		.cfi_def_cfa_offset 24
  44 0004 00AF     		add	r7, sp, #0
  45              		.cfi_def_cfa_register 7
  46 0006 F860     		str	r0, [r7, #12]
  47 0008 B960     		str	r1, [r7, #8]
  48 000a 7A60     		str	r2, [r7, #4]
 214:FreeRTOS/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 215:FreeRTOS/port.c **** 	interrupt. */
 216:FreeRTOS/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
  49              		.loc 1 216 0
  50 000c FB68     		ldr	r3, [r7, #12]
  51 000e 043B     		subs	r3, r3, #4
  52 0010 FB60     		str	r3, [r7, #12]
 217:FreeRTOS/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  53              		.loc 1 217 0
  54 0012 FB68     		ldr	r3, [r7, #12]
  55 0014 4FF08072 		mov	r2, #16777216
  56 0018 1A60     		str	r2, [r3]
 218:FreeRTOS/port.c **** 	pxTopOfStack--;
  57              		.loc 1 218 0
  58 001a FB68     		ldr	r3, [r7, #12]
  59 001c 043B     		subs	r3, r3, #4
  60 001e FB60     		str	r3, [r7, #12]
 219:FreeRTOS/port.c **** 	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  61              		.loc 1 219 0
  62 0020 BA68     		ldr	r2, [r7, #8]
  63 0022 FB68     		ldr	r3, [r7, #12]
  64 0024 1A60     		str	r2, [r3]
 220:FreeRTOS/port.c **** 	pxTopOfStack--;
  65              		.loc 1 220 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 6


  66 0026 FB68     		ldr	r3, [r7, #12]
  67 0028 043B     		subs	r3, r3, #4
  68 002a FB60     		str	r3, [r7, #12]
 221:FreeRTOS/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  69              		.loc 1 221 0
  70 002c 084A     		ldr	r2, .L3
  71 002e FB68     		ldr	r3, [r7, #12]
  72 0030 1A60     		str	r2, [r3]
 222:FreeRTOS/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  73              		.loc 1 222 0
  74 0032 FB68     		ldr	r3, [r7, #12]
  75 0034 143B     		subs	r3, r3, #20
  76 0036 FB60     		str	r3, [r7, #12]
 223:FreeRTOS/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  77              		.loc 1 223 0
  78 0038 7A68     		ldr	r2, [r7, #4]
  79 003a FB68     		ldr	r3, [r7, #12]
  80 003c 1A60     		str	r2, [r3]
 224:FreeRTOS/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  81              		.loc 1 224 0
  82 003e FB68     		ldr	r3, [r7, #12]
  83 0040 203B     		subs	r3, r3, #32
  84 0042 FB60     		str	r3, [r7, #12]
 225:FreeRTOS/port.c **** 
 226:FreeRTOS/port.c **** 	return pxTopOfStack;
  85              		.loc 1 226 0
  86 0044 FB68     		ldr	r3, [r7, #12]
 227:FreeRTOS/port.c **** }
  87              		.loc 1 227 0
  88 0046 1846     		mov	r0, r3
  89 0048 1437     		adds	r7, r7, #20
  90              		.cfi_def_cfa_offset 4
  91 004a BD46     		mov	sp, r7
  92              		.cfi_def_cfa_register 13
  93              		@ sp needed
  94 004c 80BC     		pop	{r7}
  95              		.cfi_restore 7
  96              		.cfi_def_cfa_offset 0
  97 004e 7047     		bx	lr
  98              	.L4:
  99              		.align	2
 100              	.L3:
 101 0050 00000000 		.word	prvTaskExitError
 102              		.cfi_endproc
 103              	.LFE64:
 104              		.size	pxPortInitialiseStack, .-pxPortInitialiseStack
 105              		.section	.text.prvTaskExitError,"ax",%progbits
 106              		.align	2
 107              		.thumb
 108              		.thumb_func
 109              		.type	prvTaskExitError, %function
 110              	prvTaskExitError:
 111              	.LFB65:
 228:FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 229:FreeRTOS/port.c **** 
 230:FreeRTOS/port.c **** static void prvTaskExitError( void )
 231:FreeRTOS/port.c **** {
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 7


 112              		.loc 1 231 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 1, uses_anonymous_args = 0
 116 0000 80B5     		push	{r7, lr}
 117              		.cfi_def_cfa_offset 8
 118              		.cfi_offset 7, -8
 119              		.cfi_offset 14, -4
 120 0002 00AF     		add	r7, sp, #0
 121              		.cfi_def_cfa_register 7
 232:FreeRTOS/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 233:FreeRTOS/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 234:FreeRTOS/port.c **** 	should instead call vTaskDelete( NULL ).
 235:FreeRTOS/port.c **** 
 236:FreeRTOS/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 237:FreeRTOS/port.c **** 	defined, then stop here so application writers can catch the error. */
 238:FreeRTOS/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 239:FreeRTOS/port.c **** 	portDISABLE_INTERRUPTS();
 122              		.loc 1 239 0
 123 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
 124              	.L6:
 240:FreeRTOS/port.c **** 	for( ;; );
 125              		.loc 1 240 0 discriminator 1
 126 0008 FEE7     		b	.L6
 127              		.cfi_endproc
 128              	.LFE65:
 129              		.size	prvTaskExitError, .-prvTaskExitError
 130 000a 00BF     		.section	.text.vPortSVCHandler,"ax",%progbits
 131              		.align	2
 132              		.global	vPortSVCHandler
 133              		.thumb
 134              		.thumb_func
 135              		.type	vPortSVCHandler, %function
 136              	vPortSVCHandler:
 137              	.LFB66:
 241:FreeRTOS/port.c **** }
 242:FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 243:FreeRTOS/port.c **** 
 244:FreeRTOS/port.c **** void vPortSVCHandler( void )
 245:FreeRTOS/port.c **** {
 138              		.loc 1 245 0
 139              		.cfi_startproc
 140              		@ Naked Function: prologue and epilogue provided by programmer.
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 1, uses_anonymous_args = 0
 246:FreeRTOS/port.c **** 	__asm volatile (
 143              		.loc 1 246 0
 144              		.syntax unified
 145              	@ 246 "FreeRTOS\port.c" 1
 146 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 147 0002 1968     		ldr r1, [r3]					
 148 0004 0868     		ldr r0, [r1]					
 149 0006 B0E8F00F 		ldmia r0!, {r4-r11}				
 150 000a 80F30988 		msr psp, r0						
 151 000e BFF36F8F 		isb								
 152 0012 4FF00000 		mov r0, #0 						
 153 0016 80F31188 		msr	basepri, r0					
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 8


 154 001a 4EF00D0E 		orr r14, #0xd					
 155 001e 7047     		bx r14							
 156              										
 157              		.align 2						
 158 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 159              	
 160              	@ 0 "" 2
 247:FreeRTOS/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 248:FreeRTOS/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 249:FreeRTOS/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 250:FreeRTOS/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 251:FreeRTOS/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 252:FreeRTOS/port.c **** 					"	isb								\n"
 253:FreeRTOS/port.c **** 					"	mov r0, #0 						\n"
 254:FreeRTOS/port.c **** 					"	msr	basepri, r0					\n"
 255:FreeRTOS/port.c **** 					"	orr r14, #0xd					\n"
 256:FreeRTOS/port.c **** 					"	bx r14							\n"
 257:FreeRTOS/port.c **** 					"									\n"
 258:FreeRTOS/port.c **** 					"	.align 2						\n"
 259:FreeRTOS/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 260:FreeRTOS/port.c **** 				);
 261:FreeRTOS/port.c **** }
 161              		.loc 1 261 0
 162              		.thumb
 163              		.syntax unified
 164 0024 00BF     		nop
 165              		.cfi_endproc
 166              	.LFE66:
 167              		.size	vPortSVCHandler, .-vPortSVCHandler
 168 0026 00BF     		.section	.text.prvPortStartFirstTask,"ax",%progbits
 169              		.align	2
 170              		.thumb
 171              		.thumb_func
 172              		.type	prvPortStartFirstTask, %function
 173              	prvPortStartFirstTask:
 174              	.LFB67:
 262:FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 263:FreeRTOS/port.c **** 
 264:FreeRTOS/port.c **** static void prvPortStartFirstTask( void )
 265:FreeRTOS/port.c **** {
 175              		.loc 1 265 0
 176              		.cfi_startproc
 177              		@ Naked Function: prologue and epilogue provided by programmer.
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 1, uses_anonymous_args = 0
 266:FreeRTOS/port.c **** 	__asm volatile(
 180              		.loc 1 266 0
 181              		.syntax unified
 182              	@ 266 "FreeRTOS\port.c" 1
 183 0000 0648     		 ldr r0, =0xE000ED08 	
 184 0002 0068     	 ldr r0, [r0] 			
 185 0004 0068     	 ldr r0, [r0] 			
 186 0006 80F30888 	 msr msp, r0			
 187 000a 62B6     	 cpsie i				
 188 000c 61B6     	 cpsie f				
 189 000e BFF34F8F 	 dsb					
 190 0012 BFF36F8F 	 isb					
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 9


 191 0016 00DF     	 svc 0					
 192 0018 00BF     	 nop					
 193              	
 194              	@ 0 "" 2
 267:FreeRTOS/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 268:FreeRTOS/port.c **** 					" ldr r0, [r0] 			\n"
 269:FreeRTOS/port.c **** 					" ldr r0, [r0] 			\n"
 270:FreeRTOS/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 271:FreeRTOS/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 272:FreeRTOS/port.c **** 					" cpsie f				\n"
 273:FreeRTOS/port.c **** 					" dsb					\n"
 274:FreeRTOS/port.c **** 					" isb					\n"
 275:FreeRTOS/port.c **** 					" svc 0					\n" /* System call to start first task. */
 276:FreeRTOS/port.c **** 					" nop					\n"
 277:FreeRTOS/port.c **** 				);
 278:FreeRTOS/port.c **** }
 195              		.loc 1 278 0
 196              		.thumb
 197              		.syntax unified
 198 001a 00BF     		nop
 199              		.cfi_endproc
 200              	.LFE67:
 201              		.size	prvPortStartFirstTask, .-prvPortStartFirstTask
 202              		.section	.text.xPortStartScheduler,"ax",%progbits
 203              		.align	2
 204              		.global	xPortStartScheduler
 205              		.thumb
 206              		.thumb_func
 207              		.type	xPortStartScheduler, %function
 208              	xPortStartScheduler:
 209              	.LFB68:
 279:FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 280:FreeRTOS/port.c **** 
 281:FreeRTOS/port.c **** /*
 282:FreeRTOS/port.c ****  * See header file for description.
 283:FreeRTOS/port.c ****  */
 284:FreeRTOS/port.c **** BaseType_t xPortStartScheduler( void )
 285:FreeRTOS/port.c **** {
 210              		.loc 1 285 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 0
 213              		@ frame_needed = 1, uses_anonymous_args = 0
 214 0000 80B5     		push	{r7, lr}
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 7, -8
 217              		.cfi_offset 14, -4
 218 0002 00AF     		add	r7, sp, #0
 219              		.cfi_def_cfa_register 7
 286:FreeRTOS/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 287:FreeRTOS/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 288:FreeRTOS/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 289:FreeRTOS/port.c **** 
 290:FreeRTOS/port.c **** 	#if( configASSERT_DEFINED == 1 )
 291:FreeRTOS/port.c **** 	{
 292:FreeRTOS/port.c **** 		volatile uint32_t ulOriginalPriority;
 293:FreeRTOS/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 294:FreeRTOS/port.c **** 		volatile uint8_t ucMaxPriorityValue;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 10


 295:FreeRTOS/port.c **** 
 296:FreeRTOS/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 297:FreeRTOS/port.c **** 		functions can be called.  ISR safe functions are those that end in
 298:FreeRTOS/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 299:FreeRTOS/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 300:FreeRTOS/port.c **** 
 301:FreeRTOS/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 302:FreeRTOS/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 303:FreeRTOS/port.c **** 
 304:FreeRTOS/port.c **** 		/* Determine the number of priority bits available.  First write to all
 305:FreeRTOS/port.c **** 		possible bits. */
 306:FreeRTOS/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 307:FreeRTOS/port.c **** 
 308:FreeRTOS/port.c **** 		/* Read the value back to see how many bits stuck. */
 309:FreeRTOS/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 310:FreeRTOS/port.c **** 
 311:FreeRTOS/port.c **** 		/* Use the same mask on the maximum system call priority. */
 312:FreeRTOS/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 313:FreeRTOS/port.c **** 
 314:FreeRTOS/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 315:FreeRTOS/port.c **** 		of bits read back. */
 316:FreeRTOS/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 317:FreeRTOS/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 318:FreeRTOS/port.c **** 		{
 319:FreeRTOS/port.c **** 			ulMaxPRIGROUPValue--;
 320:FreeRTOS/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 321:FreeRTOS/port.c **** 		}
 322:FreeRTOS/port.c **** 
 323:FreeRTOS/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 324:FreeRTOS/port.c **** 		register. */
 325:FreeRTOS/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 326:FreeRTOS/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 327:FreeRTOS/port.c **** 
 328:FreeRTOS/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 329:FreeRTOS/port.c **** 		value. */
 330:FreeRTOS/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 331:FreeRTOS/port.c **** 	}
 332:FreeRTOS/port.c **** 	#endif /* conifgASSERT_DEFINED */
 333:FreeRTOS/port.c **** 
 334:FreeRTOS/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 335:FreeRTOS/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 220              		.loc 1 335 0
 221 0004 0B4A     		ldr	r2, .L11
 222 0006 0B4B     		ldr	r3, .L11
 223 0008 1B68     		ldr	r3, [r3]
 224 000a 43F46003 		orr	r3, r3, #14680064
 225 000e 1360     		str	r3, [r2]
 336:FreeRTOS/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 226              		.loc 1 336 0
 227 0010 084A     		ldr	r2, .L11
 228 0012 084B     		ldr	r3, .L11
 229 0014 1B68     		ldr	r3, [r3]
 230 0016 43F06043 		orr	r3, r3, #-536870912
 231 001a 1360     		str	r3, [r2]
 337:FreeRTOS/port.c **** 
 338:FreeRTOS/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 339:FreeRTOS/port.c **** 	here already. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 11


 340:FreeRTOS/port.c **** 	vPortSetupTimerInterrupt();
 232              		.loc 1 340 0
 233 001c FFF7FEFF 		bl	vPortSetupTimerInterrupt
 341:FreeRTOS/port.c **** 
 342:FreeRTOS/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 343:FreeRTOS/port.c **** 	uxCriticalNesting = 0;
 234              		.loc 1 343 0
 235 0020 054B     		ldr	r3, .L11+4
 236 0022 0022     		movs	r2, #0
 237 0024 1A60     		str	r2, [r3]
 344:FreeRTOS/port.c **** 
 345:FreeRTOS/port.c **** 	/* Start the first task. */
 346:FreeRTOS/port.c **** 	prvPortStartFirstTask();
 238              		.loc 1 346 0
 239 0026 FFF7FEFF 		bl	prvPortStartFirstTask
 347:FreeRTOS/port.c **** 
 348:FreeRTOS/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 349:FreeRTOS/port.c **** 	exit error function to prevent compiler warnings about a static function
 350:FreeRTOS/port.c **** 	not being called in the case that the application writer overrides this
 351:FreeRTOS/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS. */
 352:FreeRTOS/port.c **** 	prvTaskExitError();
 240              		.loc 1 352 0
 241 002a FFF7FEFF 		bl	prvTaskExitError
 353:FreeRTOS/port.c **** 
 354:FreeRTOS/port.c **** 	/* Should not get here! */
 355:FreeRTOS/port.c **** 	return 0;
 242              		.loc 1 355 0
 243 002e 0023     		movs	r3, #0
 356:FreeRTOS/port.c **** }
 244              		.loc 1 356 0
 245 0030 1846     		mov	r0, r3
 246 0032 80BD     		pop	{r7, pc}
 247              	.L12:
 248              		.align	2
 249              	.L11:
 250 0034 20ED00E0 		.word	-536810208
 251 0038 00000000 		.word	uxCriticalNesting
 252              		.cfi_endproc
 253              	.LFE68:
 254              		.size	xPortStartScheduler, .-xPortStartScheduler
 255              		.section	.text.vPortEndScheduler,"ax",%progbits
 256              		.align	2
 257              		.global	vPortEndScheduler
 258              		.thumb
 259              		.thumb_func
 260              		.type	vPortEndScheduler, %function
 261              	vPortEndScheduler:
 262              	.LFB69:
 357:FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 358:FreeRTOS/port.c **** 
 359:FreeRTOS/port.c **** void vPortEndScheduler( void )
 360:FreeRTOS/port.c **** {
 263              		.loc 1 360 0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 1, uses_anonymous_args = 0
 267              		@ link register save eliminated.
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 12


 268 0000 80B4     		push	{r7}
 269              		.cfi_def_cfa_offset 4
 270              		.cfi_offset 7, -4
 271 0002 00AF     		add	r7, sp, #0
 272              		.cfi_def_cfa_register 7
 361:FreeRTOS/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 362:FreeRTOS/port.c **** 	Artificially force an assert. */
 363:FreeRTOS/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 364:FreeRTOS/port.c **** }
 273              		.loc 1 364 0
 274 0004 00BF     		nop
 275 0006 BD46     		mov	sp, r7
 276              		.cfi_def_cfa_register 13
 277              		@ sp needed
 278 0008 80BC     		pop	{r7}
 279              		.cfi_restore 7
 280              		.cfi_def_cfa_offset 0
 281 000a 7047     		bx	lr
 282              		.cfi_endproc
 283              	.LFE69:
 284              		.size	vPortEndScheduler, .-vPortEndScheduler
 285              		.section	.text.vPortYield,"ax",%progbits
 286              		.align	2
 287              		.global	vPortYield
 288              		.thumb
 289              		.thumb_func
 290              		.type	vPortYield, %function
 291              	vPortYield:
 292              	.LFB70:
 365:FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 366:FreeRTOS/port.c **** 
 367:FreeRTOS/port.c **** void vPortYield( void )
 368:FreeRTOS/port.c **** {
 293              		.loc 1 368 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 1, uses_anonymous_args = 0
 297              		@ link register save eliminated.
 298 0000 80B4     		push	{r7}
 299              		.cfi_def_cfa_offset 4
 300              		.cfi_offset 7, -4
 301 0002 00AF     		add	r7, sp, #0
 302              		.cfi_def_cfa_register 7
 369:FreeRTOS/port.c **** 	/* Set a PendSV to request a context switch. */
 370:FreeRTOS/port.c **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 303              		.loc 1 370 0
 304 0004 054B     		ldr	r3, .L15
 305 0006 4FF08052 		mov	r2, #268435456
 306 000a 1A60     		str	r2, [r3]
 371:FreeRTOS/port.c **** 
 372:FreeRTOS/port.c **** 	/* Barriers are normally not required but do ensure the code is completely
 373:FreeRTOS/port.c **** 	within the specified behaviour for the architecture. */
 374:FreeRTOS/port.c **** 	__asm volatile( "dsb" );
 307              		.loc 1 374 0
 308              		.syntax unified
 309              	@ 374 "FreeRTOS\port.c" 1
 310 000c BFF34F8F 		dsb
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 13


 311              	@ 0 "" 2
 375:FreeRTOS/port.c **** 	__asm volatile( "isb" );
 312              		.loc 1 375 0
 313              	@ 375 "FreeRTOS\port.c" 1
 314 0010 BFF36F8F 		isb
 315              	@ 0 "" 2
 376:FreeRTOS/port.c **** }
 316              		.loc 1 376 0
 317              		.thumb
 318              		.syntax unified
 319 0014 00BF     		nop
 320 0016 BD46     		mov	sp, r7
 321              		.cfi_def_cfa_register 13
 322              		@ sp needed
 323 0018 80BC     		pop	{r7}
 324              		.cfi_restore 7
 325              		.cfi_def_cfa_offset 0
 326 001a 7047     		bx	lr
 327              	.L16:
 328              		.align	2
 329              	.L15:
 330 001c 04ED00E0 		.word	-536810236
 331              		.cfi_endproc
 332              	.LFE70:
 333              		.size	vPortYield, .-vPortYield
 334              		.section	.text.vPortEnterCritical,"ax",%progbits
 335              		.align	2
 336              		.global	vPortEnterCritical
 337              		.thumb
 338              		.thumb_func
 339              		.type	vPortEnterCritical, %function
 340              	vPortEnterCritical:
 341              	.LFB71:
 377:FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 378:FreeRTOS/port.c **** 
 379:FreeRTOS/port.c **** void vPortEnterCritical( void )
 380:FreeRTOS/port.c **** {
 342              		.loc 1 380 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 1, uses_anonymous_args = 0
 346 0000 80B5     		push	{r7, lr}
 347              		.cfi_def_cfa_offset 8
 348              		.cfi_offset 7, -8
 349              		.cfi_offset 14, -4
 350 0002 00AF     		add	r7, sp, #0
 351              		.cfi_def_cfa_register 7
 381:FreeRTOS/port.c **** 	portDISABLE_INTERRUPTS();
 352              		.loc 1 381 0
 353 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
 382:FreeRTOS/port.c **** 	uxCriticalNesting++;
 354              		.loc 1 382 0
 355 0008 054B     		ldr	r3, .L18
 356 000a 1B68     		ldr	r3, [r3]
 357 000c 0133     		adds	r3, r3, #1
 358 000e 044A     		ldr	r2, .L18
 359 0010 1360     		str	r3, [r2]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 14


 383:FreeRTOS/port.c **** 	__asm volatile( "dsb" );
 360              		.loc 1 383 0
 361              		.syntax unified
 362              	@ 383 "FreeRTOS\port.c" 1
 363 0012 BFF34F8F 		dsb
 364              	@ 0 "" 2
 384:FreeRTOS/port.c **** 	__asm volatile( "isb" );
 365              		.loc 1 384 0
 366              	@ 384 "FreeRTOS\port.c" 1
 367 0016 BFF36F8F 		isb
 368              	@ 0 "" 2
 385:FreeRTOS/port.c **** 	
 386:FreeRTOS/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 387:FreeRTOS/port.c **** 	assert() if it is being called from an interrupt context.  Only API 
 388:FreeRTOS/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 389:FreeRTOS/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 390:FreeRTOS/port.c **** 	assert function also uses a critical section. */
 391:FreeRTOS/port.c **** 	if( uxCriticalNesting == 1 )
 392:FreeRTOS/port.c **** 	{
 393:FreeRTOS/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 394:FreeRTOS/port.c **** 	}
 395:FreeRTOS/port.c **** }
 369              		.loc 1 395 0
 370              		.thumb
 371              		.syntax unified
 372 001a 00BF     		nop
 373 001c 80BD     		pop	{r7, pc}
 374              	.L19:
 375 001e 00BF     		.align	2
 376              	.L18:
 377 0020 00000000 		.word	uxCriticalNesting
 378              		.cfi_endproc
 379              	.LFE71:
 380              		.size	vPortEnterCritical, .-vPortEnterCritical
 381              		.section	.text.vPortExitCritical,"ax",%progbits
 382              		.align	2
 383              		.global	vPortExitCritical
 384              		.thumb
 385              		.thumb_func
 386              		.type	vPortExitCritical, %function
 387              	vPortExitCritical:
 388              	.LFB72:
 396:FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 397:FreeRTOS/port.c **** 
 398:FreeRTOS/port.c **** void vPortExitCritical( void )
 399:FreeRTOS/port.c **** {
 389              		.loc 1 399 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 0
 392              		@ frame_needed = 1, uses_anonymous_args = 0
 393 0000 80B5     		push	{r7, lr}
 394              		.cfi_def_cfa_offset 8
 395              		.cfi_offset 7, -8
 396              		.cfi_offset 14, -4
 397 0002 00AF     		add	r7, sp, #0
 398              		.cfi_def_cfa_register 7
 400:FreeRTOS/port.c **** 	configASSERT( uxCriticalNesting );
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 15


 401:FreeRTOS/port.c **** 	uxCriticalNesting--;
 399              		.loc 1 401 0
 400 0004 064B     		ldr	r3, .L23
 401 0006 1B68     		ldr	r3, [r3]
 402 0008 013B     		subs	r3, r3, #1
 403 000a 054A     		ldr	r2, .L23
 404 000c 1360     		str	r3, [r2]
 402:FreeRTOS/port.c **** 	if( uxCriticalNesting == 0 )
 405              		.loc 1 402 0
 406 000e 044B     		ldr	r3, .L23
 407 0010 1B68     		ldr	r3, [r3]
 408 0012 002B     		cmp	r3, #0
 409 0014 02D1     		bne	.L22
 403:FreeRTOS/port.c **** 	{
 404:FreeRTOS/port.c **** 		portENABLE_INTERRUPTS();
 410              		.loc 1 404 0
 411 0016 0020     		movs	r0, #0
 412 0018 FFF7FEFF 		bl	vPortClearInterruptMask
 413              	.L22:
 405:FreeRTOS/port.c **** 	}
 406:FreeRTOS/port.c **** }
 414              		.loc 1 406 0
 415 001c 00BF     		nop
 416 001e 80BD     		pop	{r7, pc}
 417              	.L24:
 418              		.align	2
 419              	.L23:
 420 0020 00000000 		.word	uxCriticalNesting
 421              		.cfi_endproc
 422              	.LFE72:
 423              		.size	vPortExitCritical, .-vPortExitCritical
 424              		.section	.text.ulPortSetInterruptMask,"ax",%progbits
 425              		.align	2
 426              		.global	ulPortSetInterruptMask
 427              		.thumb
 428              		.thumb_func
 429              		.type	ulPortSetInterruptMask, %function
 430              	ulPortSetInterruptMask:
 431              	.LFB73:
 407:FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 408:FreeRTOS/port.c **** 
 409:FreeRTOS/port.c **** __attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
 410:FreeRTOS/port.c **** {
 432              		.loc 1 410 0
 433              		.cfi_startproc
 434              		@ Naked Function: prologue and epilogue provided by programmer.
 435              		@ args = 0, pretend = 0, frame = 0
 436              		@ frame_needed = 1, uses_anonymous_args = 0
 411:FreeRTOS/port.c **** 	__asm volatile														\
 437              		.loc 1 411 0
 438              		.syntax unified
 439              	@ 411 "FreeRTOS\port.c" 1
 440 0000 EFF31180 			mrs r0, basepri											
 441 0004 4FF0A001 		mov r1, #160												
 442 0008 81F31188 		msr basepri, r1											
 443 000c 7047     		bx lr													
 444              	
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 16


 445              	@ 0 "" 2
 412:FreeRTOS/port.c **** 	(																	\
 413:FreeRTOS/port.c **** 		"	mrs r0, basepri											\n" \
 414:FreeRTOS/port.c **** 		"	mov r1, %0												\n"	\
 415:FreeRTOS/port.c **** 		"	msr basepri, r1											\n" \
 416:FreeRTOS/port.c **** 		"	bx lr													\n" \
 417:FreeRTOS/port.c **** 		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
 418:FreeRTOS/port.c **** 	);
 419:FreeRTOS/port.c **** 
 420:FreeRTOS/port.c **** 	/* This return will not be reached but is necessary to prevent compiler
 421:FreeRTOS/port.c **** 	warnings. */
 422:FreeRTOS/port.c **** 	return 0;
 446              		.loc 1 422 0
 447              		.thumb
 448              		.syntax unified
 449 000e 0023     		movs	r3, #0
 423:FreeRTOS/port.c **** }
 450              		.loc 1 423 0
 451 0010 1846     		mov	r0, r3
 452              		.cfi_endproc
 453              	.LFE73:
 454              		.size	ulPortSetInterruptMask, .-ulPortSetInterruptMask
 455 0012 00BF     		.section	.text.vPortClearInterruptMask,"ax",%progbits
 456              		.align	2
 457              		.global	vPortClearInterruptMask
 458              		.thumb
 459              		.thumb_func
 460              		.type	vPortClearInterruptMask, %function
 461              	vPortClearInterruptMask:
 462              	.LFB74:
 424:FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 425:FreeRTOS/port.c **** 
 426:FreeRTOS/port.c **** __attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
 427:FreeRTOS/port.c **** {
 463              		.loc 1 427 0
 464              		.cfi_startproc
 465              		@ Naked Function: prologue and epilogue provided by programmer.
 466              		@ args = 0, pretend = 0, frame = 0
 467              		@ frame_needed = 1, uses_anonymous_args = 0
 428:FreeRTOS/port.c **** 	__asm volatile													\
 468              		.loc 1 428 0
 469              		.syntax unified
 470              	@ 428 "FreeRTOS\port.c" 1
 471 0000 80F31188 			msr basepri, r0										
 472 0004 7047     		bx lr												
 473              	
 474              	@ 0 "" 2
 429:FreeRTOS/port.c **** 	(																\
 430:FreeRTOS/port.c **** 		"	msr basepri, r0										\n"	\
 431:FreeRTOS/port.c **** 		"	bx lr												\n" \
 432:FreeRTOS/port.c **** 		:::"r0"														\
 433:FreeRTOS/port.c **** 	);
 434:FreeRTOS/port.c **** 
 435:FreeRTOS/port.c **** 	/* Just to avoid compiler warnings. */
 436:FreeRTOS/port.c **** 	( void ) ulNewMaskValue;
 437:FreeRTOS/port.c **** }
 475              		.loc 1 437 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 17


 476              		.thumb
 477              		.syntax unified
 478 0006 00BF     		nop
 479              		.cfi_endproc
 480              	.LFE74:
 481              		.size	vPortClearInterruptMask, .-vPortClearInterruptMask
 482              		.section	.text.xPortPendSVHandler,"ax",%progbits
 483              		.align	2
 484              		.global	xPortPendSVHandler
 485              		.thumb
 486              		.thumb_func
 487              		.type	xPortPendSVHandler, %function
 488              	xPortPendSVHandler:
 489              	.LFB75:
 438:FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 439:FreeRTOS/port.c **** 
 440:FreeRTOS/port.c **** void xPortPendSVHandler( void )
 441:FreeRTOS/port.c **** {
 490              		.loc 1 441 0
 491              		.cfi_startproc
 492              		@ Naked Function: prologue and epilogue provided by programmer.
 493              		@ args = 0, pretend = 0, frame = 0
 494              		@ frame_needed = 1, uses_anonymous_args = 0
 442:FreeRTOS/port.c **** 	/* This is a naked function. */
 443:FreeRTOS/port.c **** 
 444:FreeRTOS/port.c **** 	__asm volatile
 495              		.loc 1 444 0
 496              		.syntax unified
 497              	@ 444 "FreeRTOS\port.c" 1
 498 0000 EFF30980 			mrs r0, psp							
 499 0004 BFF36F8F 		isb									
 500              											
 501 0008 0D4B     		ldr	r3, pxCurrentTCBConst			
 502 000a 1A68     		ldr	r2, [r3]						
 503              											
 504 000c 20E9F00F 		stmdb r0!, {r4-r11}					
 505 0010 1060     		str r0, [r2]						
 506              											
 507 0012 2DE90840 		stmdb sp!, {r3, r14}				
 508 0016 4FF0A000 		mov r0, #160							
 509 001a 80F31188 		msr basepri, r0						
 510 001e FFF7FEFF 		bl vTaskSwitchContext				
 511 0022 4FF00000 		mov r0, #0							
 512 0026 80F31188 		msr basepri, r0						
 513 002a BDE80840 		ldmia sp!, {r3, r14}				
 514              											
 515 002e 1968     		ldr r1, [r3]						
 516 0030 0868     		ldr r0, [r1]						
 517 0032 B0E8F00F 		ldmia r0!, {r4-r11}					
 518 0036 80F30988 		msr psp, r0							
 519 003a BFF36F8F 		isb									
 520 003e 7047     		bx r14								
 521              											
 522              		.align 2							
 523 0040 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 524              	
 525              	@ 0 "" 2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 18


 445:FreeRTOS/port.c **** 	(
 446:FreeRTOS/port.c **** 	"	mrs r0, psp							\n"
 447:FreeRTOS/port.c **** 	"	isb									\n"
 448:FreeRTOS/port.c **** 	"										\n"
 449:FreeRTOS/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 450:FreeRTOS/port.c **** 	"	ldr	r2, [r3]						\n"
 451:FreeRTOS/port.c **** 	"										\n"
 452:FreeRTOS/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 453:FreeRTOS/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 454:FreeRTOS/port.c **** 	"										\n"
 455:FreeRTOS/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 456:FreeRTOS/port.c **** 	"	mov r0, %0							\n"
 457:FreeRTOS/port.c **** 	"	msr basepri, r0						\n"
 458:FreeRTOS/port.c **** 	"	bl vTaskSwitchContext				\n"
 459:FreeRTOS/port.c **** 	"	mov r0, #0							\n"
 460:FreeRTOS/port.c **** 	"	msr basepri, r0						\n"
 461:FreeRTOS/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 462:FreeRTOS/port.c **** 	"										\n"	/* Restore the context, including the critical nesting count. */
 463:FreeRTOS/port.c **** 	"	ldr r1, [r3]						\n"
 464:FreeRTOS/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 465:FreeRTOS/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 466:FreeRTOS/port.c **** 	"	msr psp, r0							\n"
 467:FreeRTOS/port.c **** 	"	isb									\n"
 468:FreeRTOS/port.c **** 	"	bx r14								\n"
 469:FreeRTOS/port.c **** 	"										\n"
 470:FreeRTOS/port.c **** 	"	.align 2							\n"
 471:FreeRTOS/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 472:FreeRTOS/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 473:FreeRTOS/port.c **** 	);
 474:FreeRTOS/port.c **** }
 526              		.loc 1 474 0
 527              		.thumb
 528              		.syntax unified
 529 0044 00BF     		nop
 530              		.cfi_endproc
 531              	.LFE75:
 532              		.size	xPortPendSVHandler, .-xPortPendSVHandler
 533 0046 00BF     		.section	.text.xPortSysTickHandler,"ax",%progbits
 534              		.align	2
 535              		.global	xPortSysTickHandler
 536              		.thumb
 537              		.thumb_func
 538              		.type	xPortSysTickHandler, %function
 539              	xPortSysTickHandler:
 540              	.LFB76:
 475:FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 476:FreeRTOS/port.c **** 
 477:FreeRTOS/port.c **** void xPortSysTickHandler( void )
 478:FreeRTOS/port.c **** {
 541              		.loc 1 478 0
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 0
 544              		@ frame_needed = 1, uses_anonymous_args = 0
 545 0000 80B5     		push	{r7, lr}
 546              		.cfi_def_cfa_offset 8
 547              		.cfi_offset 7, -8
 548              		.cfi_offset 14, -4
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 19


 549 0002 00AF     		add	r7, sp, #0
 550              		.cfi_def_cfa_register 7
 479:FreeRTOS/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 480:FreeRTOS/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 481:FreeRTOS/port.c **** 	save and then restore the interrupt mask value as its value is already
 482:FreeRTOS/port.c **** 	known. */
 483:FreeRTOS/port.c **** 	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 551              		.loc 1 483 0
 552 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
 484:FreeRTOS/port.c **** 	{
 485:FreeRTOS/port.c **** 		/* Increment the RTOS tick. */
 486:FreeRTOS/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 553              		.loc 1 486 0
 554 0008 FFF7FEFF 		bl	xTaskIncrementTick
 555 000c 0346     		mov	r3, r0
 556 000e 002B     		cmp	r3, #0
 557 0010 03D0     		beq	.L30
 487:FreeRTOS/port.c **** 		{
 488:FreeRTOS/port.c **** 			/* A context switch is required.  Context switching is performed in
 489:FreeRTOS/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 490:FreeRTOS/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 558              		.loc 1 490 0
 559 0012 044B     		ldr	r3, .L31
 560 0014 4FF08052 		mov	r2, #268435456
 561 0018 1A60     		str	r2, [r3]
 562              	.L30:
 491:FreeRTOS/port.c **** 		}
 492:FreeRTOS/port.c **** 	}
 493:FreeRTOS/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 563              		.loc 1 493 0
 564 001a 0020     		movs	r0, #0
 565 001c FFF7FEFF 		bl	vPortClearInterruptMask
 494:FreeRTOS/port.c **** }
 566              		.loc 1 494 0
 567 0020 00BF     		nop
 568 0022 80BD     		pop	{r7, pc}
 569              	.L32:
 570              		.align	2
 571              	.L31:
 572 0024 04ED00E0 		.word	-536810236
 573              		.cfi_endproc
 574              	.LFE76:
 575              		.size	xPortSysTickHandler, .-xPortSysTickHandler
 576              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 577              		.align	2
 578              		.weak	vPortSetupTimerInterrupt
 579              		.thumb
 580              		.thumb_func
 581              		.type	vPortSetupTimerInterrupt, %function
 582              	vPortSetupTimerInterrupt:
 583              	.LFB77:
 495:FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 496:FreeRTOS/port.c **** 
 497:FreeRTOS/port.c **** #if configUSE_TICKLESS_IDLE == 1
 498:FreeRTOS/port.c **** 
 499:FreeRTOS/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 500:FreeRTOS/port.c **** 	{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 20


 501:FreeRTOS/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickCTRL;
 502:FreeRTOS/port.c **** 	TickType_t xModifiableIdleTime;
 503:FreeRTOS/port.c **** 
 504:FreeRTOS/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 505:FreeRTOS/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 506:FreeRTOS/port.c **** 		{
 507:FreeRTOS/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 508:FreeRTOS/port.c **** 		}
 509:FreeRTOS/port.c **** 
 510:FreeRTOS/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 511:FreeRTOS/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 512:FreeRTOS/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 513:FreeRTOS/port.c **** 		kernel with respect to calendar time. */
 514:FreeRTOS/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 515:FreeRTOS/port.c **** 
 516:FreeRTOS/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 517:FreeRTOS/port.c **** 		tick periods.  -1 is used because this code will execute part way
 518:FreeRTOS/port.c **** 		through one of the tick periods. */
 519:FreeRTOS/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 520:FreeRTOS/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 521:FreeRTOS/port.c **** 		{
 522:FreeRTOS/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 523:FreeRTOS/port.c **** 		}
 524:FreeRTOS/port.c **** 
 525:FreeRTOS/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 526:FreeRTOS/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 527:FreeRTOS/port.c **** 		__asm volatile( "cpsid i" );
 528:FreeRTOS/port.c **** 
 529:FreeRTOS/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 530:FreeRTOS/port.c **** 		to be unsuspended then abandon the low power entry. */
 531:FreeRTOS/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 532:FreeRTOS/port.c **** 		{
 533:FreeRTOS/port.c **** 			/* Restart from whatever is left in the count register to complete
 534:FreeRTOS/port.c **** 			this tick period. */
 535:FreeRTOS/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 536:FreeRTOS/port.c **** 
 537:FreeRTOS/port.c **** 			/* Restart SysTick. */
 538:FreeRTOS/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 539:FreeRTOS/port.c **** 
 540:FreeRTOS/port.c **** 			/* Reset the reload register to the value required for normal tick
 541:FreeRTOS/port.c **** 			periods. */
 542:FreeRTOS/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 543:FreeRTOS/port.c **** 
 544:FreeRTOS/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 545:FreeRTOS/port.c **** 			above. */
 546:FreeRTOS/port.c **** 			__asm volatile( "cpsie i" );
 547:FreeRTOS/port.c **** 		}
 548:FreeRTOS/port.c **** 		else
 549:FreeRTOS/port.c **** 		{
 550:FreeRTOS/port.c **** 			/* Set the new reload value. */
 551:FreeRTOS/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 552:FreeRTOS/port.c **** 
 553:FreeRTOS/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 554:FreeRTOS/port.c **** 			zero. */
 555:FreeRTOS/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 556:FreeRTOS/port.c **** 
 557:FreeRTOS/port.c **** 			/* Restart SysTick. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 21


 558:FreeRTOS/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 559:FreeRTOS/port.c **** 
 560:FreeRTOS/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 561:FreeRTOS/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 562:FreeRTOS/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 563:FreeRTOS/port.c **** 			should not be executed again.  However, the original expected idle
 564:FreeRTOS/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 565:FreeRTOS/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 566:FreeRTOS/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 567:FreeRTOS/port.c **** 			if( xModifiableIdleTime > 0 )
 568:FreeRTOS/port.c **** 			{
 569:FreeRTOS/port.c **** 				__asm volatile( "dsb" );
 570:FreeRTOS/port.c **** 				__asm volatile( "wfi" );
 571:FreeRTOS/port.c **** 				__asm volatile( "isb" );
 572:FreeRTOS/port.c **** 			}
 573:FreeRTOS/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 574:FreeRTOS/port.c **** 
 575:FreeRTOS/port.c **** 			/* Stop SysTick.  Again, the time the SysTick is stopped for is
 576:FreeRTOS/port.c **** 			accounted for as best it can be, but using the tickless mode will
 577:FreeRTOS/port.c **** 			inevitably result in some tiny drift of the time maintained by the
 578:FreeRTOS/port.c **** 			kernel with respect to calendar time. */
 579:FreeRTOS/port.c **** 			ulSysTickCTRL = portNVIC_SYSTICK_CTRL_REG;
 580:FreeRTOS/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( ulSysTickCTRL & ~portNVIC_SYSTICK_ENABLE_BIT );
 581:FreeRTOS/port.c **** 
 582:FreeRTOS/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 583:FreeRTOS/port.c **** 			above. */
 584:FreeRTOS/port.c **** 			__asm volatile( "cpsie i" );
 585:FreeRTOS/port.c **** 
 586:FreeRTOS/port.c **** 			if( ( ulSysTickCTRL & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 587:FreeRTOS/port.c **** 			{
 588:FreeRTOS/port.c **** 				uint32_t ulCalculatedLoadValue;
 589:FreeRTOS/port.c **** 
 590:FreeRTOS/port.c **** 				/* The tick interrupt has already executed, and the SysTick
 591:FreeRTOS/port.c **** 				count reloaded with ulReloadValue.  Reset the
 592:FreeRTOS/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 593:FreeRTOS/port.c **** 				period. */
 594:FreeRTOS/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 595:FreeRTOS/port.c **** 
 596:FreeRTOS/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 597:FreeRTOS/port.c **** 				underflowed because the post sleep hook did something
 598:FreeRTOS/port.c **** 				that took too long. */
 599:FreeRTOS/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 600:FreeRTOS/port.c **** 				{
 601:FreeRTOS/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 602:FreeRTOS/port.c **** 				}
 603:FreeRTOS/port.c **** 
 604:FreeRTOS/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 605:FreeRTOS/port.c **** 
 606:FreeRTOS/port.c **** 				/* The tick interrupt handler will already have pended the tick
 607:FreeRTOS/port.c **** 				processing in the kernel.  As the pending tick will be
 608:FreeRTOS/port.c **** 				processed as soon as this function exits, the tick value
 609:FreeRTOS/port.c **** 				maintained by the tick is stepped forward by one less than the
 610:FreeRTOS/port.c **** 				time spent waiting. */
 611:FreeRTOS/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 612:FreeRTOS/port.c **** 			}
 613:FreeRTOS/port.c **** 			else
 614:FreeRTOS/port.c **** 			{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 22


 615:FreeRTOS/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 616:FreeRTOS/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 617:FreeRTOS/port.c **** 				periods (not the ulReload value which accounted for part
 618:FreeRTOS/port.c **** 				ticks). */
 619:FreeRTOS/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 620:FreeRTOS/port.c **** 
 621:FreeRTOS/port.c **** 				/* How many complete tick periods passed while the processor
 622:FreeRTOS/port.c **** 				was waiting? */
 623:FreeRTOS/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 624:FreeRTOS/port.c **** 
 625:FreeRTOS/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 626:FreeRTOS/port.c **** 				period remains. */
 627:FreeRTOS/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1 ) * ulTimerCountsForOneTick ) - ulCom
 628:FreeRTOS/port.c **** 			}
 629:FreeRTOS/port.c **** 
 630:FreeRTOS/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 631:FreeRTOS/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 632:FreeRTOS/port.c **** 			value.  The critical section is used to ensure the tick interrupt
 633:FreeRTOS/port.c **** 			can only execute once in the case that the reload register is near
 634:FreeRTOS/port.c **** 			zero. */
 635:FreeRTOS/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 636:FreeRTOS/port.c **** 			portENTER_CRITICAL();
 637:FreeRTOS/port.c **** 			{
 638:FreeRTOS/port.c **** 				portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 639:FreeRTOS/port.c **** 				vTaskStepTick( ulCompleteTickPeriods );
 640:FreeRTOS/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 641:FreeRTOS/port.c **** 			}
 642:FreeRTOS/port.c **** 			portEXIT_CRITICAL();
 643:FreeRTOS/port.c **** 		}
 644:FreeRTOS/port.c **** 	}
 645:FreeRTOS/port.c **** 
 646:FreeRTOS/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 647:FreeRTOS/port.c **** /*-----------------------------------------------------------*/
 648:FreeRTOS/port.c **** 
 649:FreeRTOS/port.c **** /*
 650:FreeRTOS/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 651:FreeRTOS/port.c ****  * frequency.
 652:FreeRTOS/port.c ****  */
 653:FreeRTOS/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 654:FreeRTOS/port.c **** {
 584              		.loc 1 654 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 0
 587              		@ frame_needed = 1, uses_anonymous_args = 0
 588              		@ link register save eliminated.
 589 0000 80B4     		push	{r7}
 590              		.cfi_def_cfa_offset 4
 591              		.cfi_offset 7, -4
 592 0002 00AF     		add	r7, sp, #0
 593              		.cfi_def_cfa_register 7
 655:FreeRTOS/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 656:FreeRTOS/port.c **** 	#if configUSE_TICKLESS_IDLE == 1
 657:FreeRTOS/port.c **** 	{
 658:FreeRTOS/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 659:FreeRTOS/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 660:FreeRTOS/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 661:FreeRTOS/port.c **** 	}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 23


 662:FreeRTOS/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 663:FreeRTOS/port.c **** 
 664:FreeRTOS/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 665:FreeRTOS/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 594              		.loc 1 665 0
 595 0004 054B     		ldr	r3, .L34
 596 0006 4FF6FF12 		movw	r2, #63999
 597 000a 1A60     		str	r2, [r3]
 666:FreeRTOS/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 598              		.loc 1 666 0
 599 000c 044B     		ldr	r3, .L34+4
 600 000e 0722     		movs	r2, #7
 601 0010 1A60     		str	r2, [r3]
 667:FreeRTOS/port.c **** }
 602              		.loc 1 667 0
 603 0012 00BF     		nop
 604 0014 BD46     		mov	sp, r7
 605              		.cfi_def_cfa_register 13
 606              		@ sp needed
 607 0016 80BC     		pop	{r7}
 608              		.cfi_restore 7
 609              		.cfi_def_cfa_offset 0
 610 0018 7047     		bx	lr
 611              	.L35:
 612 001a 00BF     		.align	2
 613              	.L34:
 614 001c 14E000E0 		.word	-536813548
 615 0020 10E000E0 		.word	-536813552
 616              		.cfi_endproc
 617              	.LFE77:
 618              		.size	vPortSetupTimerInterrupt, .-vPortSetupTimerInterrupt
 619              		.text
 620              	.Letext0:
 621              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 622              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 623              		.file 4 "FreeRTOS\\projdefs.h"
 624              		.file 5 "FreeRTOS\\portmacro.h"
 625              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 626              		.section	.debug_info,"",%progbits
 627              	.Ldebug_info0:
 628 0000 70020000 		.4byte	0x270
 629 0004 0400     		.2byte	0x4
 630 0006 00000000 		.4byte	.Ldebug_abbrev0
 631 000a 04       		.byte	0x4
 632 000b 01       		.uleb128 0x1
 633 000c 12000000 		.4byte	.LASF39
 634 0010 0C       		.byte	0xc
 635 0011 D7000000 		.4byte	.LASF40
 636 0015 AD010000 		.4byte	.LASF41
 637 0019 00000000 		.4byte	.Ldebug_ranges0+0
 638 001d 00000000 		.4byte	0
 639 0021 00000000 		.4byte	.Ldebug_line0
 640 0025 02       		.uleb128 0x2
 641 0026 04       		.byte	0x4
 642 0027 05       		.byte	0x5
 643 0028 696E7400 		.ascii	"int\000"
 644 002c 03       		.uleb128 0x3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 24


 645 002d 04       		.byte	0x4
 646 002e 07       		.byte	0x7
 647 002f FA000000 		.4byte	.LASF0
 648 0033 03       		.uleb128 0x3
 649 0034 08       		.byte	0x8
 650 0035 05       		.byte	0x5
 651 0036 7B020000 		.4byte	.LASF1
 652 003a 03       		.uleb128 0x3
 653 003b 08       		.byte	0x8
 654 003c 04       		.byte	0x4
 655 003d 17030000 		.4byte	.LASF2
 656 0041 03       		.uleb128 0x3
 657 0042 01       		.byte	0x1
 658 0043 06       		.byte	0x6
 659 0044 23030000 		.4byte	.LASF3
 660 0048 03       		.uleb128 0x3
 661 0049 01       		.byte	0x1
 662 004a 08       		.byte	0x8
 663 004b 4E010000 		.4byte	.LASF4
 664 004f 03       		.uleb128 0x3
 665 0050 02       		.byte	0x2
 666 0051 05       		.byte	0x5
 667 0052 C2020000 		.4byte	.LASF5
 668 0056 03       		.uleb128 0x3
 669 0057 02       		.byte	0x2
 670 0058 07       		.byte	0x7
 671 0059 6E010000 		.4byte	.LASF6
 672 005d 04       		.uleb128 0x4
 673 005e C4000000 		.4byte	.LASF8
 674 0062 02       		.byte	0x2
 675 0063 3F       		.byte	0x3f
 676 0064 68000000 		.4byte	0x68
 677 0068 03       		.uleb128 0x3
 678 0069 04       		.byte	0x4
 679 006a 05       		.byte	0x5
 680 006b CE000000 		.4byte	.LASF7
 681 006f 04       		.uleb128 0x4
 682 0070 95010000 		.4byte	.LASF9
 683 0074 02       		.byte	0x2
 684 0075 41       		.byte	0x41
 685 0076 7A000000 		.4byte	0x7a
 686 007a 03       		.uleb128 0x3
 687 007b 04       		.byte	0x4
 688 007c 07       		.byte	0x7
 689 007d 5C010000 		.4byte	.LASF10
 690 0081 03       		.uleb128 0x3
 691 0082 08       		.byte	0x8
 692 0083 07       		.byte	0x7
 693 0084 31020000 		.4byte	.LASF11
 694 0088 04       		.uleb128 0x4
 695 0089 40010000 		.4byte	.LASF12
 696 008d 03       		.byte	0x3
 697 008e 2C       		.byte	0x2c
 698 008f 5D000000 		.4byte	0x5d
 699 0093 04       		.uleb128 0x4
 700 0094 DE020000 		.4byte	.LASF13
 701 0098 03       		.byte	0x3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 25


 702 0099 30       		.byte	0x30
 703 009a 6F000000 		.4byte	0x6f
 704 009e 03       		.uleb128 0x3
 705 009f 04       		.byte	0x4
 706 00a0 04       		.byte	0x4
 707 00a1 48010000 		.4byte	.LASF14
 708 00a5 03       		.uleb128 0x3
 709 00a6 08       		.byte	0x8
 710 00a7 04       		.byte	0x4
 711 00a8 8E010000 		.4byte	.LASF15
 712 00ac 03       		.uleb128 0x3
 713 00ad 01       		.byte	0x1
 714 00ae 08       		.byte	0x8
 715 00af A1020000 		.4byte	.LASF16
 716 00b3 03       		.uleb128 0x3
 717 00b4 04       		.byte	0x4
 718 00b5 07       		.byte	0x7
 719 00b6 72020000 		.4byte	.LASF17
 720 00ba 05       		.uleb128 0x5
 721 00bb 04       		.byte	0x4
 722 00bc 04       		.uleb128 0x4
 723 00bd 31010000 		.4byte	.LASF18
 724 00c1 04       		.byte	0x4
 725 00c2 4D       		.byte	0x4d
 726 00c3 C7000000 		.4byte	0xc7
 727 00c7 06       		.uleb128 0x6
 728 00c8 04       		.byte	0x4
 729 00c9 CD000000 		.4byte	0xcd
 730 00cd 07       		.uleb128 0x7
 731 00ce D8000000 		.4byte	0xd8
 732 00d2 08       		.uleb128 0x8
 733 00d3 BA000000 		.4byte	0xba
 734 00d7 00       		.byte	0
 735 00d8 04       		.uleb128 0x4
 736 00d9 A6020000 		.4byte	.LASF19
 737 00dd 05       		.byte	0x5
 738 00de 61       		.byte	0x61
 739 00df 93000000 		.4byte	0x93
 740 00e3 04       		.uleb128 0x4
 741 00e4 F6020000 		.4byte	.LASF20
 742 00e8 05       		.byte	0x5
 743 00e9 62       		.byte	0x62
 744 00ea 68000000 		.4byte	0x68
 745 00ee 04       		.uleb128 0x4
 746 00ef 43030000 		.4byte	.LASF21
 747 00f3 05       		.byte	0x5
 748 00f4 63       		.byte	0x63
 749 00f5 7A000000 		.4byte	0x7a
 750 00f9 04       		.uleb128 0x4
 751 00fa B9000000 		.4byte	.LASF22
 752 00fe 05       		.byte	0x5
 753 00ff 69       		.byte	0x69
 754 0100 93000000 		.4byte	0x93
 755 0104 06       		.uleb128 0x6
 756 0105 04       		.byte	0x4
 757 0106 D8000000 		.4byte	0xd8
 758 010a 09       		.uleb128 0x9
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 26


 759 010b 4F030000 		.4byte	.LASF42
 760 010f 01       		.byte	0x1
 761 0110 D4       		.byte	0xd4
 762 0111 04010000 		.4byte	0x104
 763 0115 00000000 		.4byte	.LFB64
 764 0119 54000000 		.4byte	.LFE64-.LFB64
 765 011d 01       		.uleb128 0x1
 766 011e 9C       		.byte	0x9c
 767 011f 4E010000 		.4byte	0x14e
 768 0123 0A       		.uleb128 0xa
 769 0124 24020000 		.4byte	.LASF23
 770 0128 01       		.byte	0x1
 771 0129 D4       		.byte	0xd4
 772 012a 04010000 		.4byte	0x104
 773 012e 02       		.uleb128 0x2
 774 012f 91       		.byte	0x91
 775 0130 74       		.sleb128 -12
 776 0131 0A       		.uleb128 0xa
 777 0132 A0000000 		.4byte	.LASF24
 778 0136 01       		.byte	0x1
 779 0137 D4       		.byte	0xd4
 780 0138 BC000000 		.4byte	0xbc
 781 013c 02       		.uleb128 0x2
 782 013d 91       		.byte	0x91
 783 013e 70       		.sleb128 -16
 784 013f 0A       		.uleb128 0xa
 785 0140 A0010000 		.4byte	.LASF25
 786 0144 01       		.byte	0x1
 787 0145 D4       		.byte	0xd4
 788 0146 BA000000 		.4byte	0xba
 789 014a 02       		.uleb128 0x2
 790 014b 91       		.byte	0x91
 791 014c 6C       		.sleb128 -20
 792 014d 00       		.byte	0
 793 014e 0B       		.uleb128 0xb
 794 014f 48020000 		.4byte	.LASF26
 795 0153 01       		.byte	0x1
 796 0154 E6       		.byte	0xe6
 797 0155 00000000 		.4byte	.LFB65
 798 0159 0A000000 		.4byte	.LFE65-.LFB65
 799 015d 01       		.uleb128 0x1
 800 015e 9C       		.byte	0x9c
 801 015f 0C       		.uleb128 0xc
 802 0160 B2020000 		.4byte	.LASF28
 803 0164 01       		.byte	0x1
 804 0165 F4       		.byte	0xf4
 805 0166 00000000 		.4byte	.LFB66
 806 016a 26000000 		.4byte	.LFE66-.LFB66
 807 016e 01       		.uleb128 0x1
 808 016f 9C       		.byte	0x9c
 809 0170 0D       		.uleb128 0xd
 810 0171 01030000 		.4byte	.LASF27
 811 0175 01       		.byte	0x1
 812 0176 0801     		.2byte	0x108
 813 0178 00000000 		.4byte	.LFB67
 814 017c 1C000000 		.4byte	.LFE67-.LFB67
 815 0180 01       		.uleb128 0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 27


 816 0181 9C       		.byte	0x9c
 817 0182 0E       		.uleb128 0xe
 818 0183 2F030000 		.4byte	.LASF33
 819 0187 01       		.byte	0x1
 820 0188 1C01     		.2byte	0x11c
 821 018a E3000000 		.4byte	0xe3
 822 018e 00000000 		.4byte	.LFB68
 823 0192 3C000000 		.4byte	.LFE68-.LFB68
 824 0196 01       		.uleb128 0x1
 825 0197 9C       		.byte	0x9c
 826 0198 0F       		.uleb128 0xf
 827 0199 A7000000 		.4byte	.LASF29
 828 019d 01       		.byte	0x1
 829 019e 6701     		.2byte	0x167
 830 01a0 00000000 		.4byte	.LFB69
 831 01a4 0C000000 		.4byte	.LFE69-.LFB69
 832 01a8 01       		.uleb128 0x1
 833 01a9 9C       		.byte	0x9c
 834 01aa 0F       		.uleb128 0xf
 835 01ab 19020000 		.4byte	.LASF30
 836 01af 01       		.byte	0x1
 837 01b0 6F01     		.2byte	0x16f
 838 01b2 00000000 		.4byte	.LFB70
 839 01b6 20000000 		.4byte	.LFE70-.LFB70
 840 01ba 01       		.uleb128 0x1
 841 01bb 9C       		.byte	0x9c
 842 01bc 10       		.uleb128 0x10
 843 01bd E7000000 		.4byte	.LASF31
 844 01c1 01       		.byte	0x1
 845 01c2 7B01     		.2byte	0x17b
 846 01c4 00000000 		.4byte	.LFB71
 847 01c8 24000000 		.4byte	.LFE71-.LFB71
 848 01cc 01       		.uleb128 0x1
 849 01cd 9C       		.byte	0x9c
 850 01ce 10       		.uleb128 0x10
 851 01cf CC020000 		.4byte	.LASF32
 852 01d3 01       		.byte	0x1
 853 01d4 8E01     		.2byte	0x18e
 854 01d6 00000000 		.4byte	.LFB72
 855 01da 24000000 		.4byte	.LFE72-.LFB72
 856 01de 01       		.uleb128 0x1
 857 01df 9C       		.byte	0x9c
 858 01e0 11       		.uleb128 0x11
 859 01e1 1A010000 		.4byte	.LASF34
 860 01e5 01       		.byte	0x1
 861 01e6 9901     		.2byte	0x199
 862 01e8 93000000 		.4byte	0x93
 863 01ec 00000000 		.4byte	.LFB73
 864 01f0 12000000 		.4byte	.LFE73-.LFB73
 865 01f4 01       		.uleb128 0x1
 866 01f5 9C       		.byte	0x9c
 867 01f6 12       		.uleb128 0x12
 868 01f7 89020000 		.4byte	.LASF43
 869 01fb 01       		.byte	0x1
 870 01fc AA01     		.2byte	0x1aa
 871 01fe 00000000 		.4byte	.LFB74
 872 0202 08000000 		.4byte	.LFE74-.LFB74
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 28


 873 0206 01       		.uleb128 0x1
 874 0207 9C       		.byte	0x9c
 875 0208 1B020000 		.4byte	0x21b
 876 020c 13       		.uleb128 0x13
 877 020d E7020000 		.4byte	.LASF35
 878 0211 01       		.byte	0x1
 879 0212 AA01     		.2byte	0x1aa
 880 0214 93000000 		.4byte	0x93
 881 0218 01       		.uleb128 0x1
 882 0219 50       		.byte	0x50
 883 021a 00       		.byte	0
 884 021b 0F       		.uleb128 0xf
 885 021c 07010000 		.4byte	.LASF36
 886 0220 01       		.byte	0x1
 887 0221 B801     		.2byte	0x1b8
 888 0223 00000000 		.4byte	.LFB75
 889 0227 46000000 		.4byte	.LFE75-.LFB75
 890 022b 01       		.uleb128 0x1
 891 022c 9C       		.byte	0x9c
 892 022d 10       		.uleb128 0x10
 893 022e 05020000 		.4byte	.LASF37
 894 0232 01       		.byte	0x1
 895 0233 DD01     		.2byte	0x1dd
 896 0235 00000000 		.4byte	.LFB76
 897 0239 28000000 		.4byte	.LFE76-.LFB76
 898 023d 01       		.uleb128 0x1
 899 023e 9C       		.byte	0x9c
 900 023f 0F       		.uleb128 0xf
 901 0240 59020000 		.4byte	.LASF38
 902 0244 01       		.byte	0x1
 903 0245 8D02     		.2byte	0x28d
 904 0247 00000000 		.4byte	.LFB77
 905 024b 24000000 		.4byte	.LFE77-.LFB77
 906 024f 01       		.uleb128 0x1
 907 0250 9C       		.byte	0x9c
 908 0251 14       		.uleb128 0x14
 909 0252 00000000 		.4byte	.LASF44
 910 0256 01       		.byte	0x1
 911 0257 91       		.byte	0x91
 912 0258 EE000000 		.4byte	0xee
 913 025c 05       		.uleb128 0x5
 914 025d 03       		.byte	0x3
 915 025e 00000000 		.4byte	uxCriticalNesting
 916 0262 15       		.uleb128 0x15
 917 0263 81010000 		.4byte	.LASF45
 918 0267 06       		.byte	0x6
 919 0268 1207     		.2byte	0x712
 920 026a 6E020000 		.4byte	0x26e
 921 026e 16       		.uleb128 0x16
 922 026f 88000000 		.4byte	0x88
 923 0273 00       		.byte	0
 924              		.section	.debug_abbrev,"",%progbits
 925              	.Ldebug_abbrev0:
 926 0000 01       		.uleb128 0x1
 927 0001 11       		.uleb128 0x11
 928 0002 01       		.byte	0x1
 929 0003 25       		.uleb128 0x25
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 29


 930 0004 0E       		.uleb128 0xe
 931 0005 13       		.uleb128 0x13
 932 0006 0B       		.uleb128 0xb
 933 0007 03       		.uleb128 0x3
 934 0008 0E       		.uleb128 0xe
 935 0009 1B       		.uleb128 0x1b
 936 000a 0E       		.uleb128 0xe
 937 000b 55       		.uleb128 0x55
 938 000c 17       		.uleb128 0x17
 939 000d 11       		.uleb128 0x11
 940 000e 01       		.uleb128 0x1
 941 000f 10       		.uleb128 0x10
 942 0010 17       		.uleb128 0x17
 943 0011 00       		.byte	0
 944 0012 00       		.byte	0
 945 0013 02       		.uleb128 0x2
 946 0014 24       		.uleb128 0x24
 947 0015 00       		.byte	0
 948 0016 0B       		.uleb128 0xb
 949 0017 0B       		.uleb128 0xb
 950 0018 3E       		.uleb128 0x3e
 951 0019 0B       		.uleb128 0xb
 952 001a 03       		.uleb128 0x3
 953 001b 08       		.uleb128 0x8
 954 001c 00       		.byte	0
 955 001d 00       		.byte	0
 956 001e 03       		.uleb128 0x3
 957 001f 24       		.uleb128 0x24
 958 0020 00       		.byte	0
 959 0021 0B       		.uleb128 0xb
 960 0022 0B       		.uleb128 0xb
 961 0023 3E       		.uleb128 0x3e
 962 0024 0B       		.uleb128 0xb
 963 0025 03       		.uleb128 0x3
 964 0026 0E       		.uleb128 0xe
 965 0027 00       		.byte	0
 966 0028 00       		.byte	0
 967 0029 04       		.uleb128 0x4
 968 002a 16       		.uleb128 0x16
 969 002b 00       		.byte	0
 970 002c 03       		.uleb128 0x3
 971 002d 0E       		.uleb128 0xe
 972 002e 3A       		.uleb128 0x3a
 973 002f 0B       		.uleb128 0xb
 974 0030 3B       		.uleb128 0x3b
 975 0031 0B       		.uleb128 0xb
 976 0032 49       		.uleb128 0x49
 977 0033 13       		.uleb128 0x13
 978 0034 00       		.byte	0
 979 0035 00       		.byte	0
 980 0036 05       		.uleb128 0x5
 981 0037 0F       		.uleb128 0xf
 982 0038 00       		.byte	0
 983 0039 0B       		.uleb128 0xb
 984 003a 0B       		.uleb128 0xb
 985 003b 00       		.byte	0
 986 003c 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 30


 987 003d 06       		.uleb128 0x6
 988 003e 0F       		.uleb128 0xf
 989 003f 00       		.byte	0
 990 0040 0B       		.uleb128 0xb
 991 0041 0B       		.uleb128 0xb
 992 0042 49       		.uleb128 0x49
 993 0043 13       		.uleb128 0x13
 994 0044 00       		.byte	0
 995 0045 00       		.byte	0
 996 0046 07       		.uleb128 0x7
 997 0047 15       		.uleb128 0x15
 998 0048 01       		.byte	0x1
 999 0049 27       		.uleb128 0x27
 1000 004a 19       		.uleb128 0x19
 1001 004b 01       		.uleb128 0x1
 1002 004c 13       		.uleb128 0x13
 1003 004d 00       		.byte	0
 1004 004e 00       		.byte	0
 1005 004f 08       		.uleb128 0x8
 1006 0050 05       		.uleb128 0x5
 1007 0051 00       		.byte	0
 1008 0052 49       		.uleb128 0x49
 1009 0053 13       		.uleb128 0x13
 1010 0054 00       		.byte	0
 1011 0055 00       		.byte	0
 1012 0056 09       		.uleb128 0x9
 1013 0057 2E       		.uleb128 0x2e
 1014 0058 01       		.byte	0x1
 1015 0059 3F       		.uleb128 0x3f
 1016 005a 19       		.uleb128 0x19
 1017 005b 03       		.uleb128 0x3
 1018 005c 0E       		.uleb128 0xe
 1019 005d 3A       		.uleb128 0x3a
 1020 005e 0B       		.uleb128 0xb
 1021 005f 3B       		.uleb128 0x3b
 1022 0060 0B       		.uleb128 0xb
 1023 0061 27       		.uleb128 0x27
 1024 0062 19       		.uleb128 0x19
 1025 0063 49       		.uleb128 0x49
 1026 0064 13       		.uleb128 0x13
 1027 0065 11       		.uleb128 0x11
 1028 0066 01       		.uleb128 0x1
 1029 0067 12       		.uleb128 0x12
 1030 0068 06       		.uleb128 0x6
 1031 0069 40       		.uleb128 0x40
 1032 006a 18       		.uleb128 0x18
 1033 006b 9742     		.uleb128 0x2117
 1034 006d 19       		.uleb128 0x19
 1035 006e 01       		.uleb128 0x1
 1036 006f 13       		.uleb128 0x13
 1037 0070 00       		.byte	0
 1038 0071 00       		.byte	0
 1039 0072 0A       		.uleb128 0xa
 1040 0073 05       		.uleb128 0x5
 1041 0074 00       		.byte	0
 1042 0075 03       		.uleb128 0x3
 1043 0076 0E       		.uleb128 0xe
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 31


 1044 0077 3A       		.uleb128 0x3a
 1045 0078 0B       		.uleb128 0xb
 1046 0079 3B       		.uleb128 0x3b
 1047 007a 0B       		.uleb128 0xb
 1048 007b 49       		.uleb128 0x49
 1049 007c 13       		.uleb128 0x13
 1050 007d 02       		.uleb128 0x2
 1051 007e 18       		.uleb128 0x18
 1052 007f 00       		.byte	0
 1053 0080 00       		.byte	0
 1054 0081 0B       		.uleb128 0xb
 1055 0082 2E       		.uleb128 0x2e
 1056 0083 00       		.byte	0
 1057 0084 03       		.uleb128 0x3
 1058 0085 0E       		.uleb128 0xe
 1059 0086 3A       		.uleb128 0x3a
 1060 0087 0B       		.uleb128 0xb
 1061 0088 3B       		.uleb128 0x3b
 1062 0089 0B       		.uleb128 0xb
 1063 008a 27       		.uleb128 0x27
 1064 008b 19       		.uleb128 0x19
 1065 008c 11       		.uleb128 0x11
 1066 008d 01       		.uleb128 0x1
 1067 008e 12       		.uleb128 0x12
 1068 008f 06       		.uleb128 0x6
 1069 0090 40       		.uleb128 0x40
 1070 0091 18       		.uleb128 0x18
 1071 0092 9642     		.uleb128 0x2116
 1072 0094 19       		.uleb128 0x19
 1073 0095 00       		.byte	0
 1074 0096 00       		.byte	0
 1075 0097 0C       		.uleb128 0xc
 1076 0098 2E       		.uleb128 0x2e
 1077 0099 00       		.byte	0
 1078 009a 3F       		.uleb128 0x3f
 1079 009b 19       		.uleb128 0x19
 1080 009c 03       		.uleb128 0x3
 1081 009d 0E       		.uleb128 0xe
 1082 009e 3A       		.uleb128 0x3a
 1083 009f 0B       		.uleb128 0xb
 1084 00a0 3B       		.uleb128 0x3b
 1085 00a1 0B       		.uleb128 0xb
 1086 00a2 27       		.uleb128 0x27
 1087 00a3 19       		.uleb128 0x19
 1088 00a4 11       		.uleb128 0x11
 1089 00a5 01       		.uleb128 0x1
 1090 00a6 12       		.uleb128 0x12
 1091 00a7 06       		.uleb128 0x6
 1092 00a8 40       		.uleb128 0x40
 1093 00a9 18       		.uleb128 0x18
 1094 00aa 9742     		.uleb128 0x2117
 1095 00ac 19       		.uleb128 0x19
 1096 00ad 00       		.byte	0
 1097 00ae 00       		.byte	0
 1098 00af 0D       		.uleb128 0xd
 1099 00b0 2E       		.uleb128 0x2e
 1100 00b1 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 32


 1101 00b2 03       		.uleb128 0x3
 1102 00b3 0E       		.uleb128 0xe
 1103 00b4 3A       		.uleb128 0x3a
 1104 00b5 0B       		.uleb128 0xb
 1105 00b6 3B       		.uleb128 0x3b
 1106 00b7 05       		.uleb128 0x5
 1107 00b8 27       		.uleb128 0x27
 1108 00b9 19       		.uleb128 0x19
 1109 00ba 11       		.uleb128 0x11
 1110 00bb 01       		.uleb128 0x1
 1111 00bc 12       		.uleb128 0x12
 1112 00bd 06       		.uleb128 0x6
 1113 00be 40       		.uleb128 0x40
 1114 00bf 18       		.uleb128 0x18
 1115 00c0 9742     		.uleb128 0x2117
 1116 00c2 19       		.uleb128 0x19
 1117 00c3 00       		.byte	0
 1118 00c4 00       		.byte	0
 1119 00c5 0E       		.uleb128 0xe
 1120 00c6 2E       		.uleb128 0x2e
 1121 00c7 00       		.byte	0
 1122 00c8 3F       		.uleb128 0x3f
 1123 00c9 19       		.uleb128 0x19
 1124 00ca 03       		.uleb128 0x3
 1125 00cb 0E       		.uleb128 0xe
 1126 00cc 3A       		.uleb128 0x3a
 1127 00cd 0B       		.uleb128 0xb
 1128 00ce 3B       		.uleb128 0x3b
 1129 00cf 05       		.uleb128 0x5
 1130 00d0 27       		.uleb128 0x27
 1131 00d1 19       		.uleb128 0x19
 1132 00d2 49       		.uleb128 0x49
 1133 00d3 13       		.uleb128 0x13
 1134 00d4 11       		.uleb128 0x11
 1135 00d5 01       		.uleb128 0x1
 1136 00d6 12       		.uleb128 0x12
 1137 00d7 06       		.uleb128 0x6
 1138 00d8 40       		.uleb128 0x40
 1139 00d9 18       		.uleb128 0x18
 1140 00da 9642     		.uleb128 0x2116
 1141 00dc 19       		.uleb128 0x19
 1142 00dd 00       		.byte	0
 1143 00de 00       		.byte	0
 1144 00df 0F       		.uleb128 0xf
 1145 00e0 2E       		.uleb128 0x2e
 1146 00e1 00       		.byte	0
 1147 00e2 3F       		.uleb128 0x3f
 1148 00e3 19       		.uleb128 0x19
 1149 00e4 03       		.uleb128 0x3
 1150 00e5 0E       		.uleb128 0xe
 1151 00e6 3A       		.uleb128 0x3a
 1152 00e7 0B       		.uleb128 0xb
 1153 00e8 3B       		.uleb128 0x3b
 1154 00e9 05       		.uleb128 0x5
 1155 00ea 27       		.uleb128 0x27
 1156 00eb 19       		.uleb128 0x19
 1157 00ec 11       		.uleb128 0x11
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 33


 1158 00ed 01       		.uleb128 0x1
 1159 00ee 12       		.uleb128 0x12
 1160 00ef 06       		.uleb128 0x6
 1161 00f0 40       		.uleb128 0x40
 1162 00f1 18       		.uleb128 0x18
 1163 00f2 9742     		.uleb128 0x2117
 1164 00f4 19       		.uleb128 0x19
 1165 00f5 00       		.byte	0
 1166 00f6 00       		.byte	0
 1167 00f7 10       		.uleb128 0x10
 1168 00f8 2E       		.uleb128 0x2e
 1169 00f9 00       		.byte	0
 1170 00fa 3F       		.uleb128 0x3f
 1171 00fb 19       		.uleb128 0x19
 1172 00fc 03       		.uleb128 0x3
 1173 00fd 0E       		.uleb128 0xe
 1174 00fe 3A       		.uleb128 0x3a
 1175 00ff 0B       		.uleb128 0xb
 1176 0100 3B       		.uleb128 0x3b
 1177 0101 05       		.uleb128 0x5
 1178 0102 27       		.uleb128 0x27
 1179 0103 19       		.uleb128 0x19
 1180 0104 11       		.uleb128 0x11
 1181 0105 01       		.uleb128 0x1
 1182 0106 12       		.uleb128 0x12
 1183 0107 06       		.uleb128 0x6
 1184 0108 40       		.uleb128 0x40
 1185 0109 18       		.uleb128 0x18
 1186 010a 9642     		.uleb128 0x2116
 1187 010c 19       		.uleb128 0x19
 1188 010d 00       		.byte	0
 1189 010e 00       		.byte	0
 1190 010f 11       		.uleb128 0x11
 1191 0110 2E       		.uleb128 0x2e
 1192 0111 00       		.byte	0
 1193 0112 3F       		.uleb128 0x3f
 1194 0113 19       		.uleb128 0x19
 1195 0114 03       		.uleb128 0x3
 1196 0115 0E       		.uleb128 0xe
 1197 0116 3A       		.uleb128 0x3a
 1198 0117 0B       		.uleb128 0xb
 1199 0118 3B       		.uleb128 0x3b
 1200 0119 05       		.uleb128 0x5
 1201 011a 27       		.uleb128 0x27
 1202 011b 19       		.uleb128 0x19
 1203 011c 49       		.uleb128 0x49
 1204 011d 13       		.uleb128 0x13
 1205 011e 11       		.uleb128 0x11
 1206 011f 01       		.uleb128 0x1
 1207 0120 12       		.uleb128 0x12
 1208 0121 06       		.uleb128 0x6
 1209 0122 40       		.uleb128 0x40
 1210 0123 18       		.uleb128 0x18
 1211 0124 9742     		.uleb128 0x2117
 1212 0126 19       		.uleb128 0x19
 1213 0127 00       		.byte	0
 1214 0128 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 34


 1215 0129 12       		.uleb128 0x12
 1216 012a 2E       		.uleb128 0x2e
 1217 012b 01       		.byte	0x1
 1218 012c 3F       		.uleb128 0x3f
 1219 012d 19       		.uleb128 0x19
 1220 012e 03       		.uleb128 0x3
 1221 012f 0E       		.uleb128 0xe
 1222 0130 3A       		.uleb128 0x3a
 1223 0131 0B       		.uleb128 0xb
 1224 0132 3B       		.uleb128 0x3b
 1225 0133 05       		.uleb128 0x5
 1226 0134 27       		.uleb128 0x27
 1227 0135 19       		.uleb128 0x19
 1228 0136 11       		.uleb128 0x11
 1229 0137 01       		.uleb128 0x1
 1230 0138 12       		.uleb128 0x12
 1231 0139 06       		.uleb128 0x6
 1232 013a 40       		.uleb128 0x40
 1233 013b 18       		.uleb128 0x18
 1234 013c 9742     		.uleb128 0x2117
 1235 013e 19       		.uleb128 0x19
 1236 013f 01       		.uleb128 0x1
 1237 0140 13       		.uleb128 0x13
 1238 0141 00       		.byte	0
 1239 0142 00       		.byte	0
 1240 0143 13       		.uleb128 0x13
 1241 0144 05       		.uleb128 0x5
 1242 0145 00       		.byte	0
 1243 0146 03       		.uleb128 0x3
 1244 0147 0E       		.uleb128 0xe
 1245 0148 3A       		.uleb128 0x3a
 1246 0149 0B       		.uleb128 0xb
 1247 014a 3B       		.uleb128 0x3b
 1248 014b 05       		.uleb128 0x5
 1249 014c 49       		.uleb128 0x49
 1250 014d 13       		.uleb128 0x13
 1251 014e 02       		.uleb128 0x2
 1252 014f 18       		.uleb128 0x18
 1253 0150 00       		.byte	0
 1254 0151 00       		.byte	0
 1255 0152 14       		.uleb128 0x14
 1256 0153 34       		.uleb128 0x34
 1257 0154 00       		.byte	0
 1258 0155 03       		.uleb128 0x3
 1259 0156 0E       		.uleb128 0xe
 1260 0157 3A       		.uleb128 0x3a
 1261 0158 0B       		.uleb128 0xb
 1262 0159 3B       		.uleb128 0x3b
 1263 015a 0B       		.uleb128 0xb
 1264 015b 49       		.uleb128 0x49
 1265 015c 13       		.uleb128 0x13
 1266 015d 02       		.uleb128 0x2
 1267 015e 18       		.uleb128 0x18
 1268 015f 00       		.byte	0
 1269 0160 00       		.byte	0
 1270 0161 15       		.uleb128 0x15
 1271 0162 34       		.uleb128 0x34
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 35


 1272 0163 00       		.byte	0
 1273 0164 03       		.uleb128 0x3
 1274 0165 0E       		.uleb128 0xe
 1275 0166 3A       		.uleb128 0x3a
 1276 0167 0B       		.uleb128 0xb
 1277 0168 3B       		.uleb128 0x3b
 1278 0169 05       		.uleb128 0x5
 1279 016a 49       		.uleb128 0x49
 1280 016b 13       		.uleb128 0x13
 1281 016c 3F       		.uleb128 0x3f
 1282 016d 19       		.uleb128 0x19
 1283 016e 3C       		.uleb128 0x3c
 1284 016f 19       		.uleb128 0x19
 1285 0170 00       		.byte	0
 1286 0171 00       		.byte	0
 1287 0172 16       		.uleb128 0x16
 1288 0173 35       		.uleb128 0x35
 1289 0174 00       		.byte	0
 1290 0175 49       		.uleb128 0x49
 1291 0176 13       		.uleb128 0x13
 1292 0177 00       		.byte	0
 1293 0178 00       		.byte	0
 1294 0179 00       		.byte	0
 1295              		.section	.debug_aranges,"",%progbits
 1296 0000 84000000 		.4byte	0x84
 1297 0004 0200     		.2byte	0x2
 1298 0006 00000000 		.4byte	.Ldebug_info0
 1299 000a 04       		.byte	0x4
 1300 000b 00       		.byte	0
 1301 000c 0000     		.2byte	0
 1302 000e 0000     		.2byte	0
 1303 0010 00000000 		.4byte	.LFB64
 1304 0014 54000000 		.4byte	.LFE64-.LFB64
 1305 0018 00000000 		.4byte	.LFB65
 1306 001c 0A000000 		.4byte	.LFE65-.LFB65
 1307 0020 00000000 		.4byte	.LFB66
 1308 0024 26000000 		.4byte	.LFE66-.LFB66
 1309 0028 00000000 		.4byte	.LFB67
 1310 002c 1C000000 		.4byte	.LFE67-.LFB67
 1311 0030 00000000 		.4byte	.LFB68
 1312 0034 3C000000 		.4byte	.LFE68-.LFB68
 1313 0038 00000000 		.4byte	.LFB69
 1314 003c 0C000000 		.4byte	.LFE69-.LFB69
 1315 0040 00000000 		.4byte	.LFB70
 1316 0044 20000000 		.4byte	.LFE70-.LFB70
 1317 0048 00000000 		.4byte	.LFB71
 1318 004c 24000000 		.4byte	.LFE71-.LFB71
 1319 0050 00000000 		.4byte	.LFB72
 1320 0054 24000000 		.4byte	.LFE72-.LFB72
 1321 0058 00000000 		.4byte	.LFB73
 1322 005c 12000000 		.4byte	.LFE73-.LFB73
 1323 0060 00000000 		.4byte	.LFB74
 1324 0064 08000000 		.4byte	.LFE74-.LFB74
 1325 0068 00000000 		.4byte	.LFB75
 1326 006c 46000000 		.4byte	.LFE75-.LFB75
 1327 0070 00000000 		.4byte	.LFB76
 1328 0074 28000000 		.4byte	.LFE76-.LFB76
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 36


 1329 0078 00000000 		.4byte	.LFB77
 1330 007c 24000000 		.4byte	.LFE77-.LFB77
 1331 0080 00000000 		.4byte	0
 1332 0084 00000000 		.4byte	0
 1333              		.section	.debug_ranges,"",%progbits
 1334              	.Ldebug_ranges0:
 1335 0000 00000000 		.4byte	.LFB64
 1336 0004 54000000 		.4byte	.LFE64
 1337 0008 00000000 		.4byte	.LFB65
 1338 000c 0A000000 		.4byte	.LFE65
 1339 0010 00000000 		.4byte	.LFB66
 1340 0014 26000000 		.4byte	.LFE66
 1341 0018 00000000 		.4byte	.LFB67
 1342 001c 1C000000 		.4byte	.LFE67
 1343 0020 00000000 		.4byte	.LFB68
 1344 0024 3C000000 		.4byte	.LFE68
 1345 0028 00000000 		.4byte	.LFB69
 1346 002c 0C000000 		.4byte	.LFE69
 1347 0030 00000000 		.4byte	.LFB70
 1348 0034 20000000 		.4byte	.LFE70
 1349 0038 00000000 		.4byte	.LFB71
 1350 003c 24000000 		.4byte	.LFE71
 1351 0040 00000000 		.4byte	.LFB72
 1352 0044 24000000 		.4byte	.LFE72
 1353 0048 00000000 		.4byte	.LFB73
 1354 004c 12000000 		.4byte	.LFE73
 1355 0050 00000000 		.4byte	.LFB74
 1356 0054 08000000 		.4byte	.LFE74
 1357 0058 00000000 		.4byte	.LFB75
 1358 005c 46000000 		.4byte	.LFE75
 1359 0060 00000000 		.4byte	.LFB76
 1360 0064 28000000 		.4byte	.LFE76
 1361 0068 00000000 		.4byte	.LFB77
 1362 006c 24000000 		.4byte	.LFE77
 1363 0070 00000000 		.4byte	0
 1364 0074 00000000 		.4byte	0
 1365              		.section	.debug_line,"",%progbits
 1366              	.Ldebug_line0:
 1367 0000 98020000 		.section	.debug_str,"MS",%progbits,1
 1367      02006501 
 1367      00000201 
 1367      FB0E0D00 
 1367      01010101 
 1368              	.LASF44:
 1369 0000 75784372 		.ascii	"uxCriticalNesting\000"
 1369      69746963 
 1369      616C4E65 
 1369      7374696E 
 1369      6700
 1370              	.LASF39:
 1371 0012 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1371      43313120 
 1371      352E342E 
 1371      31203230 
 1371      31363036 
 1372 0045 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1372      20726576 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 37


 1372      6973696F 
 1372      6E203233 
 1372      37373135 
 1373 0078 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1373      66756E63 
 1373      74696F6E 
 1373      2D736563 
 1373      74696F6E 
 1374              	.LASF24:
 1375 00a0 7078436F 		.ascii	"pxCode\000"
 1375      646500
 1376              	.LASF29:
 1377 00a7 76506F72 		.ascii	"vPortEndScheduler\000"
 1377      74456E64 
 1377      53636865 
 1377      64756C65 
 1377      7200
 1378              	.LASF22:
 1379 00b9 5469636B 		.ascii	"TickType_t\000"
 1379      54797065 
 1379      5F7400
 1380              	.LASF8:
 1381 00c4 5F5F696E 		.ascii	"__int32_t\000"
 1381      7433325F 
 1381      7400
 1382              	.LASF7:
 1383 00ce 6C6F6E67 		.ascii	"long int\000"
 1383      20696E74 
 1383      00
 1384              	.LASF40:
 1385 00d7 46726565 		.ascii	"FreeRTOS\\port.c\000"
 1385      52544F53 
 1385      5C706F72 
 1385      742E6300 
 1386              	.LASF31:
 1387 00e7 76506F72 		.ascii	"vPortEnterCritical\000"
 1387      74456E74 
 1387      65724372 
 1387      69746963 
 1387      616C00
 1388              	.LASF0:
 1389 00fa 756E7369 		.ascii	"unsigned int\000"
 1389      676E6564 
 1389      20696E74 
 1389      00
 1390              	.LASF36:
 1391 0107 78506F72 		.ascii	"xPortPendSVHandler\000"
 1391      7450656E 
 1391      64535648 
 1391      616E646C 
 1391      657200
 1392              	.LASF34:
 1393 011a 756C506F 		.ascii	"ulPortSetInterruptMask\000"
 1393      72745365 
 1393      74496E74 
 1393      65727275 
 1393      70744D61 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 38


 1394              	.LASF18:
 1395 0131 5461736B 		.ascii	"TaskFunction_t\000"
 1395      46756E63 
 1395      74696F6E 
 1395      5F7400
 1396              	.LASF12:
 1397 0140 696E7433 		.ascii	"int32_t\000"
 1397      325F7400 
 1398              	.LASF14:
 1399 0148 666C6F61 		.ascii	"float\000"
 1399      7400
 1400              	.LASF4:
 1401 014e 756E7369 		.ascii	"unsigned char\000"
 1401      676E6564 
 1401      20636861 
 1401      7200
 1402              	.LASF10:
 1403 015c 6C6F6E67 		.ascii	"long unsigned int\000"
 1403      20756E73 
 1403      69676E65 
 1403      6420696E 
 1403      7400
 1404              	.LASF6:
 1405 016e 73686F72 		.ascii	"short unsigned int\000"
 1405      7420756E 
 1405      7369676E 
 1405      65642069 
 1405      6E7400
 1406              	.LASF45:
 1407 0181 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1407      52784275 
 1407      66666572 
 1407      00
 1408              	.LASF15:
 1409 018e 646F7562 		.ascii	"double\000"
 1409      6C6500
 1410              	.LASF9:
 1411 0195 5F5F7569 		.ascii	"__uint32_t\000"
 1411      6E743332 
 1411      5F7400
 1412              	.LASF25:
 1413 01a0 70765061 		.ascii	"pvParameters\000"
 1413      72616D65 
 1413      74657273 
 1413      00
 1414              	.LASF41:
 1415 01ad 453A5C50 		.ascii	"E:\\PSoC_Creator\\CY8CKIT-059\\CY8CKIT-059_CW_Decod"
 1415      536F435F 
 1415      43726561 
 1415      746F725C 
 1415      43593843 
 1416 01dd 65725F55 		.ascii	"er_USB\\CY8CKIT-059_CW_Decoder_USB.cydsn\000"
 1416      53425C43 
 1416      5938434B 
 1416      49542D30 
 1416      35395F43 
 1417              	.LASF37:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 39


 1418 0205 78506F72 		.ascii	"xPortSysTickHandler\000"
 1418      74537973 
 1418      5469636B 
 1418      48616E64 
 1418      6C657200 
 1419              	.LASF30:
 1420 0219 76506F72 		.ascii	"vPortYield\000"
 1420      74596965 
 1420      6C6400
 1421              	.LASF23:
 1422 0224 7078546F 		.ascii	"pxTopOfStack\000"
 1422      704F6653 
 1422      7461636B 
 1422      00
 1423              	.LASF11:
 1424 0231 6C6F6E67 		.ascii	"long long unsigned int\000"
 1424      206C6F6E 
 1424      6720756E 
 1424      7369676E 
 1424      65642069 
 1425              	.LASF26:
 1426 0248 70727654 		.ascii	"prvTaskExitError\000"
 1426      61736B45 
 1426      78697445 
 1426      72726F72 
 1426      00
 1427              	.LASF38:
 1428 0259 76506F72 		.ascii	"vPortSetupTimerInterrupt\000"
 1428      74536574 
 1428      75705469 
 1428      6D657249 
 1428      6E746572 
 1429              	.LASF17:
 1430 0272 73697A65 		.ascii	"sizetype\000"
 1430      74797065 
 1430      00
 1431              	.LASF1:
 1432 027b 6C6F6E67 		.ascii	"long long int\000"
 1432      206C6F6E 
 1432      6720696E 
 1432      7400
 1433              	.LASF43:
 1434 0289 76506F72 		.ascii	"vPortClearInterruptMask\000"
 1434      74436C65 
 1434      6172496E 
 1434      74657272 
 1434      7570744D 
 1435              	.LASF16:
 1436 02a1 63686172 		.ascii	"char\000"
 1436      00
 1437              	.LASF19:
 1438 02a6 53746163 		.ascii	"StackType_t\000"
 1438      6B547970 
 1438      655F7400 
 1439              	.LASF28:
 1440 02b2 76506F72 		.ascii	"vPortSVCHandler\000"
 1440      74535643 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccX8D89O.s 			page 40


 1440      48616E64 
 1440      6C657200 
 1441              	.LASF5:
 1442 02c2 73686F72 		.ascii	"short int\000"
 1442      7420696E 
 1442      7400
 1443              	.LASF32:
 1444 02cc 76506F72 		.ascii	"vPortExitCritical\000"
 1444      74457869 
 1444      74437269 
 1444      74696361 
 1444      6C00
 1445              	.LASF13:
 1446 02de 75696E74 		.ascii	"uint32_t\000"
 1446      33325F74 
 1446      00
 1447              	.LASF35:
 1448 02e7 756C4E65 		.ascii	"ulNewMaskValue\000"
 1448      774D6173 
 1448      6B56616C 
 1448      756500
 1449              	.LASF20:
 1450 02f6 42617365 		.ascii	"BaseType_t\000"
 1450      54797065 
 1450      5F7400
 1451              	.LASF27:
 1452 0301 70727650 		.ascii	"prvPortStartFirstTask\000"
 1452      6F727453 
 1452      74617274 
 1452      46697273 
 1452      74546173 
 1453              	.LASF2:
 1454 0317 6C6F6E67 		.ascii	"long double\000"
 1454      20646F75 
 1454      626C6500 
 1455              	.LASF3:
 1456 0323 7369676E 		.ascii	"signed char\000"
 1456      65642063 
 1456      68617200 
 1457              	.LASF33:
 1458 032f 78506F72 		.ascii	"xPortStartScheduler\000"
 1458      74537461 
 1458      72745363 
 1458      68656475 
 1458      6C657200 
 1459              	.LASF21:
 1460 0343 55426173 		.ascii	"UBaseType_t\000"
 1460      65547970 
 1460      655F7400 
 1461              	.LASF42:
 1462 034f 7078506F 		.ascii	"pxPortInitialiseStack\000"
 1462      7274496E 
 1462      69746961 
 1462      6C697365 
 1462      53746163 
 1463              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
