ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	pxCurrentTCB
  20              		.bss
  21              		.align	2
  22              		.type	pxCurrentTCB, %object
  23              		.size	pxCurrentTCB, 4
  24              	pxCurrentTCB:
  25 0000 00000000 		.space	4
  26              		.align	2
  27              	pxReadyTasksLists:
  28 0004 00000000 		.space	100
  28      00000000 
  28      00000000 
  28      00000000 
  28      00000000 
  29              		.align	2
  30              	xDelayedTaskList1:
  31 0068 00000000 		.space	20
  31      00000000 
  31      00000000 
  31      00000000 
  31      00000000 
  32              		.align	2
  33              	xDelayedTaskList2:
  34 007c 00000000 		.space	20
  34      00000000 
  34      00000000 
  34      00000000 
  34      00000000 
  35              		.align	2
  36              	pxDelayedTaskList:
  37 0090 00000000 		.space	4
  38              		.align	2
  39              	pxOverflowDelayedTaskList:
  40 0094 00000000 		.space	4
  41              		.align	2
  42              	xPendingReadyList:
  43 0098 00000000 		.space	20
  43      00000000 
  43      00000000 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 2


  43      00000000 
  43      00000000 
  44              		.align	2
  45              	xTasksWaitingTermination:
  46 00ac 00000000 		.space	20
  46      00000000 
  46      00000000 
  46      00000000 
  46      00000000 
  47              		.align	2
  48              	uxTasksDeleted:
  49 00c0 00000000 		.space	4
  50              		.align	2
  51              	xSuspendedTaskList:
  52 00c4 00000000 		.space	20
  52      00000000 
  52      00000000 
  52      00000000 
  52      00000000 
  53              		.align	2
  54              	uxCurrentNumberOfTasks:
  55 00d8 00000000 		.space	4
  56              		.align	2
  57              	xTickCount:
  58 00dc 00000000 		.space	4
  59              		.align	2
  60              	uxTopReadyPriority:
  61 00e0 00000000 		.space	4
  62              		.align	2
  63              	xSchedulerRunning:
  64 00e4 00000000 		.space	4
  65              		.align	2
  66              	uxPendedTicks:
  67 00e8 00000000 		.space	4
  68              		.align	2
  69              	xYieldPending:
  70 00ec 00000000 		.space	4
  71              		.align	2
  72              	xNumOfOverflows:
  73 00f0 00000000 		.space	4
  74              		.align	2
  75              	uxTaskNumber:
  76 00f4 00000000 		.space	4
  77              		.align	2
  78              	xNextTaskUnblockTime:
  79 00f8 00000000 		.space	4
  80              		.align	2
  81              	uxSchedulerSuspended:
  82 00fc 00000000 		.space	4
  83              		.section	.text.xTaskGenericCreate,"ax",%progbits
  84              		.align	2
  85              		.global	xTaskGenericCreate
  86              		.thumb
  87              		.thumb_func
  88              		.type	xTaskGenericCreate, %function
  89              	xTaskGenericCreate:
  90              	.LFB64:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 3


  91              		.file 1 "FreeRTOS\\tasks.c"
   1:FreeRTOS/tasks.c **** /*
   2:FreeRTOS/tasks.c ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:FreeRTOS/tasks.c ****     All rights reserved
   4:FreeRTOS/tasks.c **** 
   5:FreeRTOS/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/tasks.c **** 
   7:FreeRTOS/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:FreeRTOS/tasks.c **** 
   9:FreeRTOS/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:FreeRTOS/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:FreeRTOS/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:FreeRTOS/tasks.c **** 
  13:FreeRTOS/tasks.c ****     ***************************************************************************
  14:FreeRTOS/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:FreeRTOS/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:FreeRTOS/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:FreeRTOS/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:FreeRTOS/tasks.c ****     ***************************************************************************
  19:FreeRTOS/tasks.c **** 
  20:FreeRTOS/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:FreeRTOS/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:FreeRTOS/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:FreeRTOS/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:FreeRTOS/tasks.c **** 
  25:FreeRTOS/tasks.c ****     ***************************************************************************
  26:FreeRTOS/tasks.c ****      *                                                                       *
  27:FreeRTOS/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:FreeRTOS/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:FreeRTOS/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:FreeRTOS/tasks.c ****      *    is the industry's de facto standard.                               *
  31:FreeRTOS/tasks.c ****      *                                                                       *
  32:FreeRTOS/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:FreeRTOS/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:FreeRTOS/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:FreeRTOS/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:FreeRTOS/tasks.c ****      *                                                                       *
  37:FreeRTOS/tasks.c ****     ***************************************************************************
  38:FreeRTOS/tasks.c **** 
  39:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:FreeRTOS/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:FreeRTOS/tasks.c ****     defined configASSERT()?
  42:FreeRTOS/tasks.c **** 
  43:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:FreeRTOS/tasks.c ****     embedded software for free we request you assist our global community by
  45:FreeRTOS/tasks.c ****     participating in the support forum.
  46:FreeRTOS/tasks.c **** 
  47:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:FreeRTOS/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:FreeRTOS/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:FreeRTOS/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:FreeRTOS/tasks.c **** 
  52:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:FreeRTOS/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:FreeRTOS/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:FreeRTOS/tasks.c **** 
  56:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 4


  57:FreeRTOS/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:FreeRTOS/tasks.c **** 
  59:FreeRTOS/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:FreeRTOS/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:FreeRTOS/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:FreeRTOS/tasks.c **** 
  63:FreeRTOS/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:FreeRTOS/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:FreeRTOS/tasks.c ****     mission critical applications that require provable dependability.
  66:FreeRTOS/tasks.c **** 
  67:FreeRTOS/tasks.c ****     1 tab == 4 spaces!
  68:FreeRTOS/tasks.c **** */
  69:FreeRTOS/tasks.c **** 
  70:FreeRTOS/tasks.c **** /* Standard includes. */
  71:FreeRTOS/tasks.c **** #include <stdlib.h>
  72:FreeRTOS/tasks.c **** #include <string.h>
  73:FreeRTOS/tasks.c **** 
  74:FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:FreeRTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:FreeRTOS/tasks.c **** task.h is included from an application file. */
  77:FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:FreeRTOS/tasks.c **** 
  79:FreeRTOS/tasks.c **** /* FreeRTOS includes. */
  80:FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  81:FreeRTOS/tasks.c **** #include "task.h"
  82:FreeRTOS/tasks.c **** #include "timers.h"
  83:FreeRTOS/tasks.c **** #include "StackMacros.h"
  84:FreeRTOS/tasks.c **** 
  85:FreeRTOS/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:FreeRTOS/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:FreeRTOS/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:FreeRTOS/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:FreeRTOS/tasks.c **** 
  91:FreeRTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:FreeRTOS/tasks.c **** functions but without including stdio.h here. */
  93:FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:FreeRTOS/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:FreeRTOS/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:FreeRTOS/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:FreeRTOS/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:FreeRTOS/tasks.c **** 	#include <stdio.h>
  99:FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:FreeRTOS/tasks.c **** 
 101:FreeRTOS/tasks.c **** /* Sanity check the configuration. */
 102:FreeRTOS/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
 103:FreeRTOS/tasks.c **** 	#if( INCLUDE_vTaskSuspend != 1 )
 104:FreeRTOS/tasks.c **** 		#error INCLUDE_vTaskSuspend must be set to 1 if configUSE_TICKLESS_IDLE is not set to 0
 105:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
 106:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
 107:FreeRTOS/tasks.c **** 
 108:FreeRTOS/tasks.c **** /*
 109:FreeRTOS/tasks.c ****  * Defines the size, in words, of the stack allocated to the idle task.
 110:FreeRTOS/tasks.c ****  */
 111:FreeRTOS/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
 112:FreeRTOS/tasks.c **** 
 113:FreeRTOS/tasks.c **** #if( configUSE_PREEMPTION == 0 )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 5


 114:FreeRTOS/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 115:FreeRTOS/tasks.c **** 	performed just because a higher priority task has been woken. */
 116:FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 117:FreeRTOS/tasks.c **** #else
 118:FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 119:FreeRTOS/tasks.c **** #endif
 120:FreeRTOS/tasks.c **** 
 121:FreeRTOS/tasks.c **** /* Value that can be assigned to the eNotifyState member of the TCB. */
 122:FreeRTOS/tasks.c **** typedef enum
 123:FreeRTOS/tasks.c **** {
 124:FreeRTOS/tasks.c **** 	eNotWaitingNotification = 0,
 125:FreeRTOS/tasks.c **** 	eWaitingNotification,
 126:FreeRTOS/tasks.c **** 	eNotified
 127:FreeRTOS/tasks.c **** } eNotifyValue;
 128:FreeRTOS/tasks.c **** 
 129:FreeRTOS/tasks.c **** /*
 130:FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 131:FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 132:FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 133:FreeRTOS/tasks.c ****  */
 134:FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock
 135:FreeRTOS/tasks.c **** {
 136:FreeRTOS/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 137:FreeRTOS/tasks.c **** 
 138:FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 139:FreeRTOS/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 140:FreeRTOS/tasks.c **** 		BaseType_t		xUsingStaticallyAllocatedStack; /* Set to pdTRUE if the stack is a statically allocat
 141:FreeRTOS/tasks.c **** 	#endif
 142:FreeRTOS/tasks.c **** 
 143:FreeRTOS/tasks.c **** 	ListItem_t			xGenericListItem;	/*< The list that the state list item of a task is reference from d
 144:FreeRTOS/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 145:FreeRTOS/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 146:FreeRTOS/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 147:FreeRTOS/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 148:FreeRTOS/tasks.c **** 
 149:FreeRTOS/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 150:FreeRTOS/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 151:FreeRTOS/tasks.c **** 	#endif
 152:FreeRTOS/tasks.c **** 
 153:FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 154:FreeRTOS/tasks.c **** 		UBaseType_t 	uxCriticalNesting; 	/*< Holds the critical section nesting depth for ports that do n
 155:FreeRTOS/tasks.c **** 	#endif
 156:FreeRTOS/tasks.c **** 
 157:FreeRTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 158:FreeRTOS/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 159:FreeRTOS/tasks.c **** 		UBaseType_t  	uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. 
 160:FreeRTOS/tasks.c **** 	#endif
 161:FreeRTOS/tasks.c **** 
 162:FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 163:FreeRTOS/tasks.c **** 		UBaseType_t 	uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 164:FreeRTOS/tasks.c **** 		UBaseType_t 	uxMutexesHeld;
 165:FreeRTOS/tasks.c **** 	#endif
 166:FreeRTOS/tasks.c **** 
 167:FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 168:FreeRTOS/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 169:FreeRTOS/tasks.c **** 	#endif
 170:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 6


 171:FreeRTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 172:FreeRTOS/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 173:FreeRTOS/tasks.c **** 	#endif
 174:FreeRTOS/tasks.c **** 
 175:FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 176:FreeRTOS/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 177:FreeRTOS/tasks.c **** 	#endif
 178:FreeRTOS/tasks.c **** 
 179:FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 180:FreeRTOS/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 181:FreeRTOS/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 182:FreeRTOS/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 183:FreeRTOS/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 184:FreeRTOS/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 185:FreeRTOS/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 186:FreeRTOS/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 187:FreeRTOS/tasks.c **** 		struct 	_reent xNewLib_reent;
 188:FreeRTOS/tasks.c **** 	#endif
 189:FreeRTOS/tasks.c **** 
 190:FreeRTOS/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 191:FreeRTOS/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 192:FreeRTOS/tasks.c **** 		volatile eNotifyValue eNotifyState;
 193:FreeRTOS/tasks.c **** 	#endif
 194:FreeRTOS/tasks.c **** 
 195:FreeRTOS/tasks.c **** } tskTCB;
 196:FreeRTOS/tasks.c **** 
 197:FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 198:FreeRTOS/tasks.c **** below to enable the use of older kernel aware debuggers. */
 199:FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 200:FreeRTOS/tasks.c **** 
 201:FreeRTOS/tasks.c **** /*
 202:FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 203:FreeRTOS/tasks.c ****  * be global, rather than file scope.
 204:FreeRTOS/tasks.c ****  */
 205:FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 206:FreeRTOS/tasks.c **** 	#define static
 207:FreeRTOS/tasks.c **** #endif
 208:FreeRTOS/tasks.c **** 
 209:FreeRTOS/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 210:FreeRTOS/tasks.c **** static variables must be declared volatile. */
 211:FreeRTOS/tasks.c **** 
 212:FreeRTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 213:FreeRTOS/tasks.c **** 
 214:FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 215:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 216:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 217:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 218:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 219:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 220:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 221:FreeRTOS/tasks.c **** 
 222:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 223:FreeRTOS/tasks.c **** 
 224:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 225:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxTasksDeleted = ( UBaseType_t ) 0U;
 226:FreeRTOS/tasks.c **** 
 227:FreeRTOS/tasks.c **** #endif
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 7


 228:FreeRTOS/tasks.c **** 
 229:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 230:FreeRTOS/tasks.c **** 
 231:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 232:FreeRTOS/tasks.c **** 
 233:FreeRTOS/tasks.c **** #endif
 234:FreeRTOS/tasks.c **** 
 235:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 236:FreeRTOS/tasks.c **** 
 237:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;			/*< Holds the handle of the idle tas
 238:FreeRTOS/tasks.c **** 
 239:FreeRTOS/tasks.c **** #endif
 240:FreeRTOS/tasks.c **** 
 241:FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 242:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 243:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 244:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 245:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 246:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 247:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 248:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 249:FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 250:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 251:FreeRTOS/tasks.c **** 
 252:FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 253:FreeRTOS/tasks.c **** interrupts must not manipulate the xGenericListItem of a TCB, or any of the
 254:FreeRTOS/tasks.c **** lists the xGenericListItem can be referenced from, if the scheduler is suspended.
 255:FreeRTOS/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 256:FreeRTOS/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 257:FreeRTOS/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 258:FreeRTOS/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 259:FreeRTOS/tasks.c **** accessed from a critical section. */
 260:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 261:FreeRTOS/tasks.c **** 
 262:FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 263:FreeRTOS/tasks.c **** 
 264:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 265:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 266:FreeRTOS/tasks.c **** 
 267:FreeRTOS/tasks.c **** #endif
 268:FreeRTOS/tasks.c **** 
 269:FreeRTOS/tasks.c **** /*lint +e956 */
 270:FreeRTOS/tasks.c **** 
 271:FreeRTOS/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 272:FreeRTOS/tasks.c **** 
 273:FreeRTOS/tasks.c **** /*
 274:FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 275:FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
 276:FreeRTOS/tasks.c ****  */
 277:FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 278:FreeRTOS/tasks.c **** 
 279:FreeRTOS/tasks.c **** /*
 280:FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 281:FreeRTOS/tasks.c ****  */
 282:FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 283:FreeRTOS/tasks.c **** #define tskREADY_CHAR		( 'R' )
 284:FreeRTOS/tasks.c **** #define tskDELETED_CHAR		( 'D' )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 8


 285:FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 286:FreeRTOS/tasks.c **** 
 287:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 288:FreeRTOS/tasks.c **** 
 289:FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 290:FreeRTOS/tasks.c **** 
 291:FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 292:FreeRTOS/tasks.c **** 	performed in a generic way that is not optimised to any particular
 293:FreeRTOS/tasks.c **** 	microcontroller architecture. */
 294:FreeRTOS/tasks.c **** 
 295:FreeRTOS/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 296:FreeRTOS/tasks.c **** 	state task. */
 297:FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 298:FreeRTOS/tasks.c **** 	{																									\
 299:FreeRTOS/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 300:FreeRTOS/tasks.c **** 		{																								\
 301:FreeRTOS/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 302:FreeRTOS/tasks.c **** 		}																								\
 303:FreeRTOS/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 304:FreeRTOS/tasks.c **** 
 305:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 306:FreeRTOS/tasks.c **** 
 307:FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 308:FreeRTOS/tasks.c **** 	{																									\
 309:FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 310:FreeRTOS/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )						\
 311:FreeRTOS/tasks.c **** 		{																								\
 312:FreeRTOS/tasks.c **** 			configASSERT( uxTopReadyPriority );															\
 313:FreeRTOS/tasks.c **** 			--uxTopReadyPriority;																		\
 314:FreeRTOS/tasks.c **** 		}																								\
 315:FreeRTOS/tasks.c **** 																										\
 316:FreeRTOS/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 317:FreeRTOS/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 318:FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );		\
 319:FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 320:FreeRTOS/tasks.c **** 
 321:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 322:FreeRTOS/tasks.c **** 
 323:FreeRTOS/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 324:FreeRTOS/tasks.c **** 	they are only required when a port optimised method of task selection is
 325:FreeRTOS/tasks.c **** 	being used. */
 326:FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 327:FreeRTOS/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 328:FreeRTOS/tasks.c **** 
 329:FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 330:FreeRTOS/tasks.c **** 
 331:FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 332:FreeRTOS/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 333:FreeRTOS/tasks.c **** 	architecture being used. */
 334:FreeRTOS/tasks.c **** 
 335:FreeRTOS/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 336:FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 337:FreeRTOS/tasks.c **** 
 338:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 339:FreeRTOS/tasks.c **** 
 340:FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 341:FreeRTOS/tasks.c **** 	{																								\
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 9


 342:FreeRTOS/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 343:FreeRTOS/tasks.c **** 																									\
 344:FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */							\
 345:FreeRTOS/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 346:FreeRTOS/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 347:FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 348:FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 349:FreeRTOS/tasks.c **** 
 350:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 351:FreeRTOS/tasks.c **** 
 352:FreeRTOS/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 353:FreeRTOS/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 354:FreeRTOS/tasks.c **** 	or suspended list then it won't be in a ready list. */
 355:FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 356:FreeRTOS/tasks.c **** 	{																									\
 357:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 358:FreeRTOS/tasks.c **** 		{																								\
 359:FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 360:FreeRTOS/tasks.c **** 		}																								\
 361:FreeRTOS/tasks.c **** 	}
 362:FreeRTOS/tasks.c **** 
 363:FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 364:FreeRTOS/tasks.c **** 
 365:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 366:FreeRTOS/tasks.c **** 
 367:FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 368:FreeRTOS/tasks.c **** count overflows. */
 369:FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 370:FreeRTOS/tasks.c **** {																									\
 371:FreeRTOS/tasks.c **** 	List_t *pxTemp;																					\
 372:FreeRTOS/tasks.c **** 																									\
 373:FreeRTOS/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 374:FreeRTOS/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 375:FreeRTOS/tasks.c **** 																									\
 376:FreeRTOS/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 377:FreeRTOS/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 378:FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 379:FreeRTOS/tasks.c **** 	xNumOfOverflows++;																				\
 380:FreeRTOS/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 381:FreeRTOS/tasks.c **** }
 382:FreeRTOS/tasks.c **** 
 383:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 384:FreeRTOS/tasks.c **** 
 385:FreeRTOS/tasks.c **** /*
 386:FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 387:FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 388:FreeRTOS/tasks.c ****  */
 389:FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 390:FreeRTOS/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 391:FreeRTOS/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 392:FreeRTOS/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) 
 393:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 394:FreeRTOS/tasks.c **** 
 395:FreeRTOS/tasks.c **** /*
 396:FreeRTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 397:FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 398:FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 10


 399:FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 400:FreeRTOS/tasks.c ****  */
 401:FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 402:FreeRTOS/tasks.c **** 
 403:FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 404:FreeRTOS/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 405:FreeRTOS/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 406:FreeRTOS/tasks.c **** is important its value is not updated due to a task priority change while it is
 407:FreeRTOS/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 408:FreeRTOS/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 409:FreeRTOS/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 410:FreeRTOS/tasks.c **** to its original value when it is released. */
 411:FreeRTOS/tasks.c **** #if configUSE_16_BIT_TICKS == 1
 412:FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 413:FreeRTOS/tasks.c **** #else
 414:FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 415:FreeRTOS/tasks.c **** #endif
 416:FreeRTOS/tasks.c **** 
 417:FreeRTOS/tasks.c **** /* Callback function prototypes. --------------------------*/
 418:FreeRTOS/tasks.c **** #if configCHECK_FOR_STACK_OVERFLOW > 0
 419:FreeRTOS/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 420:FreeRTOS/tasks.c **** #endif
 421:FreeRTOS/tasks.c **** 
 422:FreeRTOS/tasks.c **** #if configUSE_TICK_HOOK > 0
 423:FreeRTOS/tasks.c **** 	extern void vApplicationTickHook( void );
 424:FreeRTOS/tasks.c **** #endif
 425:FreeRTOS/tasks.c **** 
 426:FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 427:FreeRTOS/tasks.c **** 
 428:FreeRTOS/tasks.c **** /*
 429:FreeRTOS/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 430:FreeRTOS/tasks.c ****  * into the TCB structure.
 431:FreeRTOS/tasks.c ****  */
 432:FreeRTOS/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t 
 433:FreeRTOS/tasks.c **** 
 434:FreeRTOS/tasks.c **** /**
 435:FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 436:FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 437:FreeRTOS/tasks.c ****  * is in any other state.
 438:FreeRTOS/tasks.c ****  */
 439:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 440:FreeRTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 441:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 442:FreeRTOS/tasks.c **** 
 443:FreeRTOS/tasks.c **** /*
 444:FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 445:FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 446:FreeRTOS/tasks.c ****  */
 447:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 448:FreeRTOS/tasks.c **** 
 449:FreeRTOS/tasks.c **** /*
 450:FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 451:FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 452:FreeRTOS/tasks.c ****  * creation of the first user task.
 453:FreeRTOS/tasks.c ****  *
 454:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 455:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 11


 456:FreeRTOS/tasks.c ****  *
 457:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 458:FreeRTOS/tasks.c ****  *
 459:FreeRTOS/tasks.c ****  */
 460:FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 461:FreeRTOS/tasks.c **** 
 462:FreeRTOS/tasks.c **** /*
 463:FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 464:FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 465:FreeRTOS/tasks.c ****  *
 466:FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 467:FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 468:FreeRTOS/tasks.c ****  */
 469:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 470:FreeRTOS/tasks.c **** 
 471:FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 472:FreeRTOS/tasks.c **** 
 473:FreeRTOS/tasks.c **** #endif
 474:FreeRTOS/tasks.c **** 
 475:FreeRTOS/tasks.c **** /*
 476:FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 477:FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 478:FreeRTOS/tasks.c ****  * and its TCB deleted.
 479:FreeRTOS/tasks.c ****  */
 480:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 481:FreeRTOS/tasks.c **** 
 482:FreeRTOS/tasks.c **** /*
 483:FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 484:FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 485:FreeRTOS/tasks.c ****  */
 486:FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake ) PRIVILEGED_FUNCTION;
 487:FreeRTOS/tasks.c **** 
 488:FreeRTOS/tasks.c **** /*
 489:FreeRTOS/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 490:FreeRTOS/tasks.c ****  * allocation was successful.
 491:FreeRTOS/tasks.c ****  */
 492:FreeRTOS/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuff
 493:FreeRTOS/tasks.c **** 
 494:FreeRTOS/tasks.c **** /*
 495:FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 496:FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 497:FreeRTOS/tasks.c ****  * a suspended list, etc.).
 498:FreeRTOS/tasks.c ****  *
 499:FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 500:FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 501:FreeRTOS/tasks.c ****  */
 502:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 503:FreeRTOS/tasks.c **** 
 504:FreeRTOS/tasks.c **** 	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, e
 505:FreeRTOS/tasks.c **** 
 506:FreeRTOS/tasks.c **** #endif
 507:FreeRTOS/tasks.c **** 
 508:FreeRTOS/tasks.c **** /*
 509:FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 510:FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 511:FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 512:FreeRTOS/tasks.c ****  */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 12


 513:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 514:FreeRTOS/tasks.c **** 
 515:FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 516:FreeRTOS/tasks.c **** 
 517:FreeRTOS/tasks.c **** #endif
 518:FreeRTOS/tasks.c **** 
 519:FreeRTOS/tasks.c **** /*
 520:FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 521:FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 522:FreeRTOS/tasks.c ****  *
 523:FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 524:FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 525:FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 526:FreeRTOS/tasks.c ****  * set to a value other than 1.
 527:FreeRTOS/tasks.c ****  */
 528:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 529:FreeRTOS/tasks.c **** 
 530:FreeRTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 531:FreeRTOS/tasks.c **** 
 532:FreeRTOS/tasks.c **** #endif
 533:FreeRTOS/tasks.c **** 
 534:FreeRTOS/tasks.c **** /*
 535:FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 536:FreeRTOS/tasks.c ****  * will exit the Blocked state.
 537:FreeRTOS/tasks.c ****  */
 538:FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 539:FreeRTOS/tasks.c **** 
 540:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 541:FreeRTOS/tasks.c **** 
 542:FreeRTOS/tasks.c **** 	/*
 543:FreeRTOS/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 544:FreeRTOS/tasks.c **** 	 * human readable tables of task information.
 545:FreeRTOS/tasks.c **** 	 */
 546:FreeRTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );
 547:FreeRTOS/tasks.c **** 
 548:FreeRTOS/tasks.c **** #endif
 549:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 550:FreeRTOS/tasks.c **** 
 551:FreeRTOS/tasks.c **** BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t
 552:FreeRTOS/tasks.c **** {
  92              		.loc 1 552 0
  93              		.cfi_startproc
  94              		@ args = 16, pretend = 0, frame = 32
  95              		@ frame_needed = 1, uses_anonymous_args = 0
  96 0000 80B5     		push	{r7, lr}
  97              		.cfi_def_cfa_offset 8
  98              		.cfi_offset 7, -8
  99              		.cfi_offset 14, -4
 100 0002 8AB0     		sub	sp, sp, #40
 101              		.cfi_def_cfa_offset 48
 102 0004 02AF     		add	r7, sp, #8
 103              		.cfi_def_cfa 7, 40
 104 0006 F860     		str	r0, [r7, #12]
 105 0008 B960     		str	r1, [r7, #8]
 106 000a 3B60     		str	r3, [r7]
 107 000c 1346     		mov	r3, r2	@ movhi
 108 000e FB80     		strh	r3, [r7, #6]	@ movhi
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 13


 553:FreeRTOS/tasks.c **** BaseType_t xReturn;
 554:FreeRTOS/tasks.c **** TCB_t * pxNewTCB;
 555:FreeRTOS/tasks.c **** StackType_t *pxTopOfStack;
 556:FreeRTOS/tasks.c **** 
 557:FreeRTOS/tasks.c **** 	configASSERT( pxTaskCode );
 558:FreeRTOS/tasks.c **** 	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMA
 559:FreeRTOS/tasks.c **** 
 560:FreeRTOS/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 561:FreeRTOS/tasks.c **** 	checking that the allocation was successful. */
 562:FreeRTOS/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 109              		.loc 1 562 0
 110 0010 FB88     		ldrh	r3, [r7, #6]
 111 0012 396B     		ldr	r1, [r7, #48]
 112 0014 1846     		mov	r0, r3
 113 0016 FFF7FEFF 		bl	prvAllocateTCBAndStack
 114 001a B861     		str	r0, [r7, #24]
 563:FreeRTOS/tasks.c **** 
 564:FreeRTOS/tasks.c **** 	if( pxNewTCB != NULL )
 115              		.loc 1 564 0
 116 001c BB69     		ldr	r3, [r7, #24]
 117 001e 002B     		cmp	r3, #0
 118 0020 65D0     		beq	.L2
 565:FreeRTOS/tasks.c **** 	{
 566:FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 567:FreeRTOS/tasks.c **** 			/* Should the task be created in privileged mode? */
 568:FreeRTOS/tasks.c **** 			BaseType_t xRunPrivileged;
 569:FreeRTOS/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 570:FreeRTOS/tasks.c **** 			{
 571:FreeRTOS/tasks.c **** 				xRunPrivileged = pdTRUE;
 572:FreeRTOS/tasks.c **** 			}
 573:FreeRTOS/tasks.c **** 			else
 574:FreeRTOS/tasks.c **** 			{
 575:FreeRTOS/tasks.c **** 				xRunPrivileged = pdFALSE;
 576:FreeRTOS/tasks.c **** 			}
 577:FreeRTOS/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 578:FreeRTOS/tasks.c **** 
 579:FreeRTOS/tasks.c **** 			if( puxStackBuffer != NULL )
 580:FreeRTOS/tasks.c **** 			{
 581:FreeRTOS/tasks.c **** 				/* The application provided its own stack.  Note this so no
 582:FreeRTOS/tasks.c **** 				attempt is made to delete the stack should that task be
 583:FreeRTOS/tasks.c **** 				deleted. */
 584:FreeRTOS/tasks.c **** 				pxNewTCB->xUsingStaticallyAllocatedStack = pdTRUE;
 585:FreeRTOS/tasks.c **** 			}
 586:FreeRTOS/tasks.c **** 			else
 587:FreeRTOS/tasks.c **** 			{
 588:FreeRTOS/tasks.c **** 				/* The stack was allocated dynamically.  Note this so it can be
 589:FreeRTOS/tasks.c **** 				deleted again if the task is deleted. */
 590:FreeRTOS/tasks.c **** 				pxNewTCB->xUsingStaticallyAllocatedStack = pdFALSE;
 591:FreeRTOS/tasks.c **** 			}
 592:FreeRTOS/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 593:FreeRTOS/tasks.c **** 
 594:FreeRTOS/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 595:FreeRTOS/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or vice versa.
 596:FreeRTOS/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 597:FreeRTOS/tasks.c **** 		required by the port. */
 598:FreeRTOS/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 599:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 14


 600:FreeRTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 119              		.loc 1 600 0
 120 0022 BB69     		ldr	r3, [r7, #24]
 121 0024 1A6B     		ldr	r2, [r3, #48]
 122 0026 FB88     		ldrh	r3, [r7, #6]
 123 0028 03F18043 		add	r3, r3, #1073741824
 124 002c 013B     		subs	r3, r3, #1
 125 002e 9B00     		lsls	r3, r3, #2
 126 0030 1344     		add	r3, r3, r2
 127 0032 7B61     		str	r3, [r7, #20]
 601:FreeRTOS/tasks.c **** 			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINT
 128              		.loc 1 601 0
 129 0034 7B69     		ldr	r3, [r7, #20]
 130 0036 23F00703 		bic	r3, r3, #7
 131 003a 7B61     		str	r3, [r7, #20]
 602:FreeRTOS/tasks.c **** 
 603:FreeRTOS/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 604:FreeRTOS/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_AL
 605:FreeRTOS/tasks.c **** 		}
 606:FreeRTOS/tasks.c **** 		#else /* portSTACK_GROWTH */
 607:FreeRTOS/tasks.c **** 		{
 608:FreeRTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 609:FreeRTOS/tasks.c **** 
 610:FreeRTOS/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 611:FreeRTOS/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBY
 612:FreeRTOS/tasks.c **** 
 613:FreeRTOS/tasks.c **** 			/* If we want to use stack checking on architectures that use
 614:FreeRTOS/tasks.c **** 			a positive stack growth direction then we also need to store the
 615:FreeRTOS/tasks.c **** 			other extreme of the stack space. */
 616:FreeRTOS/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 617:FreeRTOS/tasks.c **** 		}
 618:FreeRTOS/tasks.c **** 		#endif /* portSTACK_GROWTH */
 619:FreeRTOS/tasks.c **** 
 620:FreeRTOS/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 621:FreeRTOS/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 132              		.loc 1 621 0
 133 003c FB88     		ldrh	r3, [r7, #6]
 134 003e 0093     		str	r3, [sp]
 135 0040 7B6B     		ldr	r3, [r7, #52]
 136 0042 BA6A     		ldr	r2, [r7, #40]
 137 0044 B968     		ldr	r1, [r7, #8]
 138 0046 B869     		ldr	r0, [r7, #24]
 139 0048 FFF7FEFF 		bl	prvInitialiseTCBVariables
 622:FreeRTOS/tasks.c **** 
 623:FreeRTOS/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 624:FreeRTOS/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 625:FreeRTOS/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 626:FreeRTOS/tasks.c **** 		the	top of stack variable is updated. */
 627:FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 628:FreeRTOS/tasks.c **** 		{
 629:FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 630:FreeRTOS/tasks.c **** 		}
 631:FreeRTOS/tasks.c **** 		#else /* portUSING_MPU_WRAPPERS */
 632:FreeRTOS/tasks.c **** 		{
 633:FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 140              		.loc 1 633 0
 141 004c 3A68     		ldr	r2, [r7]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 15


 142 004e F968     		ldr	r1, [r7, #12]
 143 0050 7869     		ldr	r0, [r7, #20]
 144 0052 FFF7FEFF 		bl	pxPortInitialiseStack
 145 0056 0246     		mov	r2, r0
 146 0058 BB69     		ldr	r3, [r7, #24]
 147 005a 1A60     		str	r2, [r3]
 634:FreeRTOS/tasks.c **** 		}
 635:FreeRTOS/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS */
 636:FreeRTOS/tasks.c **** 
 637:FreeRTOS/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 148              		.loc 1 637 0
 149 005c FB6A     		ldr	r3, [r7, #44]
 150 005e 002B     		cmp	r3, #0
 151 0060 02D0     		beq	.L3
 638:FreeRTOS/tasks.c **** 		{
 639:FreeRTOS/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 640:FreeRTOS/tasks.c **** 			task can use this as a handle to delete the task later if
 641:FreeRTOS/tasks.c **** 			required.*/
 642:FreeRTOS/tasks.c **** 			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 152              		.loc 1 642 0
 153 0062 FB6A     		ldr	r3, [r7, #44]
 154 0064 BA69     		ldr	r2, [r7, #24]
 155 0066 1A60     		str	r2, [r3]
 156              	.L3:
 643:FreeRTOS/tasks.c **** 		}
 644:FreeRTOS/tasks.c **** 		else
 645:FreeRTOS/tasks.c **** 		{
 646:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 647:FreeRTOS/tasks.c **** 		}
 648:FreeRTOS/tasks.c **** 
 649:FreeRTOS/tasks.c **** 		/* Ensure interrupts don't access the task lists while they are being
 650:FreeRTOS/tasks.c **** 		updated. */
 651:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 157              		.loc 1 651 0
 158 0068 FFF7FEFF 		bl	vPortEnterCritical
 652:FreeRTOS/tasks.c **** 		{
 653:FreeRTOS/tasks.c **** 			uxCurrentNumberOfTasks++;
 159              		.loc 1 653 0
 160 006c 2B4B     		ldr	r3, .L9
 161 006e 1B68     		ldr	r3, [r3]
 162 0070 0133     		adds	r3, r3, #1
 163 0072 2A4A     		ldr	r2, .L9
 164 0074 1360     		str	r3, [r2]
 654:FreeRTOS/tasks.c **** 			if( pxCurrentTCB == NULL )
 165              		.loc 1 654 0
 166 0076 2A4B     		ldr	r3, .L9+4
 167 0078 1B68     		ldr	r3, [r3]
 168 007a 002B     		cmp	r3, #0
 169 007c 09D1     		bne	.L4
 655:FreeRTOS/tasks.c **** 			{
 656:FreeRTOS/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 657:FreeRTOS/tasks.c **** 				the suspended state - make this the current task. */
 658:FreeRTOS/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 170              		.loc 1 658 0
 171 007e 284A     		ldr	r2, .L9+4
 172 0080 BB69     		ldr	r3, [r7, #24]
 173 0082 1360     		str	r3, [r2]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 16


 659:FreeRTOS/tasks.c **** 
 660:FreeRTOS/tasks.c **** 				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 174              		.loc 1 660 0
 175 0084 254B     		ldr	r3, .L9
 176 0086 1B68     		ldr	r3, [r3]
 177 0088 012B     		cmp	r3, #1
 178 008a 0FD1     		bne	.L5
 661:FreeRTOS/tasks.c **** 				{
 662:FreeRTOS/tasks.c **** 					/* This is the first task to be created so do the preliminary
 663:FreeRTOS/tasks.c **** 					initialisation required.  We will not recover if this call
 664:FreeRTOS/tasks.c **** 					fails, but we will report the failure. */
 665:FreeRTOS/tasks.c **** 					prvInitialiseTaskLists();
 179              		.loc 1 665 0
 180 008c FFF7FEFF 		bl	prvInitialiseTaskLists
 181 0090 0CE0     		b	.L5
 182              	.L4:
 666:FreeRTOS/tasks.c **** 				}
 667:FreeRTOS/tasks.c **** 				else
 668:FreeRTOS/tasks.c **** 				{
 669:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 670:FreeRTOS/tasks.c **** 				}
 671:FreeRTOS/tasks.c **** 			}
 672:FreeRTOS/tasks.c **** 			else
 673:FreeRTOS/tasks.c **** 			{
 674:FreeRTOS/tasks.c **** 				/* If the scheduler is not already running, make this task the
 675:FreeRTOS/tasks.c **** 				current task if it is the highest priority task to be created
 676:FreeRTOS/tasks.c **** 				so far. */
 677:FreeRTOS/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 183              		.loc 1 677 0
 184 0092 244B     		ldr	r3, .L9+8
 185 0094 1B68     		ldr	r3, [r3]
 186 0096 002B     		cmp	r3, #0
 187 0098 08D1     		bne	.L5
 678:FreeRTOS/tasks.c **** 				{
 679:FreeRTOS/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 188              		.loc 1 679 0
 189 009a 214B     		ldr	r3, .L9+4
 190 009c 1B68     		ldr	r3, [r3]
 191 009e DA6A     		ldr	r2, [r3, #44]
 192 00a0 BB6A     		ldr	r3, [r7, #40]
 193 00a2 9A42     		cmp	r2, r3
 194 00a4 02D8     		bhi	.L5
 680:FreeRTOS/tasks.c **** 					{
 681:FreeRTOS/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 195              		.loc 1 681 0
 196 00a6 1E4A     		ldr	r2, .L9+4
 197 00a8 BB69     		ldr	r3, [r7, #24]
 198 00aa 1360     		str	r3, [r2]
 199              	.L5:
 682:FreeRTOS/tasks.c **** 					}
 683:FreeRTOS/tasks.c **** 					else
 684:FreeRTOS/tasks.c **** 					{
 685:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
 686:FreeRTOS/tasks.c **** 					}
 687:FreeRTOS/tasks.c **** 				}
 688:FreeRTOS/tasks.c **** 				else
 689:FreeRTOS/tasks.c **** 				{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 17


 690:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 691:FreeRTOS/tasks.c **** 				}
 692:FreeRTOS/tasks.c **** 			}
 693:FreeRTOS/tasks.c **** 
 694:FreeRTOS/tasks.c **** 			uxTaskNumber++;
 200              		.loc 1 694 0
 201 00ac 1E4B     		ldr	r3, .L9+12
 202 00ae 1B68     		ldr	r3, [r3]
 203 00b0 0133     		adds	r3, r3, #1
 204 00b2 1D4A     		ldr	r2, .L9+12
 205 00b4 1360     		str	r3, [r2]
 695:FreeRTOS/tasks.c **** 
 696:FreeRTOS/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 697:FreeRTOS/tasks.c **** 			{
 698:FreeRTOS/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 699:FreeRTOS/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 700:FreeRTOS/tasks.c **** 			}
 701:FreeRTOS/tasks.c **** 			#endif /* configUSE_TRACE_FACILITY */
 702:FreeRTOS/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 703:FreeRTOS/tasks.c **** 
 704:FreeRTOS/tasks.c **** 			prvAddTaskToReadyList( pxNewTCB );
 206              		.loc 1 704 0
 207 00b6 BB69     		ldr	r3, [r7, #24]
 208 00b8 DB6A     		ldr	r3, [r3, #44]
 209 00ba 0122     		movs	r2, #1
 210 00bc 9A40     		lsls	r2, r2, r3
 211 00be 1B4B     		ldr	r3, .L9+16
 212 00c0 1B68     		ldr	r3, [r3]
 213 00c2 1343     		orrs	r3, r3, r2
 214 00c4 194A     		ldr	r2, .L9+16
 215 00c6 1360     		str	r3, [r2]
 216 00c8 BB69     		ldr	r3, [r7, #24]
 217 00ca DA6A     		ldr	r2, [r3, #44]
 218 00cc 1346     		mov	r3, r2
 219 00ce 9B00     		lsls	r3, r3, #2
 220 00d0 1344     		add	r3, r3, r2
 221 00d2 9B00     		lsls	r3, r3, #2
 222 00d4 164A     		ldr	r2, .L9+20
 223 00d6 1A44     		add	r2, r2, r3
 224 00d8 BB69     		ldr	r3, [r7, #24]
 225 00da 0433     		adds	r3, r3, #4
 226 00dc 1946     		mov	r1, r3
 227 00de 1046     		mov	r0, r2
 228 00e0 FFF7FEFF 		bl	vListInsertEnd
 705:FreeRTOS/tasks.c **** 
 706:FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 229              		.loc 1 706 0
 230 00e4 0123     		movs	r3, #1
 231 00e6 FB61     		str	r3, [r7, #28]
 707:FreeRTOS/tasks.c **** 			portSETUP_TCB( pxNewTCB );
 708:FreeRTOS/tasks.c **** 		}
 709:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 232              		.loc 1 709 0
 233 00e8 FFF7FEFF 		bl	vPortExitCritical
 234 00ec 02E0     		b	.L6
 235              	.L2:
 710:FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 18


 711:FreeRTOS/tasks.c **** 	else
 712:FreeRTOS/tasks.c **** 	{
 713:FreeRTOS/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 236              		.loc 1 713 0
 237 00ee 4FF0FF33 		mov	r3, #-1
 238 00f2 FB61     		str	r3, [r7, #28]
 239              	.L6:
 714:FreeRTOS/tasks.c **** 		traceTASK_CREATE_FAILED();
 715:FreeRTOS/tasks.c **** 	}
 716:FreeRTOS/tasks.c **** 
 717:FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
 240              		.loc 1 717 0
 241 00f4 FB69     		ldr	r3, [r7, #28]
 242 00f6 012B     		cmp	r3, #1
 243 00f8 0BD1     		bne	.L7
 718:FreeRTOS/tasks.c **** 	{
 719:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 244              		.loc 1 719 0
 245 00fa 0A4B     		ldr	r3, .L9+8
 246 00fc 1B68     		ldr	r3, [r3]
 247 00fe 002B     		cmp	r3, #0
 248 0100 07D0     		beq	.L7
 720:FreeRTOS/tasks.c **** 		{
 721:FreeRTOS/tasks.c **** 			/* If the created task is of a higher priority than the current task
 722:FreeRTOS/tasks.c **** 			then it should run now. */
 723:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 249              		.loc 1 723 0
 250 0102 074B     		ldr	r3, .L9+4
 251 0104 1B68     		ldr	r3, [r3]
 252 0106 DA6A     		ldr	r2, [r3, #44]
 253 0108 BB6A     		ldr	r3, [r7, #40]
 254 010a 9A42     		cmp	r2, r3
 255 010c 01D2     		bcs	.L7
 724:FreeRTOS/tasks.c **** 			{
 725:FreeRTOS/tasks.c **** 				taskYIELD_IF_USING_PREEMPTION();
 256              		.loc 1 725 0
 257 010e FFF7FEFF 		bl	vPortYield
 258              	.L7:
 726:FreeRTOS/tasks.c **** 			}
 727:FreeRTOS/tasks.c **** 			else
 728:FreeRTOS/tasks.c **** 			{
 729:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 730:FreeRTOS/tasks.c **** 			}
 731:FreeRTOS/tasks.c **** 		}
 732:FreeRTOS/tasks.c **** 		else
 733:FreeRTOS/tasks.c **** 		{
 734:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 735:FreeRTOS/tasks.c **** 		}
 736:FreeRTOS/tasks.c **** 	}
 737:FreeRTOS/tasks.c **** 
 738:FreeRTOS/tasks.c **** 	return xReturn;
 259              		.loc 1 738 0
 260 0112 FB69     		ldr	r3, [r7, #28]
 739:FreeRTOS/tasks.c **** }
 261              		.loc 1 739 0
 262 0114 1846     		mov	r0, r3
 263 0116 2037     		adds	r7, r7, #32
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 19


 264              		.cfi_def_cfa_offset 8
 265 0118 BD46     		mov	sp, r7
 266              		.cfi_def_cfa_register 13
 267              		@ sp needed
 268 011a 80BD     		pop	{r7, pc}
 269              	.L10:
 270              		.align	2
 271              	.L9:
 272 011c D8000000 		.word	uxCurrentNumberOfTasks
 273 0120 00000000 		.word	pxCurrentTCB
 274 0124 E4000000 		.word	xSchedulerRunning
 275 0128 F4000000 		.word	uxTaskNumber
 276 012c E0000000 		.word	uxTopReadyPriority
 277 0130 04000000 		.word	pxReadyTasksLists
 278              		.cfi_endproc
 279              	.LFE64:
 280              		.size	xTaskGenericCreate, .-xTaskGenericCreate
 281              		.section	.text.vTaskDelete,"ax",%progbits
 282              		.align	2
 283              		.global	vTaskDelete
 284              		.thumb
 285              		.thumb_func
 286              		.type	vTaskDelete, %function
 287              	vTaskDelete:
 288              	.LFB65:
 740:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 741:FreeRTOS/tasks.c **** 
 742:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 743:FreeRTOS/tasks.c **** 
 744:FreeRTOS/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
 745:FreeRTOS/tasks.c **** 	{
 289              		.loc 1 745 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 16
 292              		@ frame_needed = 1, uses_anonymous_args = 0
 293 0000 80B5     		push	{r7, lr}
 294              		.cfi_def_cfa_offset 8
 295              		.cfi_offset 7, -8
 296              		.cfi_offset 14, -4
 297 0002 84B0     		sub	sp, sp, #16
 298              		.cfi_def_cfa_offset 24
 299 0004 00AF     		add	r7, sp, #0
 300              		.cfi_def_cfa_register 7
 301 0006 7860     		str	r0, [r7, #4]
 746:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 747:FreeRTOS/tasks.c **** 
 748:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 302              		.loc 1 748 0
 303 0008 FFF7FEFF 		bl	vPortEnterCritical
 749:FreeRTOS/tasks.c **** 		{
 750:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the calling task that is
 751:FreeRTOS/tasks.c **** 			being deleted. */
 752:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 304              		.loc 1 752 0
 305 000c 7B68     		ldr	r3, [r7, #4]
 306 000e 002B     		cmp	r3, #0
 307 0010 02D1     		bne	.L12
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 20


 308              		.loc 1 752 0 is_stmt 0 discriminator 1
 309 0012 2A4B     		ldr	r3, .L20
 310 0014 1B68     		ldr	r3, [r3]
 311 0016 00E0     		b	.L13
 312              	.L12:
 313              		.loc 1 752 0 discriminator 2
 314 0018 7B68     		ldr	r3, [r7, #4]
 315              	.L13:
 316              		.loc 1 752 0 discriminator 4
 317 001a FB60     		str	r3, [r7, #12]
 753:FreeRTOS/tasks.c **** 
 754:FreeRTOS/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 755:FreeRTOS/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 756:FreeRTOS/tasks.c **** 			the termination list and free up any memory allocated by the
 757:FreeRTOS/tasks.c **** 			scheduler for the TCB and stack. */
 758:FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 318              		.loc 1 758 0 is_stmt 1 discriminator 4
 319 001c FB68     		ldr	r3, [r7, #12]
 320 001e 0433     		adds	r3, r3, #4
 321 0020 1846     		mov	r0, r3
 322 0022 FFF7FEFF 		bl	uxListRemove
 323 0026 0346     		mov	r3, r0
 324 0028 002B     		cmp	r3, #0
 325 002a 15D1     		bne	.L14
 759:FreeRTOS/tasks.c **** 			{
 760:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 326              		.loc 1 760 0
 327 002c FB68     		ldr	r3, [r7, #12]
 328 002e DA6A     		ldr	r2, [r3, #44]
 329 0030 2349     		ldr	r1, .L20+4
 330 0032 1346     		mov	r3, r2
 331 0034 9B00     		lsls	r3, r3, #2
 332 0036 1344     		add	r3, r3, r2
 333 0038 9B00     		lsls	r3, r3, #2
 334 003a 0B44     		add	r3, r3, r1
 335 003c 1B68     		ldr	r3, [r3]
 336 003e 002B     		cmp	r3, #0
 337 0040 0AD1     		bne	.L14
 338              		.loc 1 760 0 is_stmt 0 discriminator 1
 339 0042 FB68     		ldr	r3, [r7, #12]
 340 0044 DB6A     		ldr	r3, [r3, #44]
 341 0046 0122     		movs	r2, #1
 342 0048 02FA03F3 		lsl	r3, r2, r3
 343 004c DA43     		mvns	r2, r3
 344 004e 1D4B     		ldr	r3, .L20+8
 345 0050 1B68     		ldr	r3, [r3]
 346 0052 1340     		ands	r3, r3, r2
 347 0054 1B4A     		ldr	r2, .L20+8
 348 0056 1360     		str	r3, [r2]
 349              	.L14:
 761:FreeRTOS/tasks.c **** 			}
 762:FreeRTOS/tasks.c **** 			else
 763:FreeRTOS/tasks.c **** 			{
 764:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 765:FreeRTOS/tasks.c **** 			}
 766:FreeRTOS/tasks.c **** 
 767:FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 21


 768:FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 350              		.loc 1 768 0 is_stmt 1
 351 0058 FB68     		ldr	r3, [r7, #12]
 352 005a 9B6A     		ldr	r3, [r3, #40]
 353 005c 002B     		cmp	r3, #0
 354 005e 04D0     		beq	.L16
 769:FreeRTOS/tasks.c **** 			{
 770:FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 355              		.loc 1 770 0
 356 0060 FB68     		ldr	r3, [r7, #12]
 357 0062 1833     		adds	r3, r3, #24
 358 0064 1846     		mov	r0, r3
 359 0066 FFF7FEFF 		bl	uxListRemove
 360              	.L16:
 771:FreeRTOS/tasks.c **** 			}
 772:FreeRTOS/tasks.c **** 			else
 773:FreeRTOS/tasks.c **** 			{
 774:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 775:FreeRTOS/tasks.c **** 			}
 776:FreeRTOS/tasks.c **** 
 777:FreeRTOS/tasks.c **** 			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 361              		.loc 1 777 0
 362 006a FB68     		ldr	r3, [r7, #12]
 363 006c 0433     		adds	r3, r3, #4
 364 006e 1946     		mov	r1, r3
 365 0070 1548     		ldr	r0, .L20+12
 366 0072 FFF7FEFF 		bl	vListInsertEnd
 778:FreeRTOS/tasks.c **** 
 779:FreeRTOS/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 780:FreeRTOS/tasks.c **** 			there is a task that has been deleted and that it should therefore
 781:FreeRTOS/tasks.c **** 			check the xTasksWaitingTermination list. */
 782:FreeRTOS/tasks.c **** 			++uxTasksDeleted;
 367              		.loc 1 782 0
 368 0076 154B     		ldr	r3, .L20+16
 369 0078 1B68     		ldr	r3, [r3]
 370 007a 0133     		adds	r3, r3, #1
 371 007c 134A     		ldr	r2, .L20+16
 372 007e 1360     		str	r3, [r2]
 783:FreeRTOS/tasks.c **** 
 784:FreeRTOS/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 785:FreeRTOS/tasks.c **** 			can detect that the task lists need re-generating. */
 786:FreeRTOS/tasks.c **** 			uxTaskNumber++;
 373              		.loc 1 786 0
 374 0080 134B     		ldr	r3, .L20+20
 375 0082 1B68     		ldr	r3, [r3]
 376 0084 0133     		adds	r3, r3, #1
 377 0086 124A     		ldr	r2, .L20+20
 378 0088 1360     		str	r3, [r2]
 787:FreeRTOS/tasks.c **** 
 788:FreeRTOS/tasks.c **** 			traceTASK_DELETE( pxTCB );
 789:FreeRTOS/tasks.c **** 		}
 790:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 379              		.loc 1 790 0
 380 008a FFF7FEFF 		bl	vPortExitCritical
 791:FreeRTOS/tasks.c **** 
 792:FreeRTOS/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
 793:FreeRTOS/tasks.c **** 		been deleted. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 22


 794:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 381              		.loc 1 794 0
 382 008e 114B     		ldr	r3, .L20+24
 383 0090 1B68     		ldr	r3, [r3]
 384 0092 002B     		cmp	r3, #0
 385 0094 0DD0     		beq	.L19
 795:FreeRTOS/tasks.c **** 		{
 796:FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 386              		.loc 1 796 0
 387 0096 094B     		ldr	r3, .L20
 388 0098 1B68     		ldr	r3, [r3]
 389 009a FA68     		ldr	r2, [r7, #12]
 390 009c 9A42     		cmp	r2, r3
 391 009e 02D1     		bne	.L18
 797:FreeRTOS/tasks.c **** 			{
 798:FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 799:FreeRTOS/tasks.c **** 
 800:FreeRTOS/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
 801:FreeRTOS/tasks.c **** 				in which Windows specific clean up operations are performed,
 802:FreeRTOS/tasks.c **** 				after which it is not possible to yield away from this task -
 803:FreeRTOS/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
 804:FreeRTOS/tasks.c **** 				required. */
 805:FreeRTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 806:FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 392              		.loc 1 806 0
 393 00a0 FFF7FEFF 		bl	vPortYield
 807:FreeRTOS/tasks.c **** 			}
 808:FreeRTOS/tasks.c **** 			else
 809:FreeRTOS/tasks.c **** 			{
 810:FreeRTOS/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
 811:FreeRTOS/tasks.c **** 				the task that has just been deleted. */
 812:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
 813:FreeRTOS/tasks.c **** 				{
 814:FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
 815:FreeRTOS/tasks.c **** 				}
 816:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
 817:FreeRTOS/tasks.c **** 			}
 818:FreeRTOS/tasks.c **** 		}
 819:FreeRTOS/tasks.c **** 	}
 394              		.loc 1 819 0
 395 00a4 05E0     		b	.L19
 396              	.L18:
 812:FreeRTOS/tasks.c **** 				{
 397              		.loc 1 812 0
 398 00a6 FFF7FEFF 		bl	vPortEnterCritical
 814:FreeRTOS/tasks.c **** 				}
 399              		.loc 1 814 0
 400 00aa FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 816:FreeRTOS/tasks.c **** 			}
 401              		.loc 1 816 0
 402 00ae FFF7FEFF 		bl	vPortExitCritical
 403              	.L19:
 404              		.loc 1 819 0
 405 00b2 00BF     		nop
 406 00b4 1037     		adds	r7, r7, #16
 407              		.cfi_def_cfa_offset 8
 408 00b6 BD46     		mov	sp, r7
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 23


 409              		.cfi_def_cfa_register 13
 410              		@ sp needed
 411 00b8 80BD     		pop	{r7, pc}
 412              	.L21:
 413 00ba 00BF     		.align	2
 414              	.L20:
 415 00bc 00000000 		.word	pxCurrentTCB
 416 00c0 04000000 		.word	pxReadyTasksLists
 417 00c4 E0000000 		.word	uxTopReadyPriority
 418 00c8 AC000000 		.word	xTasksWaitingTermination
 419 00cc C0000000 		.word	uxTasksDeleted
 420 00d0 F4000000 		.word	uxTaskNumber
 421 00d4 E4000000 		.word	xSchedulerRunning
 422              		.cfi_endproc
 423              	.LFE65:
 424              		.size	vTaskDelete, .-vTaskDelete
 425              		.section	.text.vTaskDelayUntil,"ax",%progbits
 426              		.align	2
 427              		.global	vTaskDelayUntil
 428              		.thumb
 429              		.thumb_func
 430              		.type	vTaskDelayUntil, %function
 431              	vTaskDelayUntil:
 432              	.LFB66:
 820:FreeRTOS/tasks.c **** 
 821:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
 822:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 823:FreeRTOS/tasks.c **** 
 824:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 825:FreeRTOS/tasks.c **** 
 826:FreeRTOS/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
 827:FreeRTOS/tasks.c **** 	{
 433              		.loc 1 827 0
 434              		.cfi_startproc
 435              		@ args = 0, pretend = 0, frame = 24
 436              		@ frame_needed = 1, uses_anonymous_args = 0
 437 0000 80B5     		push	{r7, lr}
 438              		.cfi_def_cfa_offset 8
 439              		.cfi_offset 7, -8
 440              		.cfi_offset 14, -4
 441 0002 86B0     		sub	sp, sp, #24
 442              		.cfi_def_cfa_offset 32
 443 0004 00AF     		add	r7, sp, #0
 444              		.cfi_def_cfa_register 7
 445 0006 7860     		str	r0, [r7, #4]
 446 0008 3960     		str	r1, [r7]
 828:FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
 829:FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 447              		.loc 1 829 0
 448 000a 0023     		movs	r3, #0
 449 000c 7B61     		str	r3, [r7, #20]
 830:FreeRTOS/tasks.c **** 
 831:FreeRTOS/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 832:FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 833:FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 834:FreeRTOS/tasks.c **** 
 835:FreeRTOS/tasks.c **** 		vTaskSuspendAll();
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 24


 450              		.loc 1 835 0
 451 000e FFF7FEFF 		bl	vTaskSuspendAll
 452              	.LBB7:
 836:FreeRTOS/tasks.c **** 		{
 837:FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
 838:FreeRTOS/tasks.c **** 			block. */
 839:FreeRTOS/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 453              		.loc 1 839 0
 454 0012 274B     		ldr	r3, .L30
 455 0014 1B68     		ldr	r3, [r3]
 456 0016 3B61     		str	r3, [r7, #16]
 840:FreeRTOS/tasks.c **** 
 841:FreeRTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 842:FreeRTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 457              		.loc 1 842 0
 458 0018 7B68     		ldr	r3, [r7, #4]
 459 001a 1A68     		ldr	r2, [r3]
 460 001c 3B68     		ldr	r3, [r7]
 461 001e 1344     		add	r3, r3, r2
 462 0020 FB60     		str	r3, [r7, #12]
 843:FreeRTOS/tasks.c **** 
 844:FreeRTOS/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 463              		.loc 1 844 0
 464 0022 7B68     		ldr	r3, [r7, #4]
 465 0024 1A68     		ldr	r2, [r3]
 466 0026 3B69     		ldr	r3, [r7, #16]
 467 0028 9A42     		cmp	r2, r3
 468 002a 0BD9     		bls	.L23
 845:FreeRTOS/tasks.c **** 			{
 846:FreeRTOS/tasks.c **** 				/* The tick count has overflowed since this function was
 847:FreeRTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
 848:FreeRTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 849:FreeRTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
 850:FreeRTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
 851:FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 469              		.loc 1 851 0
 470 002c 7B68     		ldr	r3, [r7, #4]
 471 002e 1A68     		ldr	r2, [r3]
 472 0030 FB68     		ldr	r3, [r7, #12]
 473 0032 9A42     		cmp	r2, r3
 474 0034 11D9     		bls	.L24
 475              		.loc 1 851 0 is_stmt 0 discriminator 1
 476 0036 FA68     		ldr	r2, [r7, #12]
 477 0038 3B69     		ldr	r3, [r7, #16]
 478 003a 9A42     		cmp	r2, r3
 479 003c 0DD9     		bls	.L24
 852:FreeRTOS/tasks.c **** 				{
 853:FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 480              		.loc 1 853 0 is_stmt 1
 481 003e 0123     		movs	r3, #1
 482 0040 7B61     		str	r3, [r7, #20]
 483 0042 0AE0     		b	.L24
 484              	.L23:
 854:FreeRTOS/tasks.c **** 				}
 855:FreeRTOS/tasks.c **** 				else
 856:FreeRTOS/tasks.c **** 				{
 857:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 25


 858:FreeRTOS/tasks.c **** 				}
 859:FreeRTOS/tasks.c **** 			}
 860:FreeRTOS/tasks.c **** 			else
 861:FreeRTOS/tasks.c **** 			{
 862:FreeRTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 863:FreeRTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 864:FreeRTOS/tasks.c **** 				tick time is less than the wake time. */
 865:FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 485              		.loc 1 865 0
 486 0044 7B68     		ldr	r3, [r7, #4]
 487 0046 1A68     		ldr	r2, [r3]
 488 0048 FB68     		ldr	r3, [r7, #12]
 489 004a 9A42     		cmp	r2, r3
 490 004c 03D8     		bhi	.L25
 491              		.loc 1 865 0 is_stmt 0 discriminator 1
 492 004e FA68     		ldr	r2, [r7, #12]
 493 0050 3B69     		ldr	r3, [r7, #16]
 494 0052 9A42     		cmp	r2, r3
 495 0054 01D9     		bls	.L24
 496              	.L25:
 866:FreeRTOS/tasks.c **** 				{
 867:FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 497              		.loc 1 867 0 is_stmt 1
 498 0056 0123     		movs	r3, #1
 499 0058 7B61     		str	r3, [r7, #20]
 500              	.L24:
 868:FreeRTOS/tasks.c **** 				}
 869:FreeRTOS/tasks.c **** 				else
 870:FreeRTOS/tasks.c **** 				{
 871:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 872:FreeRTOS/tasks.c **** 				}
 873:FreeRTOS/tasks.c **** 			}
 874:FreeRTOS/tasks.c **** 
 875:FreeRTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
 876:FreeRTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 501              		.loc 1 876 0
 502 005a 7B68     		ldr	r3, [r7, #4]
 503 005c FA68     		ldr	r2, [r7, #12]
 504 005e 1A60     		str	r2, [r3]
 877:FreeRTOS/tasks.c **** 
 878:FreeRTOS/tasks.c **** 			if( xShouldDelay != pdFALSE )
 505              		.loc 1 878 0
 506 0060 7B69     		ldr	r3, [r7, #20]
 507 0062 002B     		cmp	r3, #0
 508 0064 17D0     		beq	.L26
 879:FreeRTOS/tasks.c **** 			{
 880:FreeRTOS/tasks.c **** 				traceTASK_DELAY_UNTIL();
 881:FreeRTOS/tasks.c **** 
 882:FreeRTOS/tasks.c **** 				/* Remove the task from the ready list before adding it to the
 883:FreeRTOS/tasks.c **** 				blocked list as the same list item is used for both lists. */
 884:FreeRTOS/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 509              		.loc 1 884 0
 510 0066 134B     		ldr	r3, .L30+4
 511 0068 1B68     		ldr	r3, [r3]
 512 006a 0433     		adds	r3, r3, #4
 513 006c 1846     		mov	r0, r3
 514 006e FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 26


 515 0072 0346     		mov	r3, r0
 516 0074 002B     		cmp	r3, #0
 517 0076 0BD1     		bne	.L27
 885:FreeRTOS/tasks.c **** 				{
 886:FreeRTOS/tasks.c **** 					/* The current task must be in a ready list, so there is
 887:FreeRTOS/tasks.c **** 					no need to check, and the port reset macro can be called
 888:FreeRTOS/tasks.c **** 					directly. */
 889:FreeRTOS/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 518              		.loc 1 889 0
 519 0078 0E4B     		ldr	r3, .L30+4
 520 007a 1B68     		ldr	r3, [r3]
 521 007c DB6A     		ldr	r3, [r3, #44]
 522 007e 0122     		movs	r2, #1
 523 0080 02FA03F3 		lsl	r3, r2, r3
 524 0084 DA43     		mvns	r2, r3
 525 0086 0C4B     		ldr	r3, .L30+8
 526 0088 1B68     		ldr	r3, [r3]
 527 008a 1340     		ands	r3, r3, r2
 528 008c 0A4A     		ldr	r2, .L30+8
 529 008e 1360     		str	r3, [r2]
 530              	.L27:
 890:FreeRTOS/tasks.c **** 				}
 891:FreeRTOS/tasks.c **** 				else
 892:FreeRTOS/tasks.c **** 				{
 893:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 894:FreeRTOS/tasks.c **** 				}
 895:FreeRTOS/tasks.c **** 
 896:FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 531              		.loc 1 896 0
 532 0090 F868     		ldr	r0, [r7, #12]
 533 0092 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 534              	.L26:
 535              	.LBE7:
 897:FreeRTOS/tasks.c **** 			}
 898:FreeRTOS/tasks.c **** 			else
 899:FreeRTOS/tasks.c **** 			{
 900:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 901:FreeRTOS/tasks.c **** 			}
 902:FreeRTOS/tasks.c **** 		}
 903:FreeRTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 536              		.loc 1 903 0
 537 0096 FFF7FEFF 		bl	xTaskResumeAll
 538 009a B860     		str	r0, [r7, #8]
 904:FreeRTOS/tasks.c **** 
 905:FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 906:FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
 907:FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 539              		.loc 1 907 0
 540 009c BB68     		ldr	r3, [r7, #8]
 541 009e 002B     		cmp	r3, #0
 542 00a0 01D1     		bne	.L29
 908:FreeRTOS/tasks.c **** 		{
 909:FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
 543              		.loc 1 909 0
 544 00a2 FFF7FEFF 		bl	vPortYield
 545              	.L29:
 910:FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 27


 911:FreeRTOS/tasks.c **** 		else
 912:FreeRTOS/tasks.c **** 		{
 913:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 914:FreeRTOS/tasks.c **** 		}
 915:FreeRTOS/tasks.c **** 	}
 546              		.loc 1 915 0
 547 00a6 00BF     		nop
 548 00a8 1837     		adds	r7, r7, #24
 549              		.cfi_def_cfa_offset 8
 550 00aa BD46     		mov	sp, r7
 551              		.cfi_def_cfa_register 13
 552              		@ sp needed
 553 00ac 80BD     		pop	{r7, pc}
 554              	.L31:
 555 00ae 00BF     		.align	2
 556              	.L30:
 557 00b0 DC000000 		.word	xTickCount
 558 00b4 00000000 		.word	pxCurrentTCB
 559 00b8 E0000000 		.word	uxTopReadyPriority
 560              		.cfi_endproc
 561              	.LFE66:
 562              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 563              		.section	.text.vTaskDelay,"ax",%progbits
 564              		.align	2
 565              		.global	vTaskDelay
 566              		.thumb
 567              		.thumb_func
 568              		.type	vTaskDelay, %function
 569              	vTaskDelay:
 570              	.LFB67:
 916:FreeRTOS/tasks.c **** 
 917:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
 918:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 919:FreeRTOS/tasks.c **** 
 920:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 921:FreeRTOS/tasks.c **** 
 922:FreeRTOS/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
 923:FreeRTOS/tasks.c **** 	{
 571              		.loc 1 923 0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 16
 574              		@ frame_needed = 1, uses_anonymous_args = 0
 575 0000 80B5     		push	{r7, lr}
 576              		.cfi_def_cfa_offset 8
 577              		.cfi_offset 7, -8
 578              		.cfi_offset 14, -4
 579 0002 84B0     		sub	sp, sp, #16
 580              		.cfi_def_cfa_offset 24
 581 0004 00AF     		add	r7, sp, #0
 582              		.cfi_def_cfa_register 7
 583 0006 7860     		str	r0, [r7, #4]
 924:FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
 925:FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 584              		.loc 1 925 0
 585 0008 0023     		movs	r3, #0
 586 000a FB60     		str	r3, [r7, #12]
 926:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 28


 927:FreeRTOS/tasks.c **** 
 928:FreeRTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 929:FreeRTOS/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 587              		.loc 1 929 0
 588 000c 7B68     		ldr	r3, [r7, #4]
 589 000e 002B     		cmp	r3, #0
 590 0010 21D0     		beq	.L33
 930:FreeRTOS/tasks.c **** 		{
 931:FreeRTOS/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 932:FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 591              		.loc 1 932 0
 592 0012 FFF7FEFF 		bl	vTaskSuspendAll
 933:FreeRTOS/tasks.c **** 			{
 934:FreeRTOS/tasks.c **** 				traceTASK_DELAY();
 935:FreeRTOS/tasks.c **** 
 936:FreeRTOS/tasks.c **** 				/* A task that is removed from the event list while the
 937:FreeRTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
 938:FreeRTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
 939:FreeRTOS/tasks.c **** 				is resumed.
 940:FreeRTOS/tasks.c **** 
 941:FreeRTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
 942:FreeRTOS/tasks.c **** 				executing task. */
 943:FreeRTOS/tasks.c **** 
 944:FreeRTOS/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 945:FreeRTOS/tasks.c **** 				not a problem. */
 946:FreeRTOS/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 593              		.loc 1 946 0
 594 0016 144B     		ldr	r3, .L37
 595 0018 1A68     		ldr	r2, [r3]
 596 001a 7B68     		ldr	r3, [r7, #4]
 597 001c 1344     		add	r3, r3, r2
 598 001e BB60     		str	r3, [r7, #8]
 947:FreeRTOS/tasks.c **** 
 948:FreeRTOS/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 949:FreeRTOS/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 950:FreeRTOS/tasks.c **** 				both lists. */
 951:FreeRTOS/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 599              		.loc 1 951 0
 600 0020 124B     		ldr	r3, .L37+4
 601 0022 1B68     		ldr	r3, [r3]
 602 0024 0433     		adds	r3, r3, #4
 603 0026 1846     		mov	r0, r3
 604 0028 FFF7FEFF 		bl	uxListRemove
 605 002c 0346     		mov	r3, r0
 606 002e 002B     		cmp	r3, #0
 607 0030 0BD1     		bne	.L34
 952:FreeRTOS/tasks.c **** 				{
 953:FreeRTOS/tasks.c **** 					/* The current task must be in a ready list, so there is
 954:FreeRTOS/tasks.c **** 					no need to check, and the port reset macro can be called
 955:FreeRTOS/tasks.c **** 					directly. */
 956:FreeRTOS/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 608              		.loc 1 956 0
 609 0032 0E4B     		ldr	r3, .L37+4
 610 0034 1B68     		ldr	r3, [r3]
 611 0036 DB6A     		ldr	r3, [r3, #44]
 612 0038 0122     		movs	r2, #1
 613 003a 02FA03F3 		lsl	r3, r2, r3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 29


 614 003e DA43     		mvns	r2, r3
 615 0040 0B4B     		ldr	r3, .L37+8
 616 0042 1B68     		ldr	r3, [r3]
 617 0044 1340     		ands	r3, r3, r2
 618 0046 0A4A     		ldr	r2, .L37+8
 619 0048 1360     		str	r3, [r2]
 620              	.L34:
 957:FreeRTOS/tasks.c **** 				}
 958:FreeRTOS/tasks.c **** 				else
 959:FreeRTOS/tasks.c **** 				{
 960:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 961:FreeRTOS/tasks.c **** 				}
 962:FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 621              		.loc 1 962 0
 622 004a B868     		ldr	r0, [r7, #8]
 623 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 963:FreeRTOS/tasks.c **** 			}
 964:FreeRTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 624              		.loc 1 964 0
 625 0050 FFF7FEFF 		bl	xTaskResumeAll
 626 0054 F860     		str	r0, [r7, #12]
 627              	.L33:
 965:FreeRTOS/tasks.c **** 		}
 966:FreeRTOS/tasks.c **** 		else
 967:FreeRTOS/tasks.c **** 		{
 968:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 969:FreeRTOS/tasks.c **** 		}
 970:FreeRTOS/tasks.c **** 
 971:FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 972:FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
 973:FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 628              		.loc 1 973 0
 629 0056 FB68     		ldr	r3, [r7, #12]
 630 0058 002B     		cmp	r3, #0
 631 005a 01D1     		bne	.L36
 974:FreeRTOS/tasks.c **** 		{
 975:FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
 632              		.loc 1 975 0
 633 005c FFF7FEFF 		bl	vPortYield
 634              	.L36:
 976:FreeRTOS/tasks.c **** 		}
 977:FreeRTOS/tasks.c **** 		else
 978:FreeRTOS/tasks.c **** 		{
 979:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 980:FreeRTOS/tasks.c **** 		}
 981:FreeRTOS/tasks.c **** 	}
 635              		.loc 1 981 0
 636 0060 00BF     		nop
 637 0062 1037     		adds	r7, r7, #16
 638              		.cfi_def_cfa_offset 8
 639 0064 BD46     		mov	sp, r7
 640              		.cfi_def_cfa_register 13
 641              		@ sp needed
 642 0066 80BD     		pop	{r7, pc}
 643              	.L38:
 644              		.align	2
 645              	.L37:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 30


 646 0068 DC000000 		.word	xTickCount
 647 006c 00000000 		.word	pxCurrentTCB
 648 0070 E0000000 		.word	uxTopReadyPriority
 649              		.cfi_endproc
 650              	.LFE67:
 651              		.size	vTaskDelay, .-vTaskDelay
 652              		.section	.text.eTaskGetState,"ax",%progbits
 653              		.align	2
 654              		.global	eTaskGetState
 655              		.thumb
 656              		.thumb_func
 657              		.type	eTaskGetState, %function
 658              	eTaskGetState:
 659              	.LFB68:
 982:FreeRTOS/tasks.c **** 
 983:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
 984:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 985:FreeRTOS/tasks.c **** 
 986:FreeRTOS/tasks.c **** #if ( INCLUDE_eTaskGetState == 1 )
 987:FreeRTOS/tasks.c **** 
 988:FreeRTOS/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
 989:FreeRTOS/tasks.c **** 	{
 660              		.loc 1 989 0
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 24
 663              		@ frame_needed = 1, uses_anonymous_args = 0
 664 0000 80B5     		push	{r7, lr}
 665              		.cfi_def_cfa_offset 8
 666              		.cfi_offset 7, -8
 667              		.cfi_offset 14, -4
 668 0002 86B0     		sub	sp, sp, #24
 669              		.cfi_def_cfa_offset 32
 670 0004 00AF     		add	r7, sp, #0
 671              		.cfi_def_cfa_register 7
 672 0006 7860     		str	r0, [r7, #4]
 990:FreeRTOS/tasks.c **** 	eTaskState eReturn;
 991:FreeRTOS/tasks.c **** 	List_t *pxStateList;
 992:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 673              		.loc 1 992 0
 674 0008 7B68     		ldr	r3, [r7, #4]
 675 000a 3B61     		str	r3, [r7, #16]
 993:FreeRTOS/tasks.c **** 
 994:FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
 995:FreeRTOS/tasks.c **** 
 996:FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 676              		.loc 1 996 0
 677 000c 1B4B     		ldr	r3, .L49
 678 000e 1B68     		ldr	r3, [r3]
 679 0010 3A69     		ldr	r2, [r7, #16]
 680 0012 9A42     		cmp	r2, r3
 681 0014 02D1     		bne	.L40
 997:FreeRTOS/tasks.c **** 		{
 998:FreeRTOS/tasks.c **** 			/* The task calling this function is querying its own state. */
 999:FreeRTOS/tasks.c **** 			eReturn = eRunning;
 682              		.loc 1 999 0
 683 0016 0023     		movs	r3, #0
 684 0018 FB75     		strb	r3, [r7, #23]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 31


 685 001a 2AE0     		b	.L41
 686              	.L40:
1000:FreeRTOS/tasks.c **** 		}
1001:FreeRTOS/tasks.c **** 		else
1002:FreeRTOS/tasks.c **** 		{
1003:FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
 687              		.loc 1 1003 0
 688 001c FFF7FEFF 		bl	vPortEnterCritical
1004:FreeRTOS/tasks.c **** 			{
1005:FreeRTOS/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
 689              		.loc 1 1005 0
 690 0020 3B69     		ldr	r3, [r7, #16]
 691 0022 5B69     		ldr	r3, [r3, #20]
 692 0024 FB60     		str	r3, [r7, #12]
1006:FreeRTOS/tasks.c **** 			}
1007:FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
 693              		.loc 1 1007 0
 694 0026 FFF7FEFF 		bl	vPortExitCritical
1008:FreeRTOS/tasks.c **** 
1009:FreeRTOS/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 695              		.loc 1 1009 0
 696 002a 154B     		ldr	r3, .L49+4
 697 002c 1B68     		ldr	r3, [r3]
 698 002e FA68     		ldr	r2, [r7, #12]
 699 0030 9A42     		cmp	r2, r3
 700 0032 04D0     		beq	.L42
 701              		.loc 1 1009 0 is_stmt 0 discriminator 1
 702 0034 134B     		ldr	r3, .L49+8
 703 0036 1B68     		ldr	r3, [r3]
 704 0038 FA68     		ldr	r2, [r7, #12]
 705 003a 9A42     		cmp	r2, r3
 706 003c 02D1     		bne	.L43
 707              	.L42:
1010:FreeRTOS/tasks.c **** 			{
1011:FreeRTOS/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1012:FreeRTOS/tasks.c **** 				lists. */
1013:FreeRTOS/tasks.c **** 				eReturn = eBlocked;
 708              		.loc 1 1013 0 is_stmt 1
 709 003e 0223     		movs	r3, #2
 710 0040 FB75     		strb	r3, [r7, #23]
 711 0042 16E0     		b	.L41
 712              	.L43:
1014:FreeRTOS/tasks.c **** 			}
1015:FreeRTOS/tasks.c **** 
1016:FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1017:FreeRTOS/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 713              		.loc 1 1017 0
 714 0044 FB68     		ldr	r3, [r7, #12]
 715 0046 104A     		ldr	r2, .L49+12
 716 0048 9342     		cmp	r3, r2
 717 004a 09D1     		bne	.L44
1018:FreeRTOS/tasks.c **** 				{
1019:FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the suspended
1020:FreeRTOS/tasks.c **** 					list.  Is it genuinely suspended or is it block
1021:FreeRTOS/tasks.c **** 					indefinitely? */
1022:FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 718              		.loc 1 1022 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 32


 719 004c 3B69     		ldr	r3, [r7, #16]
 720 004e 9B6A     		ldr	r3, [r3, #40]
 721 0050 002B     		cmp	r3, #0
 722 0052 02D1     		bne	.L45
1023:FreeRTOS/tasks.c **** 					{
1024:FreeRTOS/tasks.c **** 						eReturn = eSuspended;
 723              		.loc 1 1024 0
 724 0054 0323     		movs	r3, #3
 725 0056 FB75     		strb	r3, [r7, #23]
 726 0058 0BE0     		b	.L41
 727              	.L45:
1025:FreeRTOS/tasks.c **** 					}
1026:FreeRTOS/tasks.c **** 					else
1027:FreeRTOS/tasks.c **** 					{
1028:FreeRTOS/tasks.c **** 						eReturn = eBlocked;
 728              		.loc 1 1028 0
 729 005a 0223     		movs	r3, #2
 730 005c FB75     		strb	r3, [r7, #23]
 731 005e 08E0     		b	.L41
 732              	.L44:
1029:FreeRTOS/tasks.c **** 					}
1030:FreeRTOS/tasks.c **** 				}
1031:FreeRTOS/tasks.c **** 			#endif
1032:FreeRTOS/tasks.c **** 
1033:FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1034:FreeRTOS/tasks.c **** 				else if( pxStateList == &xTasksWaitingTermination )
 733              		.loc 1 1034 0
 734 0060 FB68     		ldr	r3, [r7, #12]
 735 0062 0A4A     		ldr	r2, .L49+16
 736 0064 9342     		cmp	r3, r2
 737 0066 02D1     		bne	.L47
1035:FreeRTOS/tasks.c **** 				{
1036:FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the deleted
1037:FreeRTOS/tasks.c **** 					tasks list. */
1038:FreeRTOS/tasks.c **** 					eReturn = eDeleted;
 738              		.loc 1 1038 0
 739 0068 0423     		movs	r3, #4
 740 006a FB75     		strb	r3, [r7, #23]
 741 006c 01E0     		b	.L41
 742              	.L47:
1039:FreeRTOS/tasks.c **** 				}
1040:FreeRTOS/tasks.c **** 			#endif
1041:FreeRTOS/tasks.c **** 
1042:FreeRTOS/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1043:FreeRTOS/tasks.c **** 			{
1044:FreeRTOS/tasks.c **** 				/* If the task is not in any other state, it must be in the
1045:FreeRTOS/tasks.c **** 				Ready (including pending ready) state. */
1046:FreeRTOS/tasks.c **** 				eReturn = eReady;
 743              		.loc 1 1046 0
 744 006e 0123     		movs	r3, #1
 745 0070 FB75     		strb	r3, [r7, #23]
 746              	.L41:
1047:FreeRTOS/tasks.c **** 			}
1048:FreeRTOS/tasks.c **** 		}
1049:FreeRTOS/tasks.c **** 
1050:FreeRTOS/tasks.c **** 		return eReturn;
 747              		.loc 1 1050 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 33


 748 0072 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1051:FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 749              		.loc 1 1051 0
 750 0074 1846     		mov	r0, r3
 751 0076 1837     		adds	r7, r7, #24
 752              		.cfi_def_cfa_offset 8
 753 0078 BD46     		mov	sp, r7
 754              		.cfi_def_cfa_register 13
 755              		@ sp needed
 756 007a 80BD     		pop	{r7, pc}
 757              	.L50:
 758              		.align	2
 759              	.L49:
 760 007c 00000000 		.word	pxCurrentTCB
 761 0080 90000000 		.word	pxDelayedTaskList
 762 0084 94000000 		.word	pxOverflowDelayedTaskList
 763 0088 C4000000 		.word	xSuspendedTaskList
 764 008c AC000000 		.word	xTasksWaitingTermination
 765              		.cfi_endproc
 766              	.LFE68:
 767              		.size	eTaskGetState, .-eTaskGetState
 768              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 769              		.align	2
 770              		.global	uxTaskPriorityGet
 771              		.thumb
 772              		.thumb_func
 773              		.type	uxTaskPriorityGet, %function
 774              	uxTaskPriorityGet:
 775              	.LFB69:
1052:FreeRTOS/tasks.c **** 
1053:FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1054:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1055:FreeRTOS/tasks.c **** 
1056:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1057:FreeRTOS/tasks.c **** 
1058:FreeRTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1059:FreeRTOS/tasks.c **** 	{
 776              		.loc 1 1059 0
 777              		.cfi_startproc
 778              		@ args = 0, pretend = 0, frame = 16
 779              		@ frame_needed = 1, uses_anonymous_args = 0
 780 0000 80B5     		push	{r7, lr}
 781              		.cfi_def_cfa_offset 8
 782              		.cfi_offset 7, -8
 783              		.cfi_offset 14, -4
 784 0002 84B0     		sub	sp, sp, #16
 785              		.cfi_def_cfa_offset 24
 786 0004 00AF     		add	r7, sp, #0
 787              		.cfi_def_cfa_register 7
 788 0006 7860     		str	r0, [r7, #4]
1060:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1061:FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
1062:FreeRTOS/tasks.c **** 
1063:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 789              		.loc 1 1063 0
 790 0008 FFF7FEFF 		bl	vPortEnterCritical
1064:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 34


1065:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1066:FreeRTOS/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1067:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 791              		.loc 1 1067 0
 792 000c 7B68     		ldr	r3, [r7, #4]
 793 000e 002B     		cmp	r3, #0
 794 0010 02D1     		bne	.L52
 795              		.loc 1 1067 0 is_stmt 0 discriminator 1
 796 0012 074B     		ldr	r3, .L55
 797 0014 1B68     		ldr	r3, [r3]
 798 0016 00E0     		b	.L53
 799              	.L52:
 800              		.loc 1 1067 0 discriminator 2
 801 0018 7B68     		ldr	r3, [r7, #4]
 802              	.L53:
 803              		.loc 1 1067 0 discriminator 4
 804 001a FB60     		str	r3, [r7, #12]
1068:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 805              		.loc 1 1068 0 is_stmt 1 discriminator 4
 806 001c FB68     		ldr	r3, [r7, #12]
 807 001e DB6A     		ldr	r3, [r3, #44]
 808 0020 BB60     		str	r3, [r7, #8]
1069:FreeRTOS/tasks.c **** 		}
1070:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 809              		.loc 1 1070 0 discriminator 4
 810 0022 FFF7FEFF 		bl	vPortExitCritical
1071:FreeRTOS/tasks.c **** 
1072:FreeRTOS/tasks.c **** 		return uxReturn;
 811              		.loc 1 1072 0 discriminator 4
 812 0026 BB68     		ldr	r3, [r7, #8]
1073:FreeRTOS/tasks.c **** 	}
 813              		.loc 1 1073 0 discriminator 4
 814 0028 1846     		mov	r0, r3
 815 002a 1037     		adds	r7, r7, #16
 816              		.cfi_def_cfa_offset 8
 817 002c BD46     		mov	sp, r7
 818              		.cfi_def_cfa_register 13
 819              		@ sp needed
 820 002e 80BD     		pop	{r7, pc}
 821              	.L56:
 822              		.align	2
 823              	.L55:
 824 0030 00000000 		.word	pxCurrentTCB
 825              		.cfi_endproc
 826              	.LFE69:
 827              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 828              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 829              		.align	2
 830              		.global	uxTaskPriorityGetFromISR
 831              		.thumb
 832              		.thumb_func
 833              		.type	uxTaskPriorityGetFromISR, %function
 834              	uxTaskPriorityGetFromISR:
 835              	.LFB70:
1074:FreeRTOS/tasks.c **** 
1075:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1076:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 35


1077:FreeRTOS/tasks.c **** 
1078:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1079:FreeRTOS/tasks.c **** 
1080:FreeRTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1081:FreeRTOS/tasks.c **** 	{
 836              		.loc 1 1081 0
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 24
 839              		@ frame_needed = 1, uses_anonymous_args = 0
 840 0000 80B5     		push	{r7, lr}
 841              		.cfi_def_cfa_offset 8
 842              		.cfi_offset 7, -8
 843              		.cfi_offset 14, -4
 844 0002 86B0     		sub	sp, sp, #24
 845              		.cfi_def_cfa_offset 32
 846 0004 00AF     		add	r7, sp, #0
 847              		.cfi_def_cfa_register 7
 848 0006 7860     		str	r0, [r7, #4]
1082:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1083:FreeRTOS/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1084:FreeRTOS/tasks.c **** 
1085:FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1086:FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1087:FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1088:FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1089:FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1090:FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1091:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1092:FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1093:FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1094:FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1095:FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1096:FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1097:FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1098:FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1099:FreeRTOS/tasks.c **** 		provided on the following link:
1100:FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1101:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1102:FreeRTOS/tasks.c **** 
1103:FreeRTOS/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 849              		.loc 1 1103 0
 850 0008 FFF7FEFF 		bl	ulPortSetInterruptMask
 851 000c 7861     		str	r0, [r7, #20]
1104:FreeRTOS/tasks.c **** 		{
1105:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1106:FreeRTOS/tasks.c **** 			task that is being queried. */
1107:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 852              		.loc 1 1107 0
 853 000e 7B68     		ldr	r3, [r7, #4]
 854 0010 002B     		cmp	r3, #0
 855 0012 02D1     		bne	.L58
 856              		.loc 1 1107 0 is_stmt 0 discriminator 1
 857 0014 074B     		ldr	r3, .L61
 858 0016 1B68     		ldr	r3, [r3]
 859 0018 00E0     		b	.L59
 860              	.L58:
 861              		.loc 1 1107 0 discriminator 2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 36


 862 001a 7B68     		ldr	r3, [r7, #4]
 863              	.L59:
 864              		.loc 1 1107 0 discriminator 4
 865 001c 3B61     		str	r3, [r7, #16]
1108:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 866              		.loc 1 1108 0 is_stmt 1 discriminator 4
 867 001e 3B69     		ldr	r3, [r7, #16]
 868 0020 DB6A     		ldr	r3, [r3, #44]
 869 0022 FB60     		str	r3, [r7, #12]
1109:FreeRTOS/tasks.c **** 		}
1110:FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
 870              		.loc 1 1110 0 discriminator 4
 871 0024 7869     		ldr	r0, [r7, #20]
 872 0026 FFF7FEFF 		bl	vPortClearInterruptMask
1111:FreeRTOS/tasks.c **** 
1112:FreeRTOS/tasks.c **** 		return uxReturn;
 873              		.loc 1 1112 0 discriminator 4
 874 002a FB68     		ldr	r3, [r7, #12]
1113:FreeRTOS/tasks.c **** 	}
 875              		.loc 1 1113 0 discriminator 4
 876 002c 1846     		mov	r0, r3
 877 002e 1837     		adds	r7, r7, #24
 878              		.cfi_def_cfa_offset 8
 879 0030 BD46     		mov	sp, r7
 880              		.cfi_def_cfa_register 13
 881              		@ sp needed
 882 0032 80BD     		pop	{r7, pc}
 883              	.L62:
 884              		.align	2
 885              	.L61:
 886 0034 00000000 		.word	pxCurrentTCB
 887              		.cfi_endproc
 888              	.LFE70:
 889              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 890              		.section	.text.vTaskPrioritySet,"ax",%progbits
 891              		.align	2
 892              		.global	vTaskPrioritySet
 893              		.thumb
 894              		.thumb_func
 895              		.type	vTaskPrioritySet, %function
 896              	vTaskPrioritySet:
 897              	.LFB71:
1114:FreeRTOS/tasks.c **** 
1115:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1116:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1117:FreeRTOS/tasks.c **** 
1118:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1119:FreeRTOS/tasks.c **** 
1120:FreeRTOS/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1121:FreeRTOS/tasks.c **** 	{
 898              		.loc 1 1121 0
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 24
 901              		@ frame_needed = 1, uses_anonymous_args = 0
 902 0000 80B5     		push	{r7, lr}
 903              		.cfi_def_cfa_offset 8
 904              		.cfi_offset 7, -8
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 37


 905              		.cfi_offset 14, -4
 906 0002 86B0     		sub	sp, sp, #24
 907              		.cfi_def_cfa_offset 32
 908 0004 00AF     		add	r7, sp, #0
 909              		.cfi_def_cfa_register 7
 910 0006 7860     		str	r0, [r7, #4]
 911 0008 3960     		str	r1, [r7]
1122:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1123:FreeRTOS/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1124:FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 912              		.loc 1 1124 0
 913 000a 0023     		movs	r3, #0
 914 000c 7B61     		str	r3, [r7, #20]
1125:FreeRTOS/tasks.c **** 
1126:FreeRTOS/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1127:FreeRTOS/tasks.c **** 
1128:FreeRTOS/tasks.c **** 		/* Ensure the new priority is valid. */
1129:FreeRTOS/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 915              		.loc 1 1129 0
 916 000e 3B68     		ldr	r3, [r7]
 917 0010 042B     		cmp	r3, #4
 918 0012 01D9     		bls	.L64
1130:FreeRTOS/tasks.c **** 		{
1131:FreeRTOS/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 919              		.loc 1 1131 0
 920 0014 0423     		movs	r3, #4
 921 0016 3B60     		str	r3, [r7]
 922              	.L64:
1132:FreeRTOS/tasks.c **** 		}
1133:FreeRTOS/tasks.c **** 		else
1134:FreeRTOS/tasks.c **** 		{
1135:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1136:FreeRTOS/tasks.c **** 		}
1137:FreeRTOS/tasks.c **** 
1138:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 923              		.loc 1 1138 0
 924 0018 FFF7FEFF 		bl	vPortEnterCritical
1139:FreeRTOS/tasks.c **** 		{
1140:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1141:FreeRTOS/tasks.c **** 			task that is being changed. */
1142:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 925              		.loc 1 1142 0
 926 001c 7B68     		ldr	r3, [r7, #4]
 927 001e 002B     		cmp	r3, #0
 928 0020 02D1     		bne	.L65
 929              		.loc 1 1142 0 is_stmt 0 discriminator 1
 930 0022 404B     		ldr	r3, .L76
 931 0024 1B68     		ldr	r3, [r3]
 932 0026 00E0     		b	.L66
 933              	.L65:
 934              		.loc 1 1142 0 discriminator 2
 935 0028 7B68     		ldr	r3, [r7, #4]
 936              	.L66:
 937              		.loc 1 1142 0 discriminator 4
 938 002a 3B61     		str	r3, [r7, #16]
1143:FreeRTOS/tasks.c **** 
1144:FreeRTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 38


1145:FreeRTOS/tasks.c **** 
1146:FreeRTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1147:FreeRTOS/tasks.c **** 			{
1148:FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 939              		.loc 1 1148 0 is_stmt 1 discriminator 4
 940 002c 3B69     		ldr	r3, [r7, #16]
 941 002e 1B6C     		ldr	r3, [r3, #64]
 942 0030 FB60     		str	r3, [r7, #12]
1149:FreeRTOS/tasks.c **** 			}
1150:FreeRTOS/tasks.c **** 			#else
1151:FreeRTOS/tasks.c **** 			{
1152:FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1153:FreeRTOS/tasks.c **** 			}
1154:FreeRTOS/tasks.c **** 			#endif
1155:FreeRTOS/tasks.c **** 
1156:FreeRTOS/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 943              		.loc 1 1156 0 discriminator 4
 944 0032 FA68     		ldr	r2, [r7, #12]
 945 0034 3B68     		ldr	r3, [r7]
 946 0036 9A42     		cmp	r2, r3
 947 0038 6ED0     		beq	.L67
1157:FreeRTOS/tasks.c **** 			{
1158:FreeRTOS/tasks.c **** 				/* The priority change may have readied a task of higher
1159:FreeRTOS/tasks.c **** 				priority than the calling task. */
1160:FreeRTOS/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 948              		.loc 1 1160 0
 949 003a 3A68     		ldr	r2, [r7]
 950 003c FB68     		ldr	r3, [r7, #12]
 951 003e 9A42     		cmp	r2, r3
 952 0040 0DD9     		bls	.L68
1161:FreeRTOS/tasks.c **** 				{
1162:FreeRTOS/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 953              		.loc 1 1162 0
 954 0042 384B     		ldr	r3, .L76
 955 0044 1B68     		ldr	r3, [r3]
 956 0046 3A69     		ldr	r2, [r7, #16]
 957 0048 9A42     		cmp	r2, r3
 958 004a 0FD0     		beq	.L69
1163:FreeRTOS/tasks.c **** 					{
1164:FreeRTOS/tasks.c **** 						/* The priority of a task other than the currently
1165:FreeRTOS/tasks.c **** 						running task is being raised.  Is the priority being
1166:FreeRTOS/tasks.c **** 						raised above that of the running task? */
1167:FreeRTOS/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 959              		.loc 1 1167 0
 960 004c 354B     		ldr	r3, .L76
 961 004e 1B68     		ldr	r3, [r3]
 962 0050 DA6A     		ldr	r2, [r3, #44]
 963 0052 3B68     		ldr	r3, [r7]
 964 0054 9A42     		cmp	r2, r3
 965 0056 09D8     		bhi	.L69
1168:FreeRTOS/tasks.c **** 						{
1169:FreeRTOS/tasks.c **** 							xYieldRequired = pdTRUE;
 966              		.loc 1 1169 0
 967 0058 0123     		movs	r3, #1
 968 005a 7B61     		str	r3, [r7, #20]
 969 005c 06E0     		b	.L69
 970              	.L68:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 39


1170:FreeRTOS/tasks.c **** 						}
1171:FreeRTOS/tasks.c **** 						else
1172:FreeRTOS/tasks.c **** 						{
1173:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1174:FreeRTOS/tasks.c **** 						}
1175:FreeRTOS/tasks.c **** 					}
1176:FreeRTOS/tasks.c **** 					else
1177:FreeRTOS/tasks.c **** 					{
1178:FreeRTOS/tasks.c **** 						/* The priority of the running task is being raised,
1179:FreeRTOS/tasks.c **** 						but the running task must already be the highest
1180:FreeRTOS/tasks.c **** 						priority task able to run so no yield is required. */
1181:FreeRTOS/tasks.c **** 					}
1182:FreeRTOS/tasks.c **** 				}
1183:FreeRTOS/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 971              		.loc 1 1183 0
 972 005e 314B     		ldr	r3, .L76
 973 0060 1B68     		ldr	r3, [r3]
 974 0062 3A69     		ldr	r2, [r7, #16]
 975 0064 9A42     		cmp	r2, r3
 976 0066 01D1     		bne	.L69
1184:FreeRTOS/tasks.c **** 				{
1185:FreeRTOS/tasks.c **** 					/* Setting the priority of the running task down means
1186:FreeRTOS/tasks.c **** 					there may now be another task of higher priority that
1187:FreeRTOS/tasks.c **** 					is ready to execute. */
1188:FreeRTOS/tasks.c **** 					xYieldRequired = pdTRUE;
 977              		.loc 1 1188 0
 978 0068 0123     		movs	r3, #1
 979 006a 7B61     		str	r3, [r7, #20]
 980              	.L69:
1189:FreeRTOS/tasks.c **** 				}
1190:FreeRTOS/tasks.c **** 				else
1191:FreeRTOS/tasks.c **** 				{
1192:FreeRTOS/tasks.c **** 					/* Setting the priority of any other task down does not
1193:FreeRTOS/tasks.c **** 					require a yield as the running task must be above the
1194:FreeRTOS/tasks.c **** 					new priority of the task being modified. */
1195:FreeRTOS/tasks.c **** 				}
1196:FreeRTOS/tasks.c **** 
1197:FreeRTOS/tasks.c **** 				/* Remember the ready list the task might be referenced from
1198:FreeRTOS/tasks.c **** 				before its uxPriority member is changed so the
1199:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1200:FreeRTOS/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 981              		.loc 1 1200 0
 982 006c 3B69     		ldr	r3, [r7, #16]
 983 006e DB6A     		ldr	r3, [r3, #44]
 984 0070 BB60     		str	r3, [r7, #8]
1201:FreeRTOS/tasks.c **** 
1202:FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1203:FreeRTOS/tasks.c **** 				{
1204:FreeRTOS/tasks.c **** 					/* Only change the priority being used if the task is not
1205:FreeRTOS/tasks.c **** 					currently using an inherited priority. */
1206:FreeRTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 985              		.loc 1 1206 0
 986 0072 3B69     		ldr	r3, [r7, #16]
 987 0074 1A6C     		ldr	r2, [r3, #64]
 988 0076 3B69     		ldr	r3, [r7, #16]
 989 0078 DB6A     		ldr	r3, [r3, #44]
 990 007a 9A42     		cmp	r2, r3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 40


 991 007c 02D1     		bne	.L70
1207:FreeRTOS/tasks.c **** 					{
1208:FreeRTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 992              		.loc 1 1208 0
 993 007e 3B69     		ldr	r3, [r7, #16]
 994 0080 3A68     		ldr	r2, [r7]
 995 0082 DA62     		str	r2, [r3, #44]
 996              	.L70:
1209:FreeRTOS/tasks.c **** 					}
1210:FreeRTOS/tasks.c **** 					else
1211:FreeRTOS/tasks.c **** 					{
1212:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1213:FreeRTOS/tasks.c **** 					}
1214:FreeRTOS/tasks.c **** 
1215:FreeRTOS/tasks.c **** 					/* The base priority gets set whatever. */
1216:FreeRTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 997              		.loc 1 1216 0
 998 0084 3B69     		ldr	r3, [r7, #16]
 999 0086 3A68     		ldr	r2, [r7]
 1000 0088 1A64     		str	r2, [r3, #64]
1217:FreeRTOS/tasks.c **** 				}
1218:FreeRTOS/tasks.c **** 				#else
1219:FreeRTOS/tasks.c **** 				{
1220:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1221:FreeRTOS/tasks.c **** 				}
1222:FreeRTOS/tasks.c **** 				#endif
1223:FreeRTOS/tasks.c **** 
1224:FreeRTOS/tasks.c **** 				/* Only reset the event list item value if the value is not
1225:FreeRTOS/tasks.c **** 				being used for anything else. */
1226:FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1001              		.loc 1 1226 0
 1002 008a 3B69     		ldr	r3, [r7, #16]
 1003 008c 9B69     		ldr	r3, [r3, #24]
 1004 008e 002B     		cmp	r3, #0
 1005 0090 04DB     		blt	.L71
1227:FreeRTOS/tasks.c **** 				{
1228:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1006              		.loc 1 1228 0
 1007 0092 3B68     		ldr	r3, [r7]
 1008 0094 C3F10502 		rsb	r2, r3, #5
 1009 0098 3B69     		ldr	r3, [r7, #16]
 1010 009a 9A61     		str	r2, [r3, #24]
 1011              	.L71:
1229:FreeRTOS/tasks.c **** 				}
1230:FreeRTOS/tasks.c **** 				else
1231:FreeRTOS/tasks.c **** 				{
1232:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1233:FreeRTOS/tasks.c **** 				}
1234:FreeRTOS/tasks.c **** 
1235:FreeRTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1236:FreeRTOS/tasks.c **** 				nothing more than change it's priority variable. However, if
1237:FreeRTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1238:FreeRTOS/tasks.c **** 				in the list appropriate to its new priority. */
1239:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGeneri
 1012              		.loc 1 1239 0
 1013 009c 3B69     		ldr	r3, [r7, #16]
 1014 009e 5969     		ldr	r1, [r3, #20]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 41


 1015 00a0 BA68     		ldr	r2, [r7, #8]
 1016 00a2 1346     		mov	r3, r2
 1017 00a4 9B00     		lsls	r3, r3, #2
 1018 00a6 1344     		add	r3, r3, r2
 1019 00a8 9B00     		lsls	r3, r3, #2
 1020 00aa 1F4A     		ldr	r2, .L76+4
 1021 00ac 1344     		add	r3, r3, r2
 1022 00ae 9942     		cmp	r1, r3
 1023 00b0 01D1     		bne	.L72
 1024              		.loc 1 1239 0 is_stmt 0 discriminator 1
 1025 00b2 0123     		movs	r3, #1
 1026 00b4 00E0     		b	.L73
 1027              	.L72:
 1028              		.loc 1 1239 0 discriminator 2
 1029 00b6 0023     		movs	r3, #0
 1030              	.L73:
 1031              		.loc 1 1239 0 discriminator 4
 1032 00b8 002B     		cmp	r3, #0
 1033 00ba 28D0     		beq	.L74
1240:FreeRTOS/tasks.c **** 				{
1241:FreeRTOS/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1242:FreeRTOS/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1243:FreeRTOS/tasks.c **** 					can do this even if the scheduler is suspended. */
1244:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 1034              		.loc 1 1244 0 is_stmt 1
 1035 00bc 3B69     		ldr	r3, [r7, #16]
 1036 00be 0433     		adds	r3, r3, #4
 1037 00c0 1846     		mov	r0, r3
 1038 00c2 FFF7FEFF 		bl	uxListRemove
 1039 00c6 0346     		mov	r3, r0
 1040 00c8 002B     		cmp	r3, #0
 1041 00ca 09D1     		bne	.L75
1245:FreeRTOS/tasks.c **** 					{
1246:FreeRTOS/tasks.c **** 						/* It is known that the task is in its ready list so
1247:FreeRTOS/tasks.c **** 						there is no need to check again and the port level
1248:FreeRTOS/tasks.c **** 						reset macro can be called directly. */
1249:FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1042              		.loc 1 1249 0
 1043 00cc 0122     		movs	r2, #1
 1044 00ce BB68     		ldr	r3, [r7, #8]
 1045 00d0 02FA03F3 		lsl	r3, r2, r3
 1046 00d4 DA43     		mvns	r2, r3
 1047 00d6 154B     		ldr	r3, .L76+8
 1048 00d8 1B68     		ldr	r3, [r3]
 1049 00da 1340     		ands	r3, r3, r2
 1050 00dc 134A     		ldr	r2, .L76+8
 1051 00de 1360     		str	r3, [r2]
 1052              	.L75:
1250:FreeRTOS/tasks.c **** 					}
1251:FreeRTOS/tasks.c **** 					else
1252:FreeRTOS/tasks.c **** 					{
1253:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1254:FreeRTOS/tasks.c **** 					}
1255:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1053              		.loc 1 1255 0
 1054 00e0 3B69     		ldr	r3, [r7, #16]
 1055 00e2 DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 42


 1056 00e4 0122     		movs	r2, #1
 1057 00e6 9A40     		lsls	r2, r2, r3
 1058 00e8 104B     		ldr	r3, .L76+8
 1059 00ea 1B68     		ldr	r3, [r3]
 1060 00ec 1343     		orrs	r3, r3, r2
 1061 00ee 0F4A     		ldr	r2, .L76+8
 1062 00f0 1360     		str	r3, [r2]
 1063 00f2 3B69     		ldr	r3, [r7, #16]
 1064 00f4 DA6A     		ldr	r2, [r3, #44]
 1065 00f6 1346     		mov	r3, r2
 1066 00f8 9B00     		lsls	r3, r3, #2
 1067 00fa 1344     		add	r3, r3, r2
 1068 00fc 9B00     		lsls	r3, r3, #2
 1069 00fe 0A4A     		ldr	r2, .L76+4
 1070 0100 1A44     		add	r2, r2, r3
 1071 0102 3B69     		ldr	r3, [r7, #16]
 1072 0104 0433     		adds	r3, r3, #4
 1073 0106 1946     		mov	r1, r3
 1074 0108 1046     		mov	r0, r2
 1075 010a FFF7FEFF 		bl	vListInsertEnd
 1076              	.L74:
1256:FreeRTOS/tasks.c **** 				}
1257:FreeRTOS/tasks.c **** 				else
1258:FreeRTOS/tasks.c **** 				{
1259:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1260:FreeRTOS/tasks.c **** 				}
1261:FreeRTOS/tasks.c **** 
1262:FreeRTOS/tasks.c **** 				if( xYieldRequired == pdTRUE )
 1077              		.loc 1 1262 0
 1078 010e 7B69     		ldr	r3, [r7, #20]
 1079 0110 012B     		cmp	r3, #1
 1080 0112 01D1     		bne	.L67
1263:FreeRTOS/tasks.c **** 				{
1264:FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1081              		.loc 1 1264 0
 1082 0114 FFF7FEFF 		bl	vPortYield
 1083              	.L67:
1265:FreeRTOS/tasks.c **** 				}
1266:FreeRTOS/tasks.c **** 				else
1267:FreeRTOS/tasks.c **** 				{
1268:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1269:FreeRTOS/tasks.c **** 				}
1270:FreeRTOS/tasks.c **** 
1271:FreeRTOS/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1272:FreeRTOS/tasks.c **** 				optimised task selection is not being used. */
1273:FreeRTOS/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1274:FreeRTOS/tasks.c **** 			}
1275:FreeRTOS/tasks.c **** 		}
1276:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1084              		.loc 1 1276 0
 1085 0118 FFF7FEFF 		bl	vPortExitCritical
1277:FreeRTOS/tasks.c **** 	}
 1086              		.loc 1 1277 0
 1087 011c 00BF     		nop
 1088 011e 1837     		adds	r7, r7, #24
 1089              		.cfi_def_cfa_offset 8
 1090 0120 BD46     		mov	sp, r7
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 43


 1091              		.cfi_def_cfa_register 13
 1092              		@ sp needed
 1093 0122 80BD     		pop	{r7, pc}
 1094              	.L77:
 1095              		.align	2
 1096              	.L76:
 1097 0124 00000000 		.word	pxCurrentTCB
 1098 0128 04000000 		.word	pxReadyTasksLists
 1099 012c E0000000 		.word	uxTopReadyPriority
 1100              		.cfi_endproc
 1101              	.LFE71:
 1102              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1103              		.section	.text.vTaskSuspend,"ax",%progbits
 1104              		.align	2
 1105              		.global	vTaskSuspend
 1106              		.thumb
 1107              		.thumb_func
 1108              		.type	vTaskSuspend, %function
 1109              	vTaskSuspend:
 1110              	.LFB72:
1278:FreeRTOS/tasks.c **** 
1279:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1280:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1281:FreeRTOS/tasks.c **** 
1282:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1283:FreeRTOS/tasks.c **** 
1284:FreeRTOS/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1285:FreeRTOS/tasks.c **** 	{
 1111              		.loc 1 1285 0
 1112              		.cfi_startproc
 1113              		@ args = 0, pretend = 0, frame = 16
 1114              		@ frame_needed = 1, uses_anonymous_args = 0
 1115 0000 80B5     		push	{r7, lr}
 1116              		.cfi_def_cfa_offset 8
 1117              		.cfi_offset 7, -8
 1118              		.cfi_offset 14, -4
 1119 0002 84B0     		sub	sp, sp, #16
 1120              		.cfi_def_cfa_offset 24
 1121 0004 00AF     		add	r7, sp, #0
 1122              		.cfi_def_cfa_register 7
 1123 0006 7860     		str	r0, [r7, #4]
1286:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1287:FreeRTOS/tasks.c **** 
1288:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 1124              		.loc 1 1288 0
 1125 0008 FFF7FEFF 		bl	vPortEnterCritical
1289:FreeRTOS/tasks.c **** 		{
1290:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the running task that is
1291:FreeRTOS/tasks.c **** 			being suspended. */
1292:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1126              		.loc 1 1292 0
 1127 000c 7B68     		ldr	r3, [r7, #4]
 1128 000e 002B     		cmp	r3, #0
 1129 0010 02D1     		bne	.L79
 1130              		.loc 1 1292 0 is_stmt 0 discriminator 1
 1131 0012 2D4B     		ldr	r3, .L90
 1132 0014 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 44


 1133 0016 00E0     		b	.L80
 1134              	.L79:
 1135              		.loc 1 1292 0 discriminator 2
 1136 0018 7B68     		ldr	r3, [r7, #4]
 1137              	.L80:
 1138              		.loc 1 1292 0 discriminator 4
 1139 001a FB60     		str	r3, [r7, #12]
1293:FreeRTOS/tasks.c **** 
1294:FreeRTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1295:FreeRTOS/tasks.c **** 
1296:FreeRTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1297:FreeRTOS/tasks.c **** 			suspended list. */
1298:FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 1140              		.loc 1 1298 0 is_stmt 1 discriminator 4
 1141 001c FB68     		ldr	r3, [r7, #12]
 1142 001e 0433     		adds	r3, r3, #4
 1143 0020 1846     		mov	r0, r3
 1144 0022 FFF7FEFF 		bl	uxListRemove
 1145 0026 0346     		mov	r3, r0
 1146 0028 002B     		cmp	r3, #0
 1147 002a 15D1     		bne	.L81
1299:FreeRTOS/tasks.c **** 			{
1300:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1148              		.loc 1 1300 0
 1149 002c FB68     		ldr	r3, [r7, #12]
 1150 002e DA6A     		ldr	r2, [r3, #44]
 1151 0030 2649     		ldr	r1, .L90+4
 1152 0032 1346     		mov	r3, r2
 1153 0034 9B00     		lsls	r3, r3, #2
 1154 0036 1344     		add	r3, r3, r2
 1155 0038 9B00     		lsls	r3, r3, #2
 1156 003a 0B44     		add	r3, r3, r1
 1157 003c 1B68     		ldr	r3, [r3]
 1158 003e 002B     		cmp	r3, #0
 1159 0040 0AD1     		bne	.L81
 1160              		.loc 1 1300 0 is_stmt 0 discriminator 1
 1161 0042 FB68     		ldr	r3, [r7, #12]
 1162 0044 DB6A     		ldr	r3, [r3, #44]
 1163 0046 0122     		movs	r2, #1
 1164 0048 02FA03F3 		lsl	r3, r2, r3
 1165 004c DA43     		mvns	r2, r3
 1166 004e 204B     		ldr	r3, .L90+8
 1167 0050 1B68     		ldr	r3, [r3]
 1168 0052 1340     		ands	r3, r3, r2
 1169 0054 1E4A     		ldr	r2, .L90+8
 1170 0056 1360     		str	r3, [r2]
 1171              	.L81:
1301:FreeRTOS/tasks.c **** 			}
1302:FreeRTOS/tasks.c **** 			else
1303:FreeRTOS/tasks.c **** 			{
1304:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1305:FreeRTOS/tasks.c **** 			}
1306:FreeRTOS/tasks.c **** 
1307:FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1308:FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1172              		.loc 1 1308 0 is_stmt 1
 1173 0058 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 45


 1174 005a 9B6A     		ldr	r3, [r3, #40]
 1175 005c 002B     		cmp	r3, #0
 1176 005e 04D0     		beq	.L83
1309:FreeRTOS/tasks.c **** 			{
1310:FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1177              		.loc 1 1310 0
 1178 0060 FB68     		ldr	r3, [r7, #12]
 1179 0062 1833     		adds	r3, r3, #24
 1180 0064 1846     		mov	r0, r3
 1181 0066 FFF7FEFF 		bl	uxListRemove
 1182              	.L83:
1311:FreeRTOS/tasks.c **** 			}
1312:FreeRTOS/tasks.c **** 			else
1313:FreeRTOS/tasks.c **** 			{
1314:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1315:FreeRTOS/tasks.c **** 			}
1316:FreeRTOS/tasks.c **** 
1317:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 1183              		.loc 1 1317 0
 1184 006a FB68     		ldr	r3, [r7, #12]
 1185 006c 0433     		adds	r3, r3, #4
 1186 006e 1946     		mov	r1, r3
 1187 0070 1848     		ldr	r0, .L90+12
 1188 0072 FFF7FEFF 		bl	vListInsertEnd
1318:FreeRTOS/tasks.c **** 		}
1319:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1189              		.loc 1 1319 0
 1190 0076 FFF7FEFF 		bl	vPortExitCritical
1320:FreeRTOS/tasks.c **** 
1321:FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1191              		.loc 1 1321 0
 1192 007a 134B     		ldr	r3, .L90
 1193 007c 1B68     		ldr	r3, [r3]
 1194 007e FA68     		ldr	r2, [r7, #12]
 1195 0080 9A42     		cmp	r2, r3
 1196 0082 13D1     		bne	.L84
1322:FreeRTOS/tasks.c **** 		{
1323:FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1197              		.loc 1 1323 0
 1198 0084 144B     		ldr	r3, .L90+16
 1199 0086 1B68     		ldr	r3, [r3]
 1200 0088 002B     		cmp	r3, #0
 1201 008a 02D0     		beq	.L85
1324:FreeRTOS/tasks.c **** 			{
1325:FreeRTOS/tasks.c **** 				/* The current task has just been suspended. */
1326:FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1327:FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 1202              		.loc 1 1327 0
 1203 008c FFF7FEFF 		bl	vPortYield
1328:FreeRTOS/tasks.c **** 			}
1329:FreeRTOS/tasks.c **** 			else
1330:FreeRTOS/tasks.c **** 			{
1331:FreeRTOS/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1332:FreeRTOS/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1333:FreeRTOS/tasks.c **** 				must be adjusted to point to a different task. */
1334:FreeRTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1335:FreeRTOS/tasks.c **** 				{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 46


1336:FreeRTOS/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1337:FreeRTOS/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1338:FreeRTOS/tasks.c **** 					be set to point to it no matter what its relative priority
1339:FreeRTOS/tasks.c **** 					is. */
1340:FreeRTOS/tasks.c **** 					pxCurrentTCB = NULL;
1341:FreeRTOS/tasks.c **** 				}
1342:FreeRTOS/tasks.c **** 				else
1343:FreeRTOS/tasks.c **** 				{
1344:FreeRTOS/tasks.c **** 					vTaskSwitchContext();
1345:FreeRTOS/tasks.c **** 				}
1346:FreeRTOS/tasks.c **** 			}
1347:FreeRTOS/tasks.c **** 		}
1348:FreeRTOS/tasks.c **** 		else
1349:FreeRTOS/tasks.c **** 		{
1350:FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1351:FreeRTOS/tasks.c **** 			{
1352:FreeRTOS/tasks.c **** 				/* A task other than the currently running task was suspended,
1353:FreeRTOS/tasks.c **** 				reset the next expected unblock time in case it referred to the
1354:FreeRTOS/tasks.c **** 				task that is now in the Suspended state. */
1355:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
1356:FreeRTOS/tasks.c **** 				{
1357:FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
1358:FreeRTOS/tasks.c **** 				}
1359:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
1360:FreeRTOS/tasks.c **** 			}
1361:FreeRTOS/tasks.c **** 			else
1362:FreeRTOS/tasks.c **** 			{
1363:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1364:FreeRTOS/tasks.c **** 			}
1365:FreeRTOS/tasks.c **** 		}
1366:FreeRTOS/tasks.c **** 	}
 1204              		.loc 1 1366 0
 1205 0090 16E0     		b	.L89
 1206              	.L85:
1334:FreeRTOS/tasks.c **** 				{
 1207              		.loc 1 1334 0
 1208 0092 104B     		ldr	r3, .L90+12
 1209 0094 1A68     		ldr	r2, [r3]
 1210 0096 114B     		ldr	r3, .L90+20
 1211 0098 1B68     		ldr	r3, [r3]
 1212 009a 9A42     		cmp	r2, r3
 1213 009c 03D1     		bne	.L87
1340:FreeRTOS/tasks.c **** 				}
 1214              		.loc 1 1340 0
 1215 009e 0A4B     		ldr	r3, .L90
 1216 00a0 0022     		movs	r2, #0
 1217 00a2 1A60     		str	r2, [r3]
 1218              		.loc 1 1366 0
 1219 00a4 0CE0     		b	.L89
 1220              	.L87:
1344:FreeRTOS/tasks.c **** 				}
 1221              		.loc 1 1344 0
 1222 00a6 FFF7FEFF 		bl	vTaskSwitchContext
 1223              		.loc 1 1366 0
 1224 00aa 09E0     		b	.L89
 1225              	.L84:
1350:FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 47


 1226              		.loc 1 1350 0
 1227 00ac 0A4B     		ldr	r3, .L90+16
 1228 00ae 1B68     		ldr	r3, [r3]
 1229 00b0 002B     		cmp	r3, #0
 1230 00b2 05D0     		beq	.L89
1355:FreeRTOS/tasks.c **** 				{
 1231              		.loc 1 1355 0
 1232 00b4 FFF7FEFF 		bl	vPortEnterCritical
1357:FreeRTOS/tasks.c **** 				}
 1233              		.loc 1 1357 0
 1234 00b8 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1359:FreeRTOS/tasks.c **** 			}
 1235              		.loc 1 1359 0
 1236 00bc FFF7FEFF 		bl	vPortExitCritical
 1237              	.L89:
 1238              		.loc 1 1366 0
 1239 00c0 00BF     		nop
 1240 00c2 1037     		adds	r7, r7, #16
 1241              		.cfi_def_cfa_offset 8
 1242 00c4 BD46     		mov	sp, r7
 1243              		.cfi_def_cfa_register 13
 1244              		@ sp needed
 1245 00c6 80BD     		pop	{r7, pc}
 1246              	.L91:
 1247              		.align	2
 1248              	.L90:
 1249 00c8 00000000 		.word	pxCurrentTCB
 1250 00cc 04000000 		.word	pxReadyTasksLists
 1251 00d0 E0000000 		.word	uxTopReadyPriority
 1252 00d4 C4000000 		.word	xSuspendedTaskList
 1253 00d8 E4000000 		.word	xSchedulerRunning
 1254 00dc D8000000 		.word	uxCurrentNumberOfTasks
 1255              		.cfi_endproc
 1256              	.LFE72:
 1257              		.size	vTaskSuspend, .-vTaskSuspend
 1258              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1259              		.align	2
 1260              		.thumb
 1261              		.thumb_func
 1262              		.type	prvTaskIsTaskSuspended, %function
 1263              	prvTaskIsTaskSuspended:
 1264              	.LFB73:
1367:FreeRTOS/tasks.c **** 
1368:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1369:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1370:FreeRTOS/tasks.c **** 
1371:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1372:FreeRTOS/tasks.c **** 
1373:FreeRTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1374:FreeRTOS/tasks.c **** 	{
 1265              		.loc 1 1374 0
 1266              		.cfi_startproc
 1267              		@ args = 0, pretend = 0, frame = 16
 1268              		@ frame_needed = 1, uses_anonymous_args = 0
 1269              		@ link register save eliminated.
 1270 0000 80B4     		push	{r7}
 1271              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 48


 1272              		.cfi_offset 7, -4
 1273 0002 85B0     		sub	sp, sp, #20
 1274              		.cfi_def_cfa_offset 24
 1275 0004 00AF     		add	r7, sp, #0
 1276              		.cfi_def_cfa_register 7
 1277 0006 7860     		str	r0, [r7, #4]
1375:FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1278              		.loc 1 1375 0
 1279 0008 0023     		movs	r3, #0
 1280 000a FB60     		str	r3, [r7, #12]
1376:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1281              		.loc 1 1376 0
 1282 000c 7B68     		ldr	r3, [r7, #4]
 1283 000e BB60     		str	r3, [r7, #8]
1377:FreeRTOS/tasks.c **** 
1378:FreeRTOS/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1379:FreeRTOS/tasks.c **** 		section. */
1380:FreeRTOS/tasks.c **** 
1381:FreeRTOS/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1382:FreeRTOS/tasks.c **** 		configASSERT( xTask );
1383:FreeRTOS/tasks.c **** 
1384:FreeRTOS/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1385:FreeRTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 1284              		.loc 1 1385 0
 1285 0010 BB68     		ldr	r3, [r7, #8]
 1286 0012 5B69     		ldr	r3, [r3, #20]
 1287 0014 0E4A     		ldr	r2, .L99
 1288 0016 9342     		cmp	r3, r2
 1289 0018 01D1     		bne	.L93
 1290              		.loc 1 1385 0 is_stmt 0 discriminator 1
 1291 001a 0123     		movs	r3, #1
 1292 001c 00E0     		b	.L94
 1293              	.L93:
 1294              		.loc 1 1385 0 discriminator 2
 1295 001e 0023     		movs	r3, #0
 1296              	.L94:
 1297              		.loc 1 1385 0 discriminator 4
 1298 0020 002B     		cmp	r3, #0
 1299 0022 0FD0     		beq	.L95
1386:FreeRTOS/tasks.c **** 		{
1387:FreeRTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1388:FreeRTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1300              		.loc 1 1388 0 is_stmt 1
 1301 0024 BB68     		ldr	r3, [r7, #8]
 1302 0026 9B6A     		ldr	r3, [r3, #40]
 1303 0028 0A4A     		ldr	r2, .L99+4
 1304 002a 9342     		cmp	r3, r2
 1305 002c 0AD0     		beq	.L95
1389:FreeRTOS/tasks.c **** 			{
1390:FreeRTOS/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1391:FreeRTOS/tasks.c **** 				state, or because is is blocked with no timeout? */
1392:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 1306              		.loc 1 1392 0
 1307 002e BB68     		ldr	r3, [r7, #8]
 1308 0030 9B6A     		ldr	r3, [r3, #40]
 1309 0032 002B     		cmp	r3, #0
 1310 0034 01D1     		bne	.L96
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 49


 1311              		.loc 1 1392 0 is_stmt 0 discriminator 1
 1312 0036 0123     		movs	r3, #1
 1313 0038 00E0     		b	.L97
 1314              	.L96:
 1315              		.loc 1 1392 0 discriminator 2
 1316 003a 0023     		movs	r3, #0
 1317              	.L97:
 1318              		.loc 1 1392 0 discriminator 4
 1319 003c 002B     		cmp	r3, #0
 1320 003e 01D0     		beq	.L95
1393:FreeRTOS/tasks.c **** 				{
1394:FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
 1321              		.loc 1 1394 0 is_stmt 1
 1322 0040 0123     		movs	r3, #1
 1323 0042 FB60     		str	r3, [r7, #12]
 1324              	.L95:
1395:FreeRTOS/tasks.c **** 				}
1396:FreeRTOS/tasks.c **** 				else
1397:FreeRTOS/tasks.c **** 				{
1398:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1399:FreeRTOS/tasks.c **** 				}
1400:FreeRTOS/tasks.c **** 			}
1401:FreeRTOS/tasks.c **** 			else
1402:FreeRTOS/tasks.c **** 			{
1403:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1404:FreeRTOS/tasks.c **** 			}
1405:FreeRTOS/tasks.c **** 		}
1406:FreeRTOS/tasks.c **** 		else
1407:FreeRTOS/tasks.c **** 		{
1408:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1409:FreeRTOS/tasks.c **** 		}
1410:FreeRTOS/tasks.c **** 
1411:FreeRTOS/tasks.c **** 		return xReturn;
 1325              		.loc 1 1411 0
 1326 0044 FB68     		ldr	r3, [r7, #12]
1412:FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1327              		.loc 1 1412 0
 1328 0046 1846     		mov	r0, r3
 1329 0048 1437     		adds	r7, r7, #20
 1330              		.cfi_def_cfa_offset 4
 1331 004a BD46     		mov	sp, r7
 1332              		.cfi_def_cfa_register 13
 1333              		@ sp needed
 1334 004c 80BC     		pop	{r7}
 1335              		.cfi_restore 7
 1336              		.cfi_def_cfa_offset 0
 1337 004e 7047     		bx	lr
 1338              	.L100:
 1339              		.align	2
 1340              	.L99:
 1341 0050 C4000000 		.word	xSuspendedTaskList
 1342 0054 98000000 		.word	xPendingReadyList
 1343              		.cfi_endproc
 1344              	.LFE73:
 1345              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
 1346              		.section	.text.vTaskResume,"ax",%progbits
 1347              		.align	2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 50


 1348              		.global	vTaskResume
 1349              		.thumb
 1350              		.thumb_func
 1351              		.type	vTaskResume, %function
 1352              	vTaskResume:
 1353              	.LFB74:
1413:FreeRTOS/tasks.c **** 
1414:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1415:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1416:FreeRTOS/tasks.c **** 
1417:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1418:FreeRTOS/tasks.c **** 
1419:FreeRTOS/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1420:FreeRTOS/tasks.c **** 	{
 1354              		.loc 1 1420 0
 1355              		.cfi_startproc
 1356              		@ args = 0, pretend = 0, frame = 16
 1357              		@ frame_needed = 1, uses_anonymous_args = 0
 1358 0000 80B5     		push	{r7, lr}
 1359              		.cfi_def_cfa_offset 8
 1360              		.cfi_offset 7, -8
 1361              		.cfi_offset 14, -4
 1362 0002 84B0     		sub	sp, sp, #16
 1363              		.cfi_def_cfa_offset 24
 1364 0004 00AF     		add	r7, sp, #0
 1365              		.cfi_def_cfa_register 7
 1366 0006 7860     		str	r0, [r7, #4]
1421:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1367              		.loc 1 1421 0
 1368 0008 7B68     		ldr	r3, [r7, #4]
 1369 000a FB60     		str	r3, [r7, #12]
1422:FreeRTOS/tasks.c **** 
1423:FreeRTOS/tasks.c **** 		/* It does not make sense to resume the calling task. */
1424:FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
1425:FreeRTOS/tasks.c **** 
1426:FreeRTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1427:FreeRTOS/tasks.c **** 		currently executing task. */
1428:FreeRTOS/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1370              		.loc 1 1428 0
 1371 000c FB68     		ldr	r3, [r7, #12]
 1372 000e 002B     		cmp	r3, #0
 1373 0010 33D0     		beq	.L104
 1374              		.loc 1 1428 0 is_stmt 0 discriminator 1
 1375 0012 1C4B     		ldr	r3, .L105
 1376 0014 1B68     		ldr	r3, [r3]
 1377 0016 FA68     		ldr	r2, [r7, #12]
 1378 0018 9A42     		cmp	r2, r3
 1379 001a 2ED0     		beq	.L104
1429:FreeRTOS/tasks.c **** 		{
1430:FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
 1380              		.loc 1 1430 0 is_stmt 1
 1381 001c FFF7FEFF 		bl	vPortEnterCritical
1431:FreeRTOS/tasks.c **** 			{
1432:FreeRTOS/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1382              		.loc 1 1432 0
 1383 0020 F868     		ldr	r0, [r7, #12]
 1384 0022 FFF7FEFF 		bl	prvTaskIsTaskSuspended
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 51


 1385 0026 0346     		mov	r3, r0
 1386 0028 012B     		cmp	r3, #1
 1387 002a 24D1     		bne	.L103
1433:FreeRTOS/tasks.c **** 				{
1434:FreeRTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
1435:FreeRTOS/tasks.c **** 
1436:FreeRTOS/tasks.c **** 					/* As we are in a critical section we can access the ready
1437:FreeRTOS/tasks.c **** 					lists even if the scheduler is suspended. */
1438:FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 1388              		.loc 1 1438 0
 1389 002c FB68     		ldr	r3, [r7, #12]
 1390 002e 0433     		adds	r3, r3, #4
 1391 0030 1846     		mov	r0, r3
 1392 0032 FFF7FEFF 		bl	uxListRemove
1439:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1393              		.loc 1 1439 0
 1394 0036 FB68     		ldr	r3, [r7, #12]
 1395 0038 DB6A     		ldr	r3, [r3, #44]
 1396 003a 0122     		movs	r2, #1
 1397 003c 9A40     		lsls	r2, r2, r3
 1398 003e 124B     		ldr	r3, .L105+4
 1399 0040 1B68     		ldr	r3, [r3]
 1400 0042 1343     		orrs	r3, r3, r2
 1401 0044 104A     		ldr	r2, .L105+4
 1402 0046 1360     		str	r3, [r2]
 1403 0048 FB68     		ldr	r3, [r7, #12]
 1404 004a DA6A     		ldr	r2, [r3, #44]
 1405 004c 1346     		mov	r3, r2
 1406 004e 9B00     		lsls	r3, r3, #2
 1407 0050 1344     		add	r3, r3, r2
 1408 0052 9B00     		lsls	r3, r3, #2
 1409 0054 0D4A     		ldr	r2, .L105+8
 1410 0056 1A44     		add	r2, r2, r3
 1411 0058 FB68     		ldr	r3, [r7, #12]
 1412 005a 0433     		adds	r3, r3, #4
 1413 005c 1946     		mov	r1, r3
 1414 005e 1046     		mov	r0, r2
 1415 0060 FFF7FEFF 		bl	vListInsertEnd
1440:FreeRTOS/tasks.c **** 
1441:FreeRTOS/tasks.c **** 					/* We may have just resumed a higher priority task. */
1442:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1416              		.loc 1 1442 0
 1417 0064 FB68     		ldr	r3, [r7, #12]
 1418 0066 DA6A     		ldr	r2, [r3, #44]
 1419 0068 064B     		ldr	r3, .L105
 1420 006a 1B68     		ldr	r3, [r3]
 1421 006c DB6A     		ldr	r3, [r3, #44]
 1422 006e 9A42     		cmp	r2, r3
 1423 0070 01D3     		bcc	.L103
1443:FreeRTOS/tasks.c **** 					{
1444:FreeRTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1445:FreeRTOS/tasks.c **** 						but will leave the lists in the correct state for the
1446:FreeRTOS/tasks.c **** 						next yield. */
1447:FreeRTOS/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1424              		.loc 1 1447 0
 1425 0072 FFF7FEFF 		bl	vPortYield
 1426              	.L103:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 52


1448:FreeRTOS/tasks.c **** 					}
1449:FreeRTOS/tasks.c **** 					else
1450:FreeRTOS/tasks.c **** 					{
1451:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1452:FreeRTOS/tasks.c **** 					}
1453:FreeRTOS/tasks.c **** 				}
1454:FreeRTOS/tasks.c **** 				else
1455:FreeRTOS/tasks.c **** 				{
1456:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1457:FreeRTOS/tasks.c **** 				}
1458:FreeRTOS/tasks.c **** 			}
1459:FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
 1427              		.loc 1 1459 0
 1428 0076 FFF7FEFF 		bl	vPortExitCritical
 1429              	.L104:
1460:FreeRTOS/tasks.c **** 		}
1461:FreeRTOS/tasks.c **** 		else
1462:FreeRTOS/tasks.c **** 		{
1463:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1464:FreeRTOS/tasks.c **** 		}
1465:FreeRTOS/tasks.c **** 	}
 1430              		.loc 1 1465 0
 1431 007a 00BF     		nop
 1432 007c 1037     		adds	r7, r7, #16
 1433              		.cfi_def_cfa_offset 8
 1434 007e BD46     		mov	sp, r7
 1435              		.cfi_def_cfa_register 13
 1436              		@ sp needed
 1437 0080 80BD     		pop	{r7, pc}
 1438              	.L106:
 1439 0082 00BF     		.align	2
 1440              	.L105:
 1441 0084 00000000 		.word	pxCurrentTCB
 1442 0088 E0000000 		.word	uxTopReadyPriority
 1443 008c 04000000 		.word	pxReadyTasksLists
 1444              		.cfi_endproc
 1445              	.LFE74:
 1446              		.size	vTaskResume, .-vTaskResume
 1447              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1448              		.align	2
 1449              		.global	xTaskResumeFromISR
 1450              		.thumb
 1451              		.thumb_func
 1452              		.type	xTaskResumeFromISR, %function
 1453              	xTaskResumeFromISR:
 1454              	.LFB75:
1466:FreeRTOS/tasks.c **** 
1467:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1468:FreeRTOS/tasks.c **** 
1469:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1470:FreeRTOS/tasks.c **** 
1471:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1472:FreeRTOS/tasks.c **** 
1473:FreeRTOS/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1474:FreeRTOS/tasks.c **** 	{
 1455              		.loc 1 1474 0
 1456              		.cfi_startproc
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 53


 1457              		@ args = 0, pretend = 0, frame = 24
 1458              		@ frame_needed = 1, uses_anonymous_args = 0
 1459 0000 80B5     		push	{r7, lr}
 1460              		.cfi_def_cfa_offset 8
 1461              		.cfi_offset 7, -8
 1462              		.cfi_offset 14, -4
 1463 0002 86B0     		sub	sp, sp, #24
 1464              		.cfi_def_cfa_offset 32
 1465 0004 00AF     		add	r7, sp, #0
 1466              		.cfi_def_cfa_register 7
 1467 0006 7860     		str	r0, [r7, #4]
1475:FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1468              		.loc 1 1475 0
 1469 0008 0023     		movs	r3, #0
 1470 000a 7B61     		str	r3, [r7, #20]
1476:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1471              		.loc 1 1476 0
 1472 000c 7B68     		ldr	r3, [r7, #4]
 1473 000e 3B61     		str	r3, [r7, #16]
1477:FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1478:FreeRTOS/tasks.c **** 
1479:FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
1480:FreeRTOS/tasks.c **** 
1481:FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1482:FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1483:FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1484:FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1485:FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1486:FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1487:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1488:FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1489:FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1490:FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1491:FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1492:FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1493:FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1494:FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1495:FreeRTOS/tasks.c **** 		provided on the following link:
1496:FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1497:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1498:FreeRTOS/tasks.c **** 
1499:FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1474              		.loc 1 1499 0
 1475 0010 FFF7FEFF 		bl	ulPortSetInterruptMask
 1476 0014 F860     		str	r0, [r7, #12]
1500:FreeRTOS/tasks.c **** 		{
1501:FreeRTOS/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1477              		.loc 1 1501 0
 1478 0016 3869     		ldr	r0, [r7, #16]
 1479 0018 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1480 001c 0346     		mov	r3, r0
 1481 001e 012B     		cmp	r3, #1
 1482 0020 2FD1     		bne	.L108
1502:FreeRTOS/tasks.c **** 			{
1503:FreeRTOS/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1504:FreeRTOS/tasks.c **** 
1505:FreeRTOS/tasks.c **** 				/* Check the ready lists can be accessed. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 54


1506:FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1483              		.loc 1 1506 0
 1484 0022 1C4B     		ldr	r3, .L113
 1485 0024 1B68     		ldr	r3, [r3]
 1486 0026 002B     		cmp	r3, #0
 1487 0028 25D1     		bne	.L109
1507:FreeRTOS/tasks.c **** 				{
1508:FreeRTOS/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1509:FreeRTOS/tasks.c **** 					suspended list to the ready list directly. */
1510:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1488              		.loc 1 1510 0
 1489 002a 3B69     		ldr	r3, [r7, #16]
 1490 002c DA6A     		ldr	r2, [r3, #44]
 1491 002e 1A4B     		ldr	r3, .L113+4
 1492 0030 1B68     		ldr	r3, [r3]
 1493 0032 DB6A     		ldr	r3, [r3, #44]
 1494 0034 9A42     		cmp	r2, r3
 1495 0036 01D3     		bcc	.L110
1511:FreeRTOS/tasks.c **** 					{
1512:FreeRTOS/tasks.c **** 						xYieldRequired = pdTRUE;
 1496              		.loc 1 1512 0
 1497 0038 0123     		movs	r3, #1
 1498 003a 7B61     		str	r3, [r7, #20]
 1499              	.L110:
1513:FreeRTOS/tasks.c **** 					}
1514:FreeRTOS/tasks.c **** 					else
1515:FreeRTOS/tasks.c **** 					{
1516:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1517:FreeRTOS/tasks.c **** 					}
1518:FreeRTOS/tasks.c **** 
1519:FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 1500              		.loc 1 1519 0
 1501 003c 3B69     		ldr	r3, [r7, #16]
 1502 003e 0433     		adds	r3, r3, #4
 1503 0040 1846     		mov	r0, r3
 1504 0042 FFF7FEFF 		bl	uxListRemove
1520:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1505              		.loc 1 1520 0
 1506 0046 3B69     		ldr	r3, [r7, #16]
 1507 0048 DB6A     		ldr	r3, [r3, #44]
 1508 004a 0122     		movs	r2, #1
 1509 004c 9A40     		lsls	r2, r2, r3
 1510 004e 134B     		ldr	r3, .L113+8
 1511 0050 1B68     		ldr	r3, [r3]
 1512 0052 1343     		orrs	r3, r3, r2
 1513 0054 114A     		ldr	r2, .L113+8
 1514 0056 1360     		str	r3, [r2]
 1515 0058 3B69     		ldr	r3, [r7, #16]
 1516 005a DA6A     		ldr	r2, [r3, #44]
 1517 005c 1346     		mov	r3, r2
 1518 005e 9B00     		lsls	r3, r3, #2
 1519 0060 1344     		add	r3, r3, r2
 1520 0062 9B00     		lsls	r3, r3, #2
 1521 0064 0E4A     		ldr	r2, .L113+12
 1522 0066 1A44     		add	r2, r2, r3
 1523 0068 3B69     		ldr	r3, [r7, #16]
 1524 006a 0433     		adds	r3, r3, #4
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 55


 1525 006c 1946     		mov	r1, r3
 1526 006e 1046     		mov	r0, r2
 1527 0070 FFF7FEFF 		bl	vListInsertEnd
 1528 0074 05E0     		b	.L108
 1529              	.L109:
1521:FreeRTOS/tasks.c **** 				}
1522:FreeRTOS/tasks.c **** 				else
1523:FreeRTOS/tasks.c **** 				{
1524:FreeRTOS/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1525:FreeRTOS/tasks.c **** 					is held in the pending ready list until the scheduler is
1526:FreeRTOS/tasks.c **** 					unsuspended. */
1527:FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1530              		.loc 1 1527 0
 1531 0076 3B69     		ldr	r3, [r7, #16]
 1532 0078 1833     		adds	r3, r3, #24
 1533 007a 1946     		mov	r1, r3
 1534 007c 0948     		ldr	r0, .L113+16
 1535 007e FFF7FEFF 		bl	vListInsertEnd
 1536              	.L108:
1528:FreeRTOS/tasks.c **** 				}
1529:FreeRTOS/tasks.c **** 			}
1530:FreeRTOS/tasks.c **** 			else
1531:FreeRTOS/tasks.c **** 			{
1532:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1533:FreeRTOS/tasks.c **** 			}
1534:FreeRTOS/tasks.c **** 		}
1535:FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1537              		.loc 1 1535 0
 1538 0082 F868     		ldr	r0, [r7, #12]
 1539 0084 FFF7FEFF 		bl	vPortClearInterruptMask
1536:FreeRTOS/tasks.c **** 
1537:FreeRTOS/tasks.c **** 		return xYieldRequired;
 1540              		.loc 1 1537 0
 1541 0088 7B69     		ldr	r3, [r7, #20]
1538:FreeRTOS/tasks.c **** 	}
 1542              		.loc 1 1538 0
 1543 008a 1846     		mov	r0, r3
 1544 008c 1837     		adds	r7, r7, #24
 1545              		.cfi_def_cfa_offset 8
 1546 008e BD46     		mov	sp, r7
 1547              		.cfi_def_cfa_register 13
 1548              		@ sp needed
 1549 0090 80BD     		pop	{r7, pc}
 1550              	.L114:
 1551 0092 00BF     		.align	2
 1552              	.L113:
 1553 0094 FC000000 		.word	uxSchedulerSuspended
 1554 0098 00000000 		.word	pxCurrentTCB
 1555 009c E0000000 		.word	uxTopReadyPriority
 1556 00a0 04000000 		.word	pxReadyTasksLists
 1557 00a4 98000000 		.word	xPendingReadyList
 1558              		.cfi_endproc
 1559              	.LFE75:
 1560              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1561              		.section	.rodata
 1562              		.align	2
 1563              	.LC0:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 56


 1564 0000 49444C45 		.ascii	"IDLE\000"
 1564      00
 1565              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1566              		.align	2
 1567              		.global	vTaskStartScheduler
 1568              		.thumb
 1569              		.thumb_func
 1570              		.type	vTaskStartScheduler, %function
 1571              	vTaskStartScheduler:
 1572              	.LFB76:
1539:FreeRTOS/tasks.c **** 
1540:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1541:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1542:FreeRTOS/tasks.c **** 
1543:FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1544:FreeRTOS/tasks.c **** {
 1573              		.loc 1 1544 0
 1574              		.cfi_startproc
 1575              		@ args = 0, pretend = 0, frame = 8
 1576              		@ frame_needed = 1, uses_anonymous_args = 0
 1577 0000 80B5     		push	{r7, lr}
 1578              		.cfi_def_cfa_offset 8
 1579              		.cfi_offset 7, -8
 1580              		.cfi_offset 14, -4
 1581 0002 86B0     		sub	sp, sp, #24
 1582              		.cfi_def_cfa_offset 32
 1583 0004 04AF     		add	r7, sp, #16
 1584              		.cfi_def_cfa 7, 16
1545:FreeRTOS/tasks.c **** BaseType_t xReturn;
1546:FreeRTOS/tasks.c **** 
1547:FreeRTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1548:FreeRTOS/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1549:FreeRTOS/tasks.c **** 	{
1550:FreeRTOS/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1551:FreeRTOS/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1552:FreeRTOS/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
1553:FreeRTOS/tasks.c **** 	}
1554:FreeRTOS/tasks.c **** 	#else
1555:FreeRTOS/tasks.c **** 	{
1556:FreeRTOS/tasks.c **** 		/* Create the idle task without storing its handle. */
1557:FreeRTOS/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
 1585              		.loc 1 1557 0
 1586 0006 0023     		movs	r3, #0
 1587 0008 0393     		str	r3, [sp, #12]
 1588 000a 0023     		movs	r3, #0
 1589 000c 0293     		str	r3, [sp, #8]
 1590 000e 0023     		movs	r3, #0
 1591 0010 0193     		str	r3, [sp, #4]
 1592 0012 0023     		movs	r3, #0
 1593 0014 0093     		str	r3, [sp]
 1594 0016 0023     		movs	r3, #0
 1595 0018 6422     		movs	r2, #100
 1596 001a 0D49     		ldr	r1, .L118
 1597 001c 0D48     		ldr	r0, .L118+4
 1598 001e FFF7FEFF 		bl	xTaskGenericCreate
 1599 0022 7860     		str	r0, [r7, #4]
1558:FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 57


1559:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
1560:FreeRTOS/tasks.c **** 
1561:FreeRTOS/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1562:FreeRTOS/tasks.c **** 	{
1563:FreeRTOS/tasks.c **** 		if( xReturn == pdPASS )
1564:FreeRTOS/tasks.c **** 		{
1565:FreeRTOS/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1566:FreeRTOS/tasks.c **** 		}
1567:FreeRTOS/tasks.c **** 		else
1568:FreeRTOS/tasks.c **** 		{
1569:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1570:FreeRTOS/tasks.c **** 		}
1571:FreeRTOS/tasks.c **** 	}
1572:FreeRTOS/tasks.c **** 	#endif /* configUSE_TIMERS */
1573:FreeRTOS/tasks.c **** 
1574:FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
 1600              		.loc 1 1574 0
 1601 0024 7B68     		ldr	r3, [r7, #4]
 1602 0026 012B     		cmp	r3, #1
 1603 0028 0DD1     		bne	.L117
1575:FreeRTOS/tasks.c **** 	{
1576:FreeRTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1577:FreeRTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1578:FreeRTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1579:FreeRTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1580:FreeRTOS/tasks.c **** 		starts to run. */
1581:FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
 1604              		.loc 1 1581 0
 1605 002a FFF7FEFF 		bl	ulPortSetInterruptMask
1582:FreeRTOS/tasks.c **** 
1583:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1584:FreeRTOS/tasks.c **** 		{
1585:FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1586:FreeRTOS/tasks.c **** 			structure specific to the task that will run first. */
1587:FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1588:FreeRTOS/tasks.c **** 		}
1589:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1590:FreeRTOS/tasks.c **** 
1591:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 1606              		.loc 1 1591 0
 1607 002e 0A4B     		ldr	r3, .L118+8
 1608 0030 4FF0FF32 		mov	r2, #-1
 1609 0034 1A60     		str	r2, [r3]
1592:FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1610              		.loc 1 1592 0
 1611 0036 094B     		ldr	r3, .L118+12
 1612 0038 0122     		movs	r2, #1
 1613 003a 1A60     		str	r2, [r3]
1593:FreeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1614              		.loc 1 1593 0
 1615 003c 084B     		ldr	r3, .L118+16
 1616 003e 0022     		movs	r2, #0
 1617 0040 1A60     		str	r2, [r3]
1594:FreeRTOS/tasks.c **** 
1595:FreeRTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1596:FreeRTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1597:FreeRTOS/tasks.c **** 		the run time counter time base. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 58


1598:FreeRTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1599:FreeRTOS/tasks.c **** 
1600:FreeRTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1601:FreeRTOS/tasks.c **** 		portable interface. */
1602:FreeRTOS/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 1618              		.loc 1 1602 0
 1619 0042 FFF7FEFF 		bl	xPortStartScheduler
 1620              	.L117:
1603:FreeRTOS/tasks.c **** 		{
1604:FreeRTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1605:FreeRTOS/tasks.c **** 			function will not return. */
1606:FreeRTOS/tasks.c **** 		}
1607:FreeRTOS/tasks.c **** 		else
1608:FreeRTOS/tasks.c **** 		{
1609:FreeRTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1610:FreeRTOS/tasks.c **** 		}
1611:FreeRTOS/tasks.c **** 	}
1612:FreeRTOS/tasks.c **** 	else
1613:FreeRTOS/tasks.c **** 	{
1614:FreeRTOS/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1615:FreeRTOS/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1616:FreeRTOS/tasks.c **** 		or the timer task. */
1617:FreeRTOS/tasks.c **** 		configASSERT( xReturn );
1618:FreeRTOS/tasks.c **** 	}
1619:FreeRTOS/tasks.c **** }
 1621              		.loc 1 1619 0
 1622 0046 00BF     		nop
 1623 0048 0837     		adds	r7, r7, #8
 1624              		.cfi_def_cfa_offset 8
 1625 004a BD46     		mov	sp, r7
 1626              		.cfi_def_cfa_register 13
 1627              		@ sp needed
 1628 004c 80BD     		pop	{r7, pc}
 1629              	.L119:
 1630 004e 00BF     		.align	2
 1631              	.L118:
 1632 0050 00000000 		.word	.LC0
 1633 0054 00000000 		.word	prvIdleTask
 1634 0058 F8000000 		.word	xNextTaskUnblockTime
 1635 005c E4000000 		.word	xSchedulerRunning
 1636 0060 DC000000 		.word	xTickCount
 1637              		.cfi_endproc
 1638              	.LFE76:
 1639              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1640              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1641              		.align	2
 1642              		.global	vTaskEndScheduler
 1643              		.thumb
 1644              		.thumb_func
 1645              		.type	vTaskEndScheduler, %function
 1646              	vTaskEndScheduler:
 1647              	.LFB77:
1620:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1621:FreeRTOS/tasks.c **** 
1622:FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
1623:FreeRTOS/tasks.c **** {
 1648              		.loc 1 1623 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 59


 1649              		.cfi_startproc
 1650              		@ args = 0, pretend = 0, frame = 0
 1651              		@ frame_needed = 1, uses_anonymous_args = 0
 1652 0000 80B5     		push	{r7, lr}
 1653              		.cfi_def_cfa_offset 8
 1654              		.cfi_offset 7, -8
 1655              		.cfi_offset 14, -4
 1656 0002 00AF     		add	r7, sp, #0
 1657              		.cfi_def_cfa_register 7
1624:FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1625:FreeRTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1626:FreeRTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1627:FreeRTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
 1658              		.loc 1 1627 0
 1659 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
1628:FreeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1660              		.loc 1 1628 0
 1661 0008 034B     		ldr	r3, .L121
 1662 000a 0022     		movs	r2, #0
 1663 000c 1A60     		str	r2, [r3]
1629:FreeRTOS/tasks.c **** 	vPortEndScheduler();
 1664              		.loc 1 1629 0
 1665 000e FFF7FEFF 		bl	vPortEndScheduler
1630:FreeRTOS/tasks.c **** }
 1666              		.loc 1 1630 0
 1667 0012 00BF     		nop
 1668 0014 80BD     		pop	{r7, pc}
 1669              	.L122:
 1670 0016 00BF     		.align	2
 1671              	.L121:
 1672 0018 E4000000 		.word	xSchedulerRunning
 1673              		.cfi_endproc
 1674              	.LFE77:
 1675              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1676              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1677              		.align	2
 1678              		.global	vTaskSuspendAll
 1679              		.thumb
 1680              		.thumb_func
 1681              		.type	vTaskSuspendAll, %function
 1682              	vTaskSuspendAll:
 1683              	.LFB78:
1631:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1632:FreeRTOS/tasks.c **** 
1633:FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
1634:FreeRTOS/tasks.c **** {
 1684              		.loc 1 1634 0
 1685              		.cfi_startproc
 1686              		@ args = 0, pretend = 0, frame = 0
 1687              		@ frame_needed = 1, uses_anonymous_args = 0
 1688              		@ link register save eliminated.
 1689 0000 80B4     		push	{r7}
 1690              		.cfi_def_cfa_offset 4
 1691              		.cfi_offset 7, -4
 1692 0002 00AF     		add	r7, sp, #0
 1693              		.cfi_def_cfa_register 7
1635:FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 60


1636:FreeRTOS/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1637:FreeRTOS/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1638:FreeRTOS/tasks.c **** 	http://goo.gl/wu4acr */
1639:FreeRTOS/tasks.c **** 	++uxSchedulerSuspended;
 1694              		.loc 1 1639 0
 1695 0004 044B     		ldr	r3, .L124
 1696 0006 1B68     		ldr	r3, [r3]
 1697 0008 0133     		adds	r3, r3, #1
 1698 000a 034A     		ldr	r2, .L124
 1699 000c 1360     		str	r3, [r2]
1640:FreeRTOS/tasks.c **** }
 1700              		.loc 1 1640 0
 1701 000e 00BF     		nop
 1702 0010 BD46     		mov	sp, r7
 1703              		.cfi_def_cfa_register 13
 1704              		@ sp needed
 1705 0012 80BC     		pop	{r7}
 1706              		.cfi_restore 7
 1707              		.cfi_def_cfa_offset 0
 1708 0014 7047     		bx	lr
 1709              	.L125:
 1710 0016 00BF     		.align	2
 1711              	.L124:
 1712 0018 FC000000 		.word	uxSchedulerSuspended
 1713              		.cfi_endproc
 1714              	.LFE78:
 1715              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1716              		.section	.text.xTaskResumeAll,"ax",%progbits
 1717              		.align	2
 1718              		.global	xTaskResumeAll
 1719              		.thumb
 1720              		.thumb_func
 1721              		.type	xTaskResumeAll, %function
 1722              	xTaskResumeAll:
 1723              	.LFB79:
1641:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1642:FreeRTOS/tasks.c **** 
1643:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1644:FreeRTOS/tasks.c **** 
1645:FreeRTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1646:FreeRTOS/tasks.c **** 	{
1647:FreeRTOS/tasks.c **** 	TickType_t xReturn;
1648:FreeRTOS/tasks.c **** 
1649:FreeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1650:FreeRTOS/tasks.c **** 		{
1651:FreeRTOS/tasks.c **** 			xReturn = 0;
1652:FreeRTOS/tasks.c **** 		}
1653:FreeRTOS/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1654:FreeRTOS/tasks.c **** 		{
1655:FreeRTOS/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1656:FreeRTOS/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1657:FreeRTOS/tasks.c **** 			processed. */
1658:FreeRTOS/tasks.c **** 			xReturn = 0;
1659:FreeRTOS/tasks.c **** 		}
1660:FreeRTOS/tasks.c **** 		else
1661:FreeRTOS/tasks.c **** 		{
1662:FreeRTOS/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 61


1663:FreeRTOS/tasks.c **** 		}
1664:FreeRTOS/tasks.c **** 
1665:FreeRTOS/tasks.c **** 		return xReturn;
1666:FreeRTOS/tasks.c **** 	}
1667:FreeRTOS/tasks.c **** 
1668:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1669:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1670:FreeRTOS/tasks.c **** 
1671:FreeRTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
1672:FreeRTOS/tasks.c **** {
 1724              		.loc 1 1672 0
 1725              		.cfi_startproc
 1726              		@ args = 0, pretend = 0, frame = 8
 1727              		@ frame_needed = 1, uses_anonymous_args = 0
 1728 0000 80B5     		push	{r7, lr}
 1729              		.cfi_def_cfa_offset 8
 1730              		.cfi_offset 7, -8
 1731              		.cfi_offset 14, -4
 1732 0002 82B0     		sub	sp, sp, #8
 1733              		.cfi_def_cfa_offset 16
 1734 0004 00AF     		add	r7, sp, #0
 1735              		.cfi_def_cfa_register 7
1673:FreeRTOS/tasks.c **** TCB_t *pxTCB;
1674:FreeRTOS/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 1736              		.loc 1 1674 0
 1737 0006 0023     		movs	r3, #0
 1738 0008 7B60     		str	r3, [r7, #4]
1675:FreeRTOS/tasks.c **** 
1676:FreeRTOS/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1677:FreeRTOS/tasks.c **** 	previous call to vTaskSuspendAll(). */
1678:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended );
1679:FreeRTOS/tasks.c **** 
1680:FreeRTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1681:FreeRTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1682:FreeRTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1683:FreeRTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1684:FreeRTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
1685:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 1739              		.loc 1 1685 0
 1740 000a FFF7FEFF 		bl	vPortEnterCritical
1686:FreeRTOS/tasks.c **** 	{
1687:FreeRTOS/tasks.c **** 		--uxSchedulerSuspended;
 1741              		.loc 1 1687 0
 1742 000e 334B     		ldr	r3, .L135
 1743 0010 1B68     		ldr	r3, [r3]
 1744 0012 013B     		subs	r3, r3, #1
 1745 0014 314A     		ldr	r2, .L135
 1746 0016 1360     		str	r3, [r2]
1688:FreeRTOS/tasks.c **** 
1689:FreeRTOS/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1747              		.loc 1 1689 0
 1748 0018 304B     		ldr	r3, .L135
 1749 001a 1B68     		ldr	r3, [r3]
 1750 001c 002B     		cmp	r3, #0
 1751 001e 55D1     		bne	.L127
1690:FreeRTOS/tasks.c **** 		{
1691:FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 62


 1752              		.loc 1 1691 0
 1753 0020 2F4B     		ldr	r3, .L135+4
 1754 0022 1B68     		ldr	r3, [r3]
 1755 0024 002B     		cmp	r3, #0
 1756 0026 51D0     		beq	.L127
1692:FreeRTOS/tasks.c **** 			{
1693:FreeRTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
1694:FreeRTOS/tasks.c **** 				appropriate ready list. */
1695:FreeRTOS/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 1757              		.loc 1 1695 0
 1758 0028 2EE0     		b	.L128
 1759              	.L129:
1696:FreeRTOS/tasks.c **** 				{
1697:FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 1760              		.loc 1 1697 0
 1761 002a 2E4B     		ldr	r3, .L135+8
 1762 002c DB68     		ldr	r3, [r3, #12]
 1763 002e DB68     		ldr	r3, [r3, #12]
 1764 0030 3B60     		str	r3, [r7]
1698:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1765              		.loc 1 1698 0
 1766 0032 3B68     		ldr	r3, [r7]
 1767 0034 1833     		adds	r3, r3, #24
 1768 0036 1846     		mov	r0, r3
 1769 0038 FFF7FEFF 		bl	uxListRemove
1699:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 1770              		.loc 1 1699 0
 1771 003c 3B68     		ldr	r3, [r7]
 1772 003e 0433     		adds	r3, r3, #4
 1773 0040 1846     		mov	r0, r3
 1774 0042 FFF7FEFF 		bl	uxListRemove
1700:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1775              		.loc 1 1700 0
 1776 0046 3B68     		ldr	r3, [r7]
 1777 0048 DB6A     		ldr	r3, [r3, #44]
 1778 004a 0122     		movs	r2, #1
 1779 004c 9A40     		lsls	r2, r2, r3
 1780 004e 264B     		ldr	r3, .L135+12
 1781 0050 1B68     		ldr	r3, [r3]
 1782 0052 1343     		orrs	r3, r3, r2
 1783 0054 244A     		ldr	r2, .L135+12
 1784 0056 1360     		str	r3, [r2]
 1785 0058 3B68     		ldr	r3, [r7]
 1786 005a DA6A     		ldr	r2, [r3, #44]
 1787 005c 1346     		mov	r3, r2
 1788 005e 9B00     		lsls	r3, r3, #2
 1789 0060 1344     		add	r3, r3, r2
 1790 0062 9B00     		lsls	r3, r3, #2
 1791 0064 214A     		ldr	r2, .L135+16
 1792 0066 1A44     		add	r2, r2, r3
 1793 0068 3B68     		ldr	r3, [r7]
 1794 006a 0433     		adds	r3, r3, #4
 1795 006c 1946     		mov	r1, r3
 1796 006e 1046     		mov	r0, r2
 1797 0070 FFF7FEFF 		bl	vListInsertEnd
1701:FreeRTOS/tasks.c **** 
1702:FreeRTOS/tasks.c **** 					/* If the moved task has a priority higher than the current
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 63


1703:FreeRTOS/tasks.c **** 					task then a yield must be performed. */
1704:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1798              		.loc 1 1704 0
 1799 0074 3B68     		ldr	r3, [r7]
 1800 0076 DA6A     		ldr	r2, [r3, #44]
 1801 0078 1D4B     		ldr	r3, .L135+20
 1802 007a 1B68     		ldr	r3, [r3]
 1803 007c DB6A     		ldr	r3, [r3, #44]
 1804 007e 9A42     		cmp	r2, r3
 1805 0080 02D3     		bcc	.L128
1705:FreeRTOS/tasks.c **** 					{
1706:FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
 1806              		.loc 1 1706 0
 1807 0082 1C4B     		ldr	r3, .L135+24
 1808 0084 0122     		movs	r2, #1
 1809 0086 1A60     		str	r2, [r3]
 1810              	.L128:
1695:FreeRTOS/tasks.c **** 				{
 1811              		.loc 1 1695 0
 1812 0088 164B     		ldr	r3, .L135+8
 1813 008a 1B68     		ldr	r3, [r3]
 1814 008c 002B     		cmp	r3, #0
 1815 008e CCD1     		bne	.L129
1707:FreeRTOS/tasks.c **** 					}
1708:FreeRTOS/tasks.c **** 					else
1709:FreeRTOS/tasks.c **** 					{
1710:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1711:FreeRTOS/tasks.c **** 					}
1712:FreeRTOS/tasks.c **** 				}
1713:FreeRTOS/tasks.c **** 
1714:FreeRTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1715:FreeRTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does
1716:FreeRTOS/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
1717:FreeRTOS/tasks.c **** 				time. */
1718:FreeRTOS/tasks.c **** 				if( uxPendedTicks > ( UBaseType_t ) 0U )
 1816              		.loc 1 1718 0
 1817 0090 194B     		ldr	r3, .L135+28
 1818 0092 1B68     		ldr	r3, [r3]
 1819 0094 002B     		cmp	r3, #0
 1820 0096 11D0     		beq	.L130
1719:FreeRTOS/tasks.c **** 				{
1720:FreeRTOS/tasks.c **** 					while( uxPendedTicks > ( UBaseType_t ) 0U )
 1821              		.loc 1 1720 0
 1822 0098 0CE0     		b	.L131
 1823              	.L133:
1721:FreeRTOS/tasks.c **** 					{
1722:FreeRTOS/tasks.c **** 						if( xTaskIncrementTick() != pdFALSE )
 1824              		.loc 1 1722 0
 1825 009a FFF7FEFF 		bl	xTaskIncrementTick
 1826 009e 0346     		mov	r3, r0
 1827 00a0 002B     		cmp	r3, #0
 1828 00a2 02D0     		beq	.L132
1723:FreeRTOS/tasks.c **** 						{
1724:FreeRTOS/tasks.c **** 							xYieldPending = pdTRUE;
 1829              		.loc 1 1724 0
 1830 00a4 134B     		ldr	r3, .L135+24
 1831 00a6 0122     		movs	r2, #1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 64


 1832 00a8 1A60     		str	r2, [r3]
 1833              	.L132:
1725:FreeRTOS/tasks.c **** 						}
1726:FreeRTOS/tasks.c **** 						else
1727:FreeRTOS/tasks.c **** 						{
1728:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1729:FreeRTOS/tasks.c **** 						}
1730:FreeRTOS/tasks.c **** 						--uxPendedTicks;
 1834              		.loc 1 1730 0
 1835 00aa 134B     		ldr	r3, .L135+28
 1836 00ac 1B68     		ldr	r3, [r3]
 1837 00ae 013B     		subs	r3, r3, #1
 1838 00b0 114A     		ldr	r2, .L135+28
 1839 00b2 1360     		str	r3, [r2]
 1840              	.L131:
1720:FreeRTOS/tasks.c **** 					{
 1841              		.loc 1 1720 0
 1842 00b4 104B     		ldr	r3, .L135+28
 1843 00b6 1B68     		ldr	r3, [r3]
 1844 00b8 002B     		cmp	r3, #0
 1845 00ba EED1     		bne	.L133
 1846              	.L130:
1731:FreeRTOS/tasks.c **** 					}
1732:FreeRTOS/tasks.c **** 				}
1733:FreeRTOS/tasks.c **** 				else
1734:FreeRTOS/tasks.c **** 				{
1735:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1736:FreeRTOS/tasks.c **** 				}
1737:FreeRTOS/tasks.c **** 
1738:FreeRTOS/tasks.c **** 				if( xYieldPending == pdTRUE )
 1847              		.loc 1 1738 0
 1848 00bc 0D4B     		ldr	r3, .L135+24
 1849 00be 1B68     		ldr	r3, [r3]
 1850 00c0 012B     		cmp	r3, #1
 1851 00c2 03D1     		bne	.L127
1739:FreeRTOS/tasks.c **** 				{
1740:FreeRTOS/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
1741:FreeRTOS/tasks.c **** 					{
1742:FreeRTOS/tasks.c **** 						xAlreadyYielded = pdTRUE;
 1852              		.loc 1 1742 0
 1853 00c4 0123     		movs	r3, #1
 1854 00c6 7B60     		str	r3, [r7, #4]
1743:FreeRTOS/tasks.c **** 					}
1744:FreeRTOS/tasks.c **** 					#endif
1745:FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1855              		.loc 1 1745 0
 1856 00c8 FFF7FEFF 		bl	vPortYield
 1857              	.L127:
1746:FreeRTOS/tasks.c **** 				}
1747:FreeRTOS/tasks.c **** 				else
1748:FreeRTOS/tasks.c **** 				{
1749:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1750:FreeRTOS/tasks.c **** 				}
1751:FreeRTOS/tasks.c **** 			}
1752:FreeRTOS/tasks.c **** 		}
1753:FreeRTOS/tasks.c **** 		else
1754:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 65


1755:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1756:FreeRTOS/tasks.c **** 		}
1757:FreeRTOS/tasks.c **** 	}
1758:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
 1858              		.loc 1 1758 0
 1859 00cc FFF7FEFF 		bl	vPortExitCritical
1759:FreeRTOS/tasks.c **** 
1760:FreeRTOS/tasks.c **** 	return xAlreadyYielded;
 1860              		.loc 1 1760 0
 1861 00d0 7B68     		ldr	r3, [r7, #4]
1761:FreeRTOS/tasks.c **** }
 1862              		.loc 1 1761 0
 1863 00d2 1846     		mov	r0, r3
 1864 00d4 0837     		adds	r7, r7, #8
 1865              		.cfi_def_cfa_offset 8
 1866 00d6 BD46     		mov	sp, r7
 1867              		.cfi_def_cfa_register 13
 1868              		@ sp needed
 1869 00d8 80BD     		pop	{r7, pc}
 1870              	.L136:
 1871 00da 00BF     		.align	2
 1872              	.L135:
 1873 00dc FC000000 		.word	uxSchedulerSuspended
 1874 00e0 D8000000 		.word	uxCurrentNumberOfTasks
 1875 00e4 98000000 		.word	xPendingReadyList
 1876 00e8 E0000000 		.word	uxTopReadyPriority
 1877 00ec 04000000 		.word	pxReadyTasksLists
 1878 00f0 00000000 		.word	pxCurrentTCB
 1879 00f4 EC000000 		.word	xYieldPending
 1880 00f8 E8000000 		.word	uxPendedTicks
 1881              		.cfi_endproc
 1882              	.LFE79:
 1883              		.size	xTaskResumeAll, .-xTaskResumeAll
 1884              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1885              		.align	2
 1886              		.global	xTaskGetTickCount
 1887              		.thumb
 1888              		.thumb_func
 1889              		.type	xTaskGetTickCount, %function
 1890              	xTaskGetTickCount:
 1891              	.LFB80:
1762:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1763:FreeRTOS/tasks.c **** 
1764:FreeRTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
1765:FreeRTOS/tasks.c **** {
 1892              		.loc 1 1765 0
 1893              		.cfi_startproc
 1894              		@ args = 0, pretend = 0, frame = 8
 1895              		@ frame_needed = 1, uses_anonymous_args = 0
 1896              		@ link register save eliminated.
 1897 0000 80B4     		push	{r7}
 1898              		.cfi_def_cfa_offset 4
 1899              		.cfi_offset 7, -4
 1900 0002 83B0     		sub	sp, sp, #12
 1901              		.cfi_def_cfa_offset 16
 1902 0004 00AF     		add	r7, sp, #0
 1903              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 66


1766:FreeRTOS/tasks.c **** TickType_t xTicks;
1767:FreeRTOS/tasks.c **** 
1768:FreeRTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1769:FreeRTOS/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
1770:FreeRTOS/tasks.c **** 	{
1771:FreeRTOS/tasks.c **** 		xTicks = xTickCount;
 1904              		.loc 1 1771 0
 1905 0006 044B     		ldr	r3, .L139
 1906 0008 1B68     		ldr	r3, [r3]
 1907 000a 7B60     		str	r3, [r7, #4]
1772:FreeRTOS/tasks.c **** 	}
1773:FreeRTOS/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
1774:FreeRTOS/tasks.c **** 
1775:FreeRTOS/tasks.c **** 	return xTicks;
 1908              		.loc 1 1775 0
 1909 000c 7B68     		ldr	r3, [r7, #4]
1776:FreeRTOS/tasks.c **** }
 1910              		.loc 1 1776 0
 1911 000e 1846     		mov	r0, r3
 1912 0010 0C37     		adds	r7, r7, #12
 1913              		.cfi_def_cfa_offset 4
 1914 0012 BD46     		mov	sp, r7
 1915              		.cfi_def_cfa_register 13
 1916              		@ sp needed
 1917 0014 80BC     		pop	{r7}
 1918              		.cfi_restore 7
 1919              		.cfi_def_cfa_offset 0
 1920 0016 7047     		bx	lr
 1921              	.L140:
 1922              		.align	2
 1923              	.L139:
 1924 0018 DC000000 		.word	xTickCount
 1925              		.cfi_endproc
 1926              	.LFE80:
 1927              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1928              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1929              		.align	2
 1930              		.global	xTaskGetTickCountFromISR
 1931              		.thumb
 1932              		.thumb_func
 1933              		.type	xTaskGetTickCountFromISR, %function
 1934              	xTaskGetTickCountFromISR:
 1935              	.LFB81:
1777:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1778:FreeRTOS/tasks.c **** 
1779:FreeRTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
1780:FreeRTOS/tasks.c **** {
 1936              		.loc 1 1780 0
 1937              		.cfi_startproc
 1938              		@ args = 0, pretend = 0, frame = 8
 1939              		@ frame_needed = 1, uses_anonymous_args = 0
 1940              		@ link register save eliminated.
 1941 0000 80B4     		push	{r7}
 1942              		.cfi_def_cfa_offset 4
 1943              		.cfi_offset 7, -4
 1944 0002 83B0     		sub	sp, sp, #12
 1945              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 67


 1946 0004 00AF     		add	r7, sp, #0
 1947              		.cfi_def_cfa_register 7
1781:FreeRTOS/tasks.c **** TickType_t xReturn;
1782:FreeRTOS/tasks.c **** UBaseType_t uxSavedInterruptStatus;
1783:FreeRTOS/tasks.c **** 
1784:FreeRTOS/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1785:FreeRTOS/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1786:FreeRTOS/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
1787:FreeRTOS/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1788:FreeRTOS/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1789:FreeRTOS/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1790:FreeRTOS/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1791:FreeRTOS/tasks.c **** 	assigned a priority above the configured maximum system call priority.
1792:FreeRTOS/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1793:FreeRTOS/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
1794:FreeRTOS/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1795:FreeRTOS/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1796:FreeRTOS/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
1797:FreeRTOS/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1798:FreeRTOS/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1799:FreeRTOS/tasks.c **** 
1800:FreeRTOS/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 1948              		.loc 1 1800 0
 1949 0006 0023     		movs	r3, #0
 1950 0008 7B60     		str	r3, [r7, #4]
1801:FreeRTOS/tasks.c **** 	{
1802:FreeRTOS/tasks.c **** 		xReturn = xTickCount;
 1951              		.loc 1 1802 0
 1952 000a 044B     		ldr	r3, .L143
 1953 000c 1B68     		ldr	r3, [r3]
 1954 000e 3B60     		str	r3, [r7]
1803:FreeRTOS/tasks.c **** 	}
1804:FreeRTOS/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1805:FreeRTOS/tasks.c **** 
1806:FreeRTOS/tasks.c **** 	return xReturn;
 1955              		.loc 1 1806 0
 1956 0010 3B68     		ldr	r3, [r7]
1807:FreeRTOS/tasks.c **** }
 1957              		.loc 1 1807 0
 1958 0012 1846     		mov	r0, r3
 1959 0014 0C37     		adds	r7, r7, #12
 1960              		.cfi_def_cfa_offset 4
 1961 0016 BD46     		mov	sp, r7
 1962              		.cfi_def_cfa_register 13
 1963              		@ sp needed
 1964 0018 80BC     		pop	{r7}
 1965              		.cfi_restore 7
 1966              		.cfi_def_cfa_offset 0
 1967 001a 7047     		bx	lr
 1968              	.L144:
 1969              		.align	2
 1970              	.L143:
 1971 001c DC000000 		.word	xTickCount
 1972              		.cfi_endproc
 1973              	.LFE81:
 1974              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 1975              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 68


 1976              		.align	2
 1977              		.global	uxTaskGetNumberOfTasks
 1978              		.thumb
 1979              		.thumb_func
 1980              		.type	uxTaskGetNumberOfTasks, %function
 1981              	uxTaskGetNumberOfTasks:
 1982              	.LFB82:
1808:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1809:FreeRTOS/tasks.c **** 
1810:FreeRTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
1811:FreeRTOS/tasks.c **** {
 1983              		.loc 1 1811 0
 1984              		.cfi_startproc
 1985              		@ args = 0, pretend = 0, frame = 0
 1986              		@ frame_needed = 1, uses_anonymous_args = 0
 1987              		@ link register save eliminated.
 1988 0000 80B4     		push	{r7}
 1989              		.cfi_def_cfa_offset 4
 1990              		.cfi_offset 7, -4
 1991 0002 00AF     		add	r7, sp, #0
 1992              		.cfi_def_cfa_register 7
1812:FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
1813:FreeRTOS/tasks.c **** 	BaseType_t. */
1814:FreeRTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
 1993              		.loc 1 1814 0
 1994 0004 024B     		ldr	r3, .L147
 1995 0006 1B68     		ldr	r3, [r3]
1815:FreeRTOS/tasks.c **** }
 1996              		.loc 1 1815 0
 1997 0008 1846     		mov	r0, r3
 1998 000a BD46     		mov	sp, r7
 1999              		.cfi_def_cfa_register 13
 2000              		@ sp needed
 2001 000c 80BC     		pop	{r7}
 2002              		.cfi_restore 7
 2003              		.cfi_def_cfa_offset 0
 2004 000e 7047     		bx	lr
 2005              	.L148:
 2006              		.align	2
 2007              	.L147:
 2008 0010 D8000000 		.word	uxCurrentNumberOfTasks
 2009              		.cfi_endproc
 2010              	.LFE82:
 2011              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 2012              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2013              		.align	2
 2014              		.global	xTaskIncrementTick
 2015              		.thumb
 2016              		.thumb_func
 2017              		.type	xTaskIncrementTick, %function
 2018              	xTaskIncrementTick:
 2019              	.LFB83:
1816:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1817:FreeRTOS/tasks.c **** 
1818:FreeRTOS/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1819:FreeRTOS/tasks.c **** 
1820:FreeRTOS/tasks.c **** 	char *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allow
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 69


1821:FreeRTOS/tasks.c **** 	{
1822:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1823:FreeRTOS/tasks.c **** 
1824:FreeRTOS/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1825:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1826:FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
1827:FreeRTOS/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1828:FreeRTOS/tasks.c **** 	}
1829:FreeRTOS/tasks.c **** 
1830:FreeRTOS/tasks.c **** #endif /* INCLUDE_pcTaskGetTaskName */
1831:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1832:FreeRTOS/tasks.c **** 
1833:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1834:FreeRTOS/tasks.c **** 
1835:FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
1836:FreeRTOS/tasks.c **** 	{
1837:FreeRTOS/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
1838:FreeRTOS/tasks.c **** 
1839:FreeRTOS/tasks.c **** 		vTaskSuspendAll();
1840:FreeRTOS/tasks.c **** 		{
1841:FreeRTOS/tasks.c **** 			/* Is there a space in the array for each task in the system? */
1842:FreeRTOS/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
1843:FreeRTOS/tasks.c **** 			{
1844:FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1845:FreeRTOS/tasks.c **** 				task in the Ready state. */
1846:FreeRTOS/tasks.c **** 				do
1847:FreeRTOS/tasks.c **** 				{
1848:FreeRTOS/tasks.c **** 					uxQueue--;
1849:FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[
1850:FreeRTOS/tasks.c **** 
1851:FreeRTOS/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
1852:FreeRTOS/tasks.c **** 
1853:FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1854:FreeRTOS/tasks.c **** 				task in the Blocked state. */
1855:FreeRTOS/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayed
1856:FreeRTOS/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflo
1857:FreeRTOS/tasks.c **** 
1858:FreeRTOS/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
1859:FreeRTOS/tasks.c **** 				{
1860:FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1861:FreeRTOS/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
1862:FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermina
1863:FreeRTOS/tasks.c **** 				}
1864:FreeRTOS/tasks.c **** 				#endif
1865:FreeRTOS/tasks.c **** 
1866:FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
1867:FreeRTOS/tasks.c **** 				{
1868:FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1869:FreeRTOS/tasks.c **** 					each task in the Suspended state. */
1870:FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, 
1871:FreeRTOS/tasks.c **** 				}
1872:FreeRTOS/tasks.c **** 				#endif
1873:FreeRTOS/tasks.c **** 
1874:FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
1875:FreeRTOS/tasks.c **** 				{
1876:FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
1877:FreeRTOS/tasks.c **** 					{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 70


1878:FreeRTOS/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1879:FreeRTOS/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
1880:FreeRTOS/tasks.c **** 						#else
1881:FreeRTOS/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1882:FreeRTOS/tasks.c **** 						#endif
1883:FreeRTOS/tasks.c **** 					}
1884:FreeRTOS/tasks.c **** 				}
1885:FreeRTOS/tasks.c **** 				#else
1886:FreeRTOS/tasks.c **** 				{
1887:FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
1888:FreeRTOS/tasks.c **** 					{
1889:FreeRTOS/tasks.c **** 						*pulTotalRunTime = 0;
1890:FreeRTOS/tasks.c **** 					}
1891:FreeRTOS/tasks.c **** 				}
1892:FreeRTOS/tasks.c **** 				#endif
1893:FreeRTOS/tasks.c **** 			}
1894:FreeRTOS/tasks.c **** 			else
1895:FreeRTOS/tasks.c **** 			{
1896:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1897:FreeRTOS/tasks.c **** 			}
1898:FreeRTOS/tasks.c **** 		}
1899:FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
1900:FreeRTOS/tasks.c **** 
1901:FreeRTOS/tasks.c **** 		return uxTask;
1902:FreeRTOS/tasks.c **** 	}
1903:FreeRTOS/tasks.c **** 
1904:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
1905:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1906:FreeRTOS/tasks.c **** 
1907:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1908:FreeRTOS/tasks.c **** 
1909:FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
1910:FreeRTOS/tasks.c **** 	{
1911:FreeRTOS/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1912:FreeRTOS/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1913:FreeRTOS/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1914:FreeRTOS/tasks.c **** 		return xIdleTaskHandle;
1915:FreeRTOS/tasks.c **** 	}
1916:FreeRTOS/tasks.c **** 
1917:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
1918:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1919:FreeRTOS/tasks.c **** 
1920:FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
1921:FreeRTOS/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
1922:FreeRTOS/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1923:FreeRTOS/tasks.c **** 1. */
1924:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1925:FreeRTOS/tasks.c **** 
1926:FreeRTOS/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
1927:FreeRTOS/tasks.c **** 	{
1928:FreeRTOS/tasks.c **** 		/* Correct the tick count value after a period during which the tick
1929:FreeRTOS/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
1930:FreeRTOS/tasks.c **** 		each stepped tick. */
1931:FreeRTOS/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
1932:FreeRTOS/tasks.c **** 		xTickCount += xTicksToJump;
1933:FreeRTOS/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
1934:FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 71


1935:FreeRTOS/tasks.c **** 
1936:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1937:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1938:FreeRTOS/tasks.c **** 
1939:FreeRTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
1940:FreeRTOS/tasks.c **** {
 2020              		.loc 1 1940 0
 2021              		.cfi_startproc
 2022              		@ args = 0, pretend = 0, frame = 24
 2023              		@ frame_needed = 1, uses_anonymous_args = 0
 2024 0000 80B5     		push	{r7, lr}
 2025              		.cfi_def_cfa_offset 8
 2026              		.cfi_offset 7, -8
 2027              		.cfi_offset 14, -4
 2028 0002 86B0     		sub	sp, sp, #24
 2029              		.cfi_def_cfa_offset 32
 2030 0004 00AF     		add	r7, sp, #0
 2031              		.cfi_def_cfa_register 7
1941:FreeRTOS/tasks.c **** TCB_t * pxTCB;
1942:FreeRTOS/tasks.c **** TickType_t xItemValue;
1943:FreeRTOS/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2032              		.loc 1 1943 0
 2033 0006 0023     		movs	r3, #0
 2034 0008 7B61     		str	r3, [r7, #20]
1944:FreeRTOS/tasks.c **** 
1945:FreeRTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1946:FreeRTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1947:FreeRTOS/tasks.c **** 	tasks to be unblocked. */
1948:FreeRTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1949:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2035              		.loc 1 1949 0
 2036 000a 494B     		ldr	r3, .L163
 2037 000c 1B68     		ldr	r3, [r3]
 2038 000e 002B     		cmp	r3, #0
 2039 0010 7DD1     		bne	.L150
1950:FreeRTOS/tasks.c **** 	{
1951:FreeRTOS/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
1952:FreeRTOS/tasks.c **** 		delayed lists if it wraps to 0. */
1953:FreeRTOS/tasks.c **** 		++xTickCount;
 2040              		.loc 1 1953 0
 2041 0012 484B     		ldr	r3, .L163+4
 2042 0014 1B68     		ldr	r3, [r3]
 2043 0016 0133     		adds	r3, r3, #1
 2044 0018 464A     		ldr	r2, .L163+4
 2045 001a 1360     		str	r3, [r2]
 2046              	.LBB8:
1954:FreeRTOS/tasks.c **** 
1955:FreeRTOS/tasks.c **** 		{
1956:FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1957:FreeRTOS/tasks.c **** 			block. */
1958:FreeRTOS/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 2047              		.loc 1 1958 0
 2048 001c 454B     		ldr	r3, .L163+4
 2049 001e 1B68     		ldr	r3, [r3]
 2050 0020 3B61     		str	r3, [r7, #16]
1959:FreeRTOS/tasks.c **** 
1960:FreeRTOS/tasks.c **** 			if( xConstTickCount == ( TickType_t ) 0U )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 72


 2051              		.loc 1 1960 0
 2052 0022 3B69     		ldr	r3, [r7, #16]
 2053 0024 002B     		cmp	r3, #0
 2054 0026 10D1     		bne	.L151
 2055              	.LBB9:
1961:FreeRTOS/tasks.c **** 			{
1962:FreeRTOS/tasks.c **** 				taskSWITCH_DELAYED_LISTS();
 2056              		.loc 1 1962 0
 2057 0028 434B     		ldr	r3, .L163+8
 2058 002a 1B68     		ldr	r3, [r3]
 2059 002c FB60     		str	r3, [r7, #12]
 2060 002e 434B     		ldr	r3, .L163+12
 2061 0030 1B68     		ldr	r3, [r3]
 2062 0032 414A     		ldr	r2, .L163+8
 2063 0034 1360     		str	r3, [r2]
 2064 0036 414A     		ldr	r2, .L163+12
 2065 0038 FB68     		ldr	r3, [r7, #12]
 2066 003a 1360     		str	r3, [r2]
 2067 003c 404B     		ldr	r3, .L163+16
 2068 003e 1B68     		ldr	r3, [r3]
 2069 0040 0133     		adds	r3, r3, #1
 2070 0042 3F4A     		ldr	r2, .L163+16
 2071 0044 1360     		str	r3, [r2]
 2072 0046 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2073              	.L151:
 2074              	.LBE9:
1963:FreeRTOS/tasks.c **** 			}
1964:FreeRTOS/tasks.c **** 			else
1965:FreeRTOS/tasks.c **** 			{
1966:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1967:FreeRTOS/tasks.c **** 			}
1968:FreeRTOS/tasks.c **** 
1969:FreeRTOS/tasks.c **** 			/* See if this tick has made a timeout expire.  Tasks are stored in
1970:FreeRTOS/tasks.c **** 			the	queue in the order of their wake time - meaning once one task
1971:FreeRTOS/tasks.c **** 			has been found whose block time has not expired there is no need to
1972:FreeRTOS/tasks.c **** 			look any further down the list. */
1973:FreeRTOS/tasks.c **** 			if( xConstTickCount >= xNextTaskUnblockTime )
 2075              		.loc 1 1973 0
 2076 004a 3E4B     		ldr	r3, .L163+20
 2077 004c 1B68     		ldr	r3, [r3]
 2078 004e 3A69     		ldr	r2, [r7, #16]
 2079 0050 9A42     		cmp	r2, r3
 2080 0052 4DD3     		bcc	.L152
 2081              	.L159:
1974:FreeRTOS/tasks.c **** 			{
1975:FreeRTOS/tasks.c **** 				for( ;; )
1976:FreeRTOS/tasks.c **** 				{
1977:FreeRTOS/tasks.c **** 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2082              		.loc 1 1977 0
 2083 0054 384B     		ldr	r3, .L163+8
 2084 0056 1B68     		ldr	r3, [r3]
 2085 0058 1B68     		ldr	r3, [r3]
 2086 005a 002B     		cmp	r3, #0
 2087 005c 01D1     		bne	.L153
 2088              		.loc 1 1977 0 is_stmt 0 discriminator 1
 2089 005e 0123     		movs	r3, #1
 2090 0060 00E0     		b	.L154
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 73


 2091              	.L153:
 2092              		.loc 1 1977 0 discriminator 2
 2093 0062 0023     		movs	r3, #0
 2094              	.L154:
 2095              		.loc 1 1977 0 discriminator 4
 2096 0064 002B     		cmp	r3, #0
 2097 0066 04D0     		beq	.L155
1978:FreeRTOS/tasks.c **** 					{
1979:FreeRTOS/tasks.c **** 						/* The delayed list is empty.  Set xNextTaskUnblockTime
1980:FreeRTOS/tasks.c **** 						to the maximum possible value so it is extremely
1981:FreeRTOS/tasks.c **** 						unlikely that the
1982:FreeRTOS/tasks.c **** 						if( xTickCount >= xNextTaskUnblockTime ) test will pass
1983:FreeRTOS/tasks.c **** 						next time through. */
1984:FreeRTOS/tasks.c **** 						xNextTaskUnblockTime = portMAX_DELAY;
 2098              		.loc 1 1984 0 is_stmt 1
 2099 0068 364B     		ldr	r3, .L163+20
 2100 006a 4FF0FF32 		mov	r2, #-1
 2101 006e 1A60     		str	r2, [r3]
1985:FreeRTOS/tasks.c **** 						break;
 2102              		.loc 1 1985 0
 2103 0070 3EE0     		b	.L152
 2104              	.L155:
1986:FreeRTOS/tasks.c **** 					}
1987:FreeRTOS/tasks.c **** 					else
1988:FreeRTOS/tasks.c **** 					{
1989:FreeRTOS/tasks.c **** 						/* The delayed list is not empty, get the value of the
1990:FreeRTOS/tasks.c **** 						item at the head of the delayed list.  This is the time
1991:FreeRTOS/tasks.c **** 						at which the task at the head of the delayed list must
1992:FreeRTOS/tasks.c **** 						be removed from the Blocked state. */
1993:FreeRTOS/tasks.c **** 						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 2105              		.loc 1 1993 0
 2106 0072 314B     		ldr	r3, .L163+8
 2107 0074 1B68     		ldr	r3, [r3]
 2108 0076 DB68     		ldr	r3, [r3, #12]
 2109 0078 DB68     		ldr	r3, [r3, #12]
 2110 007a BB60     		str	r3, [r7, #8]
1994:FreeRTOS/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 2111              		.loc 1 1994 0
 2112 007c BB68     		ldr	r3, [r7, #8]
 2113 007e 5B68     		ldr	r3, [r3, #4]
 2114 0080 7B60     		str	r3, [r7, #4]
1995:FreeRTOS/tasks.c **** 
1996:FreeRTOS/tasks.c **** 						if( xConstTickCount < xItemValue )
 2115              		.loc 1 1996 0
 2116 0082 3A69     		ldr	r2, [r7, #16]
 2117 0084 7B68     		ldr	r3, [r7, #4]
 2118 0086 9A42     		cmp	r2, r3
 2119 0088 03D2     		bcs	.L156
1997:FreeRTOS/tasks.c **** 						{
1998:FreeRTOS/tasks.c **** 							/* It is not time to unblock this item yet, but the
1999:FreeRTOS/tasks.c **** 							item value is the time at which the task at the head
2000:FreeRTOS/tasks.c **** 							of the blocked list must be removed from the Blocked
2001:FreeRTOS/tasks.c **** 							state -	so record the item value in
2002:FreeRTOS/tasks.c **** 							xNextTaskUnblockTime. */
2003:FreeRTOS/tasks.c **** 							xNextTaskUnblockTime = xItemValue;
 2120              		.loc 1 2003 0
 2121 008a 2E4A     		ldr	r2, .L163+20
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 74


 2122 008c 7B68     		ldr	r3, [r7, #4]
 2123 008e 1360     		str	r3, [r2]
2004:FreeRTOS/tasks.c **** 							break;
 2124              		.loc 1 2004 0
 2125 0090 2EE0     		b	.L152
 2126              	.L156:
2005:FreeRTOS/tasks.c **** 						}
2006:FreeRTOS/tasks.c **** 						else
2007:FreeRTOS/tasks.c **** 						{
2008:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2009:FreeRTOS/tasks.c **** 						}
2010:FreeRTOS/tasks.c **** 
2011:FreeRTOS/tasks.c **** 						/* It is time to remove the item from the Blocked state. */
2012:FreeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 2127              		.loc 1 2012 0
 2128 0092 BB68     		ldr	r3, [r7, #8]
 2129 0094 0433     		adds	r3, r3, #4
 2130 0096 1846     		mov	r0, r3
 2131 0098 FFF7FEFF 		bl	uxListRemove
2013:FreeRTOS/tasks.c **** 
2014:FreeRTOS/tasks.c **** 						/* Is the task waiting on an event also?  If so remove
2015:FreeRTOS/tasks.c **** 						it from the event list. */
2016:FreeRTOS/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2132              		.loc 1 2016 0
 2133 009c BB68     		ldr	r3, [r7, #8]
 2134 009e 9B6A     		ldr	r3, [r3, #40]
 2135 00a0 002B     		cmp	r3, #0
 2136 00a2 04D0     		beq	.L157
2017:FreeRTOS/tasks.c **** 						{
2018:FreeRTOS/tasks.c **** 							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2137              		.loc 1 2018 0
 2138 00a4 BB68     		ldr	r3, [r7, #8]
 2139 00a6 1833     		adds	r3, r3, #24
 2140 00a8 1846     		mov	r0, r3
 2141 00aa FFF7FEFF 		bl	uxListRemove
 2142              	.L157:
2019:FreeRTOS/tasks.c **** 						}
2020:FreeRTOS/tasks.c **** 						else
2021:FreeRTOS/tasks.c **** 						{
2022:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2023:FreeRTOS/tasks.c **** 						}
2024:FreeRTOS/tasks.c **** 
2025:FreeRTOS/tasks.c **** 						/* Place the unblocked task into the appropriate ready
2026:FreeRTOS/tasks.c **** 						list. */
2027:FreeRTOS/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 2143              		.loc 1 2027 0
 2144 00ae BB68     		ldr	r3, [r7, #8]
 2145 00b0 DB6A     		ldr	r3, [r3, #44]
 2146 00b2 0122     		movs	r2, #1
 2147 00b4 9A40     		lsls	r2, r2, r3
 2148 00b6 244B     		ldr	r3, .L163+24
 2149 00b8 1B68     		ldr	r3, [r3]
 2150 00ba 1343     		orrs	r3, r3, r2
 2151 00bc 224A     		ldr	r2, .L163+24
 2152 00be 1360     		str	r3, [r2]
 2153 00c0 BB68     		ldr	r3, [r7, #8]
 2154 00c2 DA6A     		ldr	r2, [r3, #44]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 75


 2155 00c4 1346     		mov	r3, r2
 2156 00c6 9B00     		lsls	r3, r3, #2
 2157 00c8 1344     		add	r3, r3, r2
 2158 00ca 9B00     		lsls	r3, r3, #2
 2159 00cc 1F4A     		ldr	r2, .L163+28
 2160 00ce 1A44     		add	r2, r2, r3
 2161 00d0 BB68     		ldr	r3, [r7, #8]
 2162 00d2 0433     		adds	r3, r3, #4
 2163 00d4 1946     		mov	r1, r3
 2164 00d6 1046     		mov	r0, r2
 2165 00d8 FFF7FEFF 		bl	vListInsertEnd
2028:FreeRTOS/tasks.c **** 
2029:FreeRTOS/tasks.c **** 						/* A task being unblocked cannot cause an immediate
2030:FreeRTOS/tasks.c **** 						context switch if preemption is turned off. */
2031:FreeRTOS/tasks.c **** 						#if (  configUSE_PREEMPTION == 1 )
2032:FreeRTOS/tasks.c **** 						{
2033:FreeRTOS/tasks.c **** 							/* Preemption is on, but a context switch should
2034:FreeRTOS/tasks.c **** 							only be performed if the unblocked task has a
2035:FreeRTOS/tasks.c **** 							priority that is equal to or higher than the
2036:FreeRTOS/tasks.c **** 							currently executing task. */
2037:FreeRTOS/tasks.c **** 							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2166              		.loc 1 2037 0
 2167 00dc BB68     		ldr	r3, [r7, #8]
 2168 00de DA6A     		ldr	r2, [r3, #44]
 2169 00e0 1B4B     		ldr	r3, .L163+32
 2170 00e2 1B68     		ldr	r3, [r3]
 2171 00e4 DB6A     		ldr	r3, [r3, #44]
 2172 00e6 9A42     		cmp	r2, r3
 2173 00e8 B4D3     		bcc	.L159
2038:FreeRTOS/tasks.c **** 							{
2039:FreeRTOS/tasks.c **** 								xSwitchRequired = pdTRUE;
 2174              		.loc 1 2039 0
 2175 00ea 0123     		movs	r3, #1
 2176 00ec 7B61     		str	r3, [r7, #20]
2040:FreeRTOS/tasks.c **** 							}
2041:FreeRTOS/tasks.c **** 							else
2042:FreeRTOS/tasks.c **** 							{
2043:FreeRTOS/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2044:FreeRTOS/tasks.c **** 							}
2045:FreeRTOS/tasks.c **** 						}
2046:FreeRTOS/tasks.c **** 						#endif /* configUSE_PREEMPTION */
2047:FreeRTOS/tasks.c **** 					}
2048:FreeRTOS/tasks.c **** 				}
 2177              		.loc 1 2048 0
 2178 00ee B1E7     		b	.L159
 2179              	.L152:
 2180              	.LBE8:
2049:FreeRTOS/tasks.c **** 			}
2050:FreeRTOS/tasks.c **** 		}
2051:FreeRTOS/tasks.c **** 
2052:FreeRTOS/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2053:FreeRTOS/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2054:FreeRTOS/tasks.c **** 		writer has not explicitly turned time slicing off. */
2055:FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2056:FreeRTOS/tasks.c **** 		{
2057:FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 2181              		.loc 1 2057 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 76


 2182 00f0 174B     		ldr	r3, .L163+32
 2183 00f2 1B68     		ldr	r3, [r3]
 2184 00f4 DA6A     		ldr	r2, [r3, #44]
 2185 00f6 1549     		ldr	r1, .L163+28
 2186 00f8 1346     		mov	r3, r2
 2187 00fa 9B00     		lsls	r3, r3, #2
 2188 00fc 1344     		add	r3, r3, r2
 2189 00fe 9B00     		lsls	r3, r3, #2
 2190 0100 0B44     		add	r3, r3, r1
 2191 0102 1B68     		ldr	r3, [r3]
 2192 0104 012B     		cmp	r3, #1
 2193 0106 07D9     		bls	.L160
2058:FreeRTOS/tasks.c **** 			{
2059:FreeRTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
 2194              		.loc 1 2059 0
 2195 0108 0123     		movs	r3, #1
 2196 010a 7B61     		str	r3, [r7, #20]
 2197 010c 04E0     		b	.L160
 2198              	.L150:
2060:FreeRTOS/tasks.c **** 			}
2061:FreeRTOS/tasks.c **** 			else
2062:FreeRTOS/tasks.c **** 			{
2063:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2064:FreeRTOS/tasks.c **** 			}
2065:FreeRTOS/tasks.c **** 		}
2066:FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2067:FreeRTOS/tasks.c **** 
2068:FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2069:FreeRTOS/tasks.c **** 		{
2070:FreeRTOS/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2071:FreeRTOS/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2072:FreeRTOS/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2073:FreeRTOS/tasks.c **** 			{
2074:FreeRTOS/tasks.c **** 				vApplicationTickHook();
2075:FreeRTOS/tasks.c **** 			}
2076:FreeRTOS/tasks.c **** 			else
2077:FreeRTOS/tasks.c **** 			{
2078:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2079:FreeRTOS/tasks.c **** 			}
2080:FreeRTOS/tasks.c **** 		}
2081:FreeRTOS/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2082:FreeRTOS/tasks.c **** 	}
2083:FreeRTOS/tasks.c **** 	else
2084:FreeRTOS/tasks.c **** 	{
2085:FreeRTOS/tasks.c **** 		++uxPendedTicks;
 2199              		.loc 1 2085 0
 2200 010e 114B     		ldr	r3, .L163+36
 2201 0110 1B68     		ldr	r3, [r3]
 2202 0112 0133     		adds	r3, r3, #1
 2203 0114 0F4A     		ldr	r2, .L163+36
 2204 0116 1360     		str	r3, [r2]
 2205              	.L160:
2086:FreeRTOS/tasks.c **** 
2087:FreeRTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2088:FreeRTOS/tasks.c **** 		scheduler is locked. */
2089:FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2090:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 77


2091:FreeRTOS/tasks.c **** 			vApplicationTickHook();
2092:FreeRTOS/tasks.c **** 		}
2093:FreeRTOS/tasks.c **** 		#endif
2094:FreeRTOS/tasks.c **** 	}
2095:FreeRTOS/tasks.c **** 
2096:FreeRTOS/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2097:FreeRTOS/tasks.c **** 	{
2098:FreeRTOS/tasks.c **** 		if( xYieldPending != pdFALSE )
 2206              		.loc 1 2098 0
 2207 0118 0F4B     		ldr	r3, .L163+40
 2208 011a 1B68     		ldr	r3, [r3]
 2209 011c 002B     		cmp	r3, #0
 2210 011e 01D0     		beq	.L161
2099:FreeRTOS/tasks.c **** 		{
2100:FreeRTOS/tasks.c **** 			xSwitchRequired = pdTRUE;
 2211              		.loc 1 2100 0
 2212 0120 0123     		movs	r3, #1
 2213 0122 7B61     		str	r3, [r7, #20]
 2214              	.L161:
2101:FreeRTOS/tasks.c **** 		}
2102:FreeRTOS/tasks.c **** 		else
2103:FreeRTOS/tasks.c **** 		{
2104:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2105:FreeRTOS/tasks.c **** 		}
2106:FreeRTOS/tasks.c **** 	}
2107:FreeRTOS/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2108:FreeRTOS/tasks.c **** 
2109:FreeRTOS/tasks.c **** 	return xSwitchRequired;
 2215              		.loc 1 2109 0
 2216 0124 7B69     		ldr	r3, [r7, #20]
2110:FreeRTOS/tasks.c **** }
 2217              		.loc 1 2110 0
 2218 0126 1846     		mov	r0, r3
 2219 0128 1837     		adds	r7, r7, #24
 2220              		.cfi_def_cfa_offset 8
 2221 012a BD46     		mov	sp, r7
 2222              		.cfi_def_cfa_register 13
 2223              		@ sp needed
 2224 012c 80BD     		pop	{r7, pc}
 2225              	.L164:
 2226 012e 00BF     		.align	2
 2227              	.L163:
 2228 0130 FC000000 		.word	uxSchedulerSuspended
 2229 0134 DC000000 		.word	xTickCount
 2230 0138 90000000 		.word	pxDelayedTaskList
 2231 013c 94000000 		.word	pxOverflowDelayedTaskList
 2232 0140 F0000000 		.word	xNumOfOverflows
 2233 0144 F8000000 		.word	xNextTaskUnblockTime
 2234 0148 E0000000 		.word	uxTopReadyPriority
 2235 014c 04000000 		.word	pxReadyTasksLists
 2236 0150 00000000 		.word	pxCurrentTCB
 2237 0154 E8000000 		.word	uxPendedTicks
 2238 0158 EC000000 		.word	xYieldPending
 2239              		.cfi_endproc
 2240              	.LFE83:
 2241              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2242              		.section	.text.vTaskSwitchContext,"ax",%progbits
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 78


 2243              		.align	2
 2244              		.global	vTaskSwitchContext
 2245              		.thumb
 2246              		.thumb_func
 2247              		.type	vTaskSwitchContext, %function
 2248              	vTaskSwitchContext:
 2249              	.LFB84:
2111:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2112:FreeRTOS/tasks.c **** 
2113:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2114:FreeRTOS/tasks.c **** 
2115:FreeRTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2116:FreeRTOS/tasks.c **** 	{
2117:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2118:FreeRTOS/tasks.c **** 
2119:FreeRTOS/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2120:FreeRTOS/tasks.c **** 		getting set. */
2121:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2122:FreeRTOS/tasks.c **** 		{
2123:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2124:FreeRTOS/tasks.c **** 		}
2125:FreeRTOS/tasks.c **** 		else
2126:FreeRTOS/tasks.c **** 		{
2127:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2128:FreeRTOS/tasks.c **** 		}
2129:FreeRTOS/tasks.c **** 
2130:FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2131:FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2132:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2133:FreeRTOS/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2134:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2135:FreeRTOS/tasks.c **** 	}
2136:FreeRTOS/tasks.c **** 
2137:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2138:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2139:FreeRTOS/tasks.c **** 
2140:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2141:FreeRTOS/tasks.c **** 
2142:FreeRTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2143:FreeRTOS/tasks.c **** 	{
2144:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2145:FreeRTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2146:FreeRTOS/tasks.c **** 
2147:FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2148:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2149:FreeRTOS/tasks.c **** 		{
2150:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2151:FreeRTOS/tasks.c **** 		}
2152:FreeRTOS/tasks.c **** 		else
2153:FreeRTOS/tasks.c **** 		{
2154:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2155:FreeRTOS/tasks.c **** 		}
2156:FreeRTOS/tasks.c **** 
2157:FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2158:FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2159:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2160:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 79


2161:FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2162:FreeRTOS/tasks.c **** 		}
2163:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2164:FreeRTOS/tasks.c **** 
2165:FreeRTOS/tasks.c **** 		return xReturn;
2166:FreeRTOS/tasks.c **** 	}
2167:FreeRTOS/tasks.c **** 
2168:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2169:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2170:FreeRTOS/tasks.c **** 
2171:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2172:FreeRTOS/tasks.c **** 
2173:FreeRTOS/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2174:FreeRTOS/tasks.c **** 	{
2175:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2176:FreeRTOS/tasks.c **** 	BaseType_t xReturn;
2177:FreeRTOS/tasks.c **** 
2178:FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2179:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2180:FreeRTOS/tasks.c **** 		{
2181:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2182:FreeRTOS/tasks.c **** 		}
2183:FreeRTOS/tasks.c **** 		else
2184:FreeRTOS/tasks.c **** 		{
2185:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2186:FreeRTOS/tasks.c **** 		}
2187:FreeRTOS/tasks.c **** 
2188:FreeRTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2189:FreeRTOS/tasks.c **** 		{
2190:FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2191:FreeRTOS/tasks.c **** 		}
2192:FreeRTOS/tasks.c **** 		else
2193:FreeRTOS/tasks.c **** 		{
2194:FreeRTOS/tasks.c **** 			xReturn = pdFAIL;
2195:FreeRTOS/tasks.c **** 		}
2196:FreeRTOS/tasks.c **** 
2197:FreeRTOS/tasks.c **** 		return xReturn;
2198:FreeRTOS/tasks.c **** 	}
2199:FreeRTOS/tasks.c **** 
2200:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2201:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2202:FreeRTOS/tasks.c **** 
2203:FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
2204:FreeRTOS/tasks.c **** {
 2250              		.loc 1 2204 0
 2251              		.cfi_startproc
 2252              		@ args = 0, pretend = 0, frame = 24
 2253              		@ frame_needed = 1, uses_anonymous_args = 0
 2254 0000 80B5     		push	{r7, lr}
 2255              		.cfi_def_cfa_offset 8
 2256              		.cfi_offset 7, -8
 2257              		.cfi_offset 14, -4
 2258 0002 86B0     		sub	sp, sp, #24
 2259              		.cfi_def_cfa_offset 32
 2260 0004 00AF     		add	r7, sp, #0
 2261              		.cfi_def_cfa_register 7
2205:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 80


 2262              		.loc 1 2205 0
 2263 0006 2F4B     		ldr	r3, .L173
 2264 0008 1B68     		ldr	r3, [r3]
 2265 000a 002B     		cmp	r3, #0
 2266 000c 03D0     		beq	.L166
2206:FreeRTOS/tasks.c **** 	{
2207:FreeRTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2208:FreeRTOS/tasks.c **** 		switch. */
2209:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
 2267              		.loc 1 2209 0
 2268 000e 2E4B     		ldr	r3, .L173+4
 2269 0010 0122     		movs	r2, #1
 2270 0012 1A60     		str	r2, [r3]
2210:FreeRTOS/tasks.c **** 	}
2211:FreeRTOS/tasks.c **** 	else
2212:FreeRTOS/tasks.c **** 	{
2213:FreeRTOS/tasks.c **** 		xYieldPending = pdFALSE;
2214:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
2215:FreeRTOS/tasks.c **** 
2216:FreeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2217:FreeRTOS/tasks.c **** 		{
2218:FreeRTOS/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2219:FreeRTOS/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2220:FreeRTOS/tasks.c **** 				#else
2221:FreeRTOS/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2222:FreeRTOS/tasks.c **** 				#endif
2223:FreeRTOS/tasks.c **** 
2224:FreeRTOS/tasks.c **** 				/* Add the amount of time the task has been running to the
2225:FreeRTOS/tasks.c **** 				accumulated	time so far.  The time the task started running was
2226:FreeRTOS/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2227:FreeRTOS/tasks.c **** 				protection here	so count values are only valid until the timer
2228:FreeRTOS/tasks.c **** 				overflows.  The guard against negative values is to protect
2229:FreeRTOS/tasks.c **** 				against suspect run time stat counter implementations - which
2230:FreeRTOS/tasks.c **** 				are provided by the application, not the kernel. */
2231:FreeRTOS/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2232:FreeRTOS/tasks.c **** 				{
2233:FreeRTOS/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2234:FreeRTOS/tasks.c **** 				}
2235:FreeRTOS/tasks.c **** 				else
2236:FreeRTOS/tasks.c **** 				{
2237:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2238:FreeRTOS/tasks.c **** 				}
2239:FreeRTOS/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2240:FreeRTOS/tasks.c **** 		}
2241:FreeRTOS/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2242:FreeRTOS/tasks.c **** 
2243:FreeRTOS/tasks.c **** 		/* Check for stack overflow, if configured. */
2244:FreeRTOS/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2245:FreeRTOS/tasks.c **** 
2246:FreeRTOS/tasks.c **** 		/* Select a new task to run using either the generic C or port
2247:FreeRTOS/tasks.c **** 		optimised asm code. */
2248:FreeRTOS/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2249:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
2250:FreeRTOS/tasks.c **** 
2251:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2252:FreeRTOS/tasks.c **** 		{
2253:FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 81


2254:FreeRTOS/tasks.c **** 			structure specific to this task. */
2255:FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2256:FreeRTOS/tasks.c **** 		}
2257:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2258:FreeRTOS/tasks.c **** 	}
2259:FreeRTOS/tasks.c **** }
 2271              		.loc 1 2259 0
 2272 0014 51E0     		b	.L172
 2273              	.L166:
2213:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2274              		.loc 1 2213 0
 2275 0016 2C4B     		ldr	r3, .L173+4
 2276 0018 0022     		movs	r2, #0
 2277 001a 1A60     		str	r2, [r3]
 2278              	.LBB10:
2244:FreeRTOS/tasks.c **** 
 2279              		.loc 1 2244 0
 2280 001c 2B4B     		ldr	r3, .L173+8
 2281 001e 1B68     		ldr	r3, [r3]
 2282 0020 1B6B     		ldr	r3, [r3, #48]
 2283 0022 7B61     		str	r3, [r7, #20]
 2284 0024 4FF0A533 		mov	r3, #-1515870811
 2285 0028 3B61     		str	r3, [r7, #16]
 2286 002a 7B69     		ldr	r3, [r7, #20]
 2287 002c 1A68     		ldr	r2, [r3]
 2288 002e 3B69     		ldr	r3, [r7, #16]
 2289 0030 9A42     		cmp	r2, r3
 2290 0032 11D1     		bne	.L168
2244:FreeRTOS/tasks.c **** 
 2291              		.loc 1 2244 0 is_stmt 0 discriminator 2
 2292 0034 7B69     		ldr	r3, [r7, #20]
 2293 0036 0433     		adds	r3, r3, #4
 2294 0038 1A68     		ldr	r2, [r3]
 2295 003a 3B69     		ldr	r3, [r7, #16]
 2296 003c 9A42     		cmp	r2, r3
 2297 003e 0BD1     		bne	.L168
2244:FreeRTOS/tasks.c **** 
 2298              		.loc 1 2244 0 discriminator 4
 2299 0040 7B69     		ldr	r3, [r7, #20]
 2300 0042 0833     		adds	r3, r3, #8
 2301 0044 1A68     		ldr	r2, [r3]
 2302 0046 3B69     		ldr	r3, [r7, #16]
 2303 0048 9A42     		cmp	r2, r3
 2304 004a 05D1     		bne	.L168
2244:FreeRTOS/tasks.c **** 
 2305              		.loc 1 2244 0 discriminator 6
 2306 004c 7B69     		ldr	r3, [r7, #20]
 2307 004e 0C33     		adds	r3, r3, #12
 2308 0050 1A68     		ldr	r2, [r3]
 2309 0052 3B69     		ldr	r3, [r7, #16]
 2310 0054 9A42     		cmp	r2, r3
 2311 0056 08D0     		beq	.L169
 2312              	.L168:
2244:FreeRTOS/tasks.c **** 
 2313              		.loc 1 2244 0 discriminator 7
 2314 0058 1C4B     		ldr	r3, .L173+8
 2315 005a 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 82


 2316 005c 1B4B     		ldr	r3, .L173+8
 2317 005e 1B68     		ldr	r3, [r3]
 2318 0060 3433     		adds	r3, r3, #52
 2319 0062 1946     		mov	r1, r3
 2320 0064 1046     		mov	r0, r2
 2321 0066 FFF7FEFF 		bl	vApplicationStackOverflowHook
 2322              	.L169:
 2323              	.LBE10:
 2324              	.LBB11:
2248:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2325              		.loc 1 2248 0 is_stmt 1
 2326 006a 194B     		ldr	r3, .L173+12
 2327 006c 1B68     		ldr	r3, [r3]
 2328 006e 7B60     		str	r3, [r7, #4]
 2329              	.LBB12:
 2330              	.LBB13:
 2331              		.file 2 "FreeRTOS\\portmacro.h"
   1:FreeRTOS/portmacro.h **** /*
   2:FreeRTOS/portmacro.h ****     FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:FreeRTOS/portmacro.h ****     All rights reserved
   4:FreeRTOS/portmacro.h **** 
   5:FreeRTOS/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/portmacro.h **** 
   7:FreeRTOS/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:FreeRTOS/portmacro.h **** 
   9:FreeRTOS/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:FreeRTOS/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:FreeRTOS/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:FreeRTOS/portmacro.h **** 
  13:FreeRTOS/portmacro.h ****     ***************************************************************************
  14:FreeRTOS/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:FreeRTOS/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:FreeRTOS/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:FreeRTOS/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:FreeRTOS/portmacro.h ****     ***************************************************************************
  19:FreeRTOS/portmacro.h **** 
  20:FreeRTOS/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:FreeRTOS/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:FreeRTOS/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:FreeRTOS/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:FreeRTOS/portmacro.h **** 
  25:FreeRTOS/portmacro.h ****     ***************************************************************************
  26:FreeRTOS/portmacro.h ****      *                                                                       *
  27:FreeRTOS/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:FreeRTOS/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:FreeRTOS/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:FreeRTOS/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:FreeRTOS/portmacro.h ****      *                                                                       *
  32:FreeRTOS/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:FreeRTOS/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:FreeRTOS/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:FreeRTOS/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:FreeRTOS/portmacro.h ****      *                                                                       *
  37:FreeRTOS/portmacro.h ****     ***************************************************************************
  38:FreeRTOS/portmacro.h **** 
  39:FreeRTOS/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:FreeRTOS/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 83


  41:FreeRTOS/portmacro.h ****     defined configASSERT()?
  42:FreeRTOS/portmacro.h **** 
  43:FreeRTOS/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:FreeRTOS/portmacro.h ****     embedded software for free we request you assist our global community by
  45:FreeRTOS/portmacro.h ****     participating in the support forum.
  46:FreeRTOS/portmacro.h **** 
  47:FreeRTOS/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:FreeRTOS/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:FreeRTOS/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:FreeRTOS/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:FreeRTOS/portmacro.h **** 
  52:FreeRTOS/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:FreeRTOS/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:FreeRTOS/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:FreeRTOS/portmacro.h **** 
  56:FreeRTOS/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:FreeRTOS/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:FreeRTOS/portmacro.h **** 
  59:FreeRTOS/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:FreeRTOS/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:FreeRTOS/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:FreeRTOS/portmacro.h **** 
  63:FreeRTOS/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:FreeRTOS/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:FreeRTOS/portmacro.h ****     mission critical applications that require provable dependability.
  66:FreeRTOS/portmacro.h **** 
  67:FreeRTOS/portmacro.h ****     1 tab == 4 spaces!
  68:FreeRTOS/portmacro.h **** */
  69:FreeRTOS/portmacro.h **** 
  70:FreeRTOS/portmacro.h **** 
  71:FreeRTOS/portmacro.h **** #ifndef PORTMACRO_H
  72:FreeRTOS/portmacro.h **** #define PORTMACRO_H
  73:FreeRTOS/portmacro.h **** 
  74:FreeRTOS/portmacro.h **** #ifdef __cplusplus
  75:FreeRTOS/portmacro.h **** extern "C" {
  76:FreeRTOS/portmacro.h **** #endif
  77:FreeRTOS/portmacro.h **** 
  78:FreeRTOS/portmacro.h **** /*-----------------------------------------------------------
  79:FreeRTOS/portmacro.h ****  * Port specific definitions.
  80:FreeRTOS/portmacro.h ****  *
  81:FreeRTOS/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:FreeRTOS/portmacro.h ****  * given hardware and compiler.
  83:FreeRTOS/portmacro.h ****  *
  84:FreeRTOS/portmacro.h ****  * These settings should not be altered.
  85:FreeRTOS/portmacro.h ****  *-----------------------------------------------------------
  86:FreeRTOS/portmacro.h ****  */
  87:FreeRTOS/portmacro.h **** 
  88:FreeRTOS/portmacro.h **** /* Type definitions. */
  89:FreeRTOS/portmacro.h **** #define portCHAR		char
  90:FreeRTOS/portmacro.h **** #define portFLOAT		float
  91:FreeRTOS/portmacro.h **** #define portDOUBLE		double
  92:FreeRTOS/portmacro.h **** #define portLONG		long
  93:FreeRTOS/portmacro.h **** #define portSHORT		short
  94:FreeRTOS/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:FreeRTOS/portmacro.h **** #define portBASE_TYPE	long
  96:FreeRTOS/portmacro.h **** 
  97:FreeRTOS/portmacro.h **** typedef portSTACK_TYPE StackType_t;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 84


  98:FreeRTOS/portmacro.h **** typedef long BaseType_t;
  99:FreeRTOS/portmacro.h **** typedef unsigned long UBaseType_t;
 100:FreeRTOS/portmacro.h **** 
 101:FreeRTOS/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:FreeRTOS/portmacro.h **** 	typedef uint16_t TickType_t;
 103:FreeRTOS/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:FreeRTOS/portmacro.h **** #else
 105:FreeRTOS/portmacro.h **** 	typedef uint32_t TickType_t;
 106:FreeRTOS/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:FreeRTOS/portmacro.h **** 
 108:FreeRTOS/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:FreeRTOS/portmacro.h **** 	not need to be guarded with a critical section. */
 110:FreeRTOS/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:FreeRTOS/portmacro.h **** #endif
 112:FreeRTOS/portmacro.h **** /*-----------------------------------------------------------*/
 113:FreeRTOS/portmacro.h **** 
 114:FreeRTOS/portmacro.h **** /* Architecture specifics. */
 115:FreeRTOS/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:FreeRTOS/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:FreeRTOS/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:FreeRTOS/portmacro.h **** /*-----------------------------------------------------------*/
 119:FreeRTOS/portmacro.h **** 
 120:FreeRTOS/portmacro.h **** 
 121:FreeRTOS/portmacro.h **** /* Scheduler utilities. */
 122:FreeRTOS/portmacro.h **** extern void vPortYield( void );
 123:FreeRTOS/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 124:FreeRTOS/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 125:FreeRTOS/portmacro.h **** #define portYIELD()					vPortYield()
 126:FreeRTOS/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired ) portNVIC_INT_CTRL_REG = port
 127:FreeRTOS/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 128:FreeRTOS/portmacro.h **** /*-----------------------------------------------------------*/
 129:FreeRTOS/portmacro.h **** 
 130:FreeRTOS/portmacro.h **** /* Critical section management. */
 131:FreeRTOS/portmacro.h **** extern void vPortEnterCritical( void );
 132:FreeRTOS/portmacro.h **** extern void vPortExitCritical( void );
 133:FreeRTOS/portmacro.h **** extern uint32_t ulPortSetInterruptMask( void );
 134:FreeRTOS/portmacro.h **** extern void vPortClearInterruptMask( uint32_t ulNewMaskValue );
 135:FreeRTOS/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortSetInterruptMask()
 136:FreeRTOS/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortClearInterruptMask(x)
 137:FreeRTOS/portmacro.h **** #define portDISABLE_INTERRUPTS()				ulPortSetInterruptMask()
 138:FreeRTOS/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortClearInterruptMask(0)
 139:FreeRTOS/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 140:FreeRTOS/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 141:FreeRTOS/portmacro.h **** /*-----------------------------------------------------------*/
 142:FreeRTOS/portmacro.h **** 
 143:FreeRTOS/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 144:FreeRTOS/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 145:FreeRTOS/portmacro.h **** (which build with all the ports) will build. */
 146:FreeRTOS/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 147:FreeRTOS/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 148:FreeRTOS/portmacro.h **** /*-----------------------------------------------------------*/
 149:FreeRTOS/portmacro.h **** 
 150:FreeRTOS/portmacro.h **** /* Tickless idle/low power functionality. */
 151:FreeRTOS/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 152:FreeRTOS/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 153:FreeRTOS/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 154:FreeRTOS/portmacro.h **** #endif
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 85


 155:FreeRTOS/portmacro.h **** /*-----------------------------------------------------------*/
 156:FreeRTOS/portmacro.h **** 
 157:FreeRTOS/portmacro.h **** /* Architecture specific optimisations. */
 158:FreeRTOS/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 159:FreeRTOS/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 160:FreeRTOS/portmacro.h **** #endif
 161:FreeRTOS/portmacro.h **** 
 162:FreeRTOS/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 163:FreeRTOS/portmacro.h **** 
 164:FreeRTOS/portmacro.h **** 	/* Generic helper function. */
 165:FreeRTOS/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 166:FreeRTOS/portmacro.h **** 	{
 167:FreeRTOS/portmacro.h **** 	uint8_t ucReturn;
 168:FreeRTOS/portmacro.h **** 
 169:FreeRTOS/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 2332              		.loc 2 169 0
 2333 0070 7B68     		ldr	r3, [r7, #4]
 2334              		.syntax unified
 2335              	@ 169 "FreeRTOS\portmacro.h" 1
 2336 0072 B3FA83F3 		clz r3, r3
 2337              	@ 0 "" 2
 2338              		.thumb
 2339              		.syntax unified
 2340 0076 FB70     		strb	r3, [r7, #3]
 170:FreeRTOS/portmacro.h **** 		return ucReturn;
 2341              		.loc 2 170 0
 2342 0078 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2343              	.LBE13:
 2344              	.LBE12:
2248:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2345              		.loc 1 2248 0
 2346 007a C3F11F03 		rsb	r3, r3, #31
 2347 007e FB60     		str	r3, [r7, #12]
 2348              	.LBB14:
 2349 0080 FA68     		ldr	r2, [r7, #12]
 2350 0082 1346     		mov	r3, r2
 2351 0084 9B00     		lsls	r3, r3, #2
 2352 0086 1344     		add	r3, r3, r2
 2353 0088 9B00     		lsls	r3, r3, #2
 2354 008a 124A     		ldr	r2, .L173+16
 2355 008c 1344     		add	r3, r3, r2
 2356 008e BB60     		str	r3, [r7, #8]
 2357 0090 BB68     		ldr	r3, [r7, #8]
 2358 0092 5B68     		ldr	r3, [r3, #4]
 2359 0094 5A68     		ldr	r2, [r3, #4]
 2360 0096 BB68     		ldr	r3, [r7, #8]
 2361 0098 5A60     		str	r2, [r3, #4]
 2362 009a BB68     		ldr	r3, [r7, #8]
 2363 009c 5A68     		ldr	r2, [r3, #4]
 2364 009e BB68     		ldr	r3, [r7, #8]
 2365 00a0 0833     		adds	r3, r3, #8
 2366 00a2 9A42     		cmp	r2, r3
 2367 00a4 04D1     		bne	.L171
2248:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2368              		.loc 1 2248 0 is_stmt 0 discriminator 1
 2369 00a6 BB68     		ldr	r3, [r7, #8]
 2370 00a8 5B68     		ldr	r3, [r3, #4]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 86


 2371 00aa 5A68     		ldr	r2, [r3, #4]
 2372 00ac BB68     		ldr	r3, [r7, #8]
 2373 00ae 5A60     		str	r2, [r3, #4]
 2374              	.L171:
2248:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2375              		.loc 1 2248 0 discriminator 3
 2376 00b0 BB68     		ldr	r3, [r7, #8]
 2377 00b2 5B68     		ldr	r3, [r3, #4]
 2378 00b4 DB68     		ldr	r3, [r3, #12]
 2379 00b6 054A     		ldr	r2, .L173+8
 2380 00b8 1360     		str	r3, [r2]
 2381              	.L172:
 2382              	.LBE14:
 2383              	.LBE11:
 2384              		.loc 1 2259 0 is_stmt 1
 2385 00ba 00BF     		nop
 2386 00bc 1837     		adds	r7, r7, #24
 2387              		.cfi_def_cfa_offset 8
 2388 00be BD46     		mov	sp, r7
 2389              		.cfi_def_cfa_register 13
 2390              		@ sp needed
 2391 00c0 80BD     		pop	{r7, pc}
 2392              	.L174:
 2393 00c2 00BF     		.align	2
 2394              	.L173:
 2395 00c4 FC000000 		.word	uxSchedulerSuspended
 2396 00c8 EC000000 		.word	xYieldPending
 2397 00cc 00000000 		.word	pxCurrentTCB
 2398 00d0 E0000000 		.word	uxTopReadyPriority
 2399 00d4 04000000 		.word	pxReadyTasksLists
 2400              		.cfi_endproc
 2401              	.LFE84:
 2402              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2403              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2404              		.align	2
 2405              		.global	vTaskPlaceOnEventList
 2406              		.thumb
 2407              		.thumb_func
 2408              		.type	vTaskPlaceOnEventList, %function
 2409              	vTaskPlaceOnEventList:
 2410              	.LFB85:
2260:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2261:FreeRTOS/tasks.c **** 
2262:FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2263:FreeRTOS/tasks.c **** {
 2411              		.loc 1 2263 0
 2412              		.cfi_startproc
 2413              		@ args = 0, pretend = 0, frame = 16
 2414              		@ frame_needed = 1, uses_anonymous_args = 0
 2415 0000 80B5     		push	{r7, lr}
 2416              		.cfi_def_cfa_offset 8
 2417              		.cfi_offset 7, -8
 2418              		.cfi_offset 14, -4
 2419 0002 84B0     		sub	sp, sp, #16
 2420              		.cfi_def_cfa_offset 24
 2421 0004 00AF     		add	r7, sp, #0
 2422              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 87


 2423 0006 7860     		str	r0, [r7, #4]
 2424 0008 3960     		str	r1, [r7]
2264:FreeRTOS/tasks.c **** TickType_t xTimeToWake;
2265:FreeRTOS/tasks.c **** 
2266:FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
2267:FreeRTOS/tasks.c **** 
2268:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2269:FreeRTOS/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2270:FreeRTOS/tasks.c **** 
2271:FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2272:FreeRTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2273:FreeRTOS/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2274:FreeRTOS/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2275:FreeRTOS/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2425              		.loc 1 2275 0
 2426 000a 1A4B     		ldr	r3, .L180
 2427 000c 1B68     		ldr	r3, [r3]
 2428 000e 1833     		adds	r3, r3, #24
 2429 0010 1946     		mov	r1, r3
 2430 0012 7868     		ldr	r0, [r7, #4]
 2431 0014 FFF7FEFF 		bl	vListInsert
2276:FreeRTOS/tasks.c **** 
2277:FreeRTOS/tasks.c **** 	/* The task must be removed from from the ready list before it is added to
2278:FreeRTOS/tasks.c **** 	the blocked list as the same list item is used for both lists.  Exclusive
2279:FreeRTOS/tasks.c **** 	access to the ready lists guaranteed because the scheduler is locked. */
2280:FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 2432              		.loc 1 2280 0
 2433 0018 164B     		ldr	r3, .L180
 2434 001a 1B68     		ldr	r3, [r3]
 2435 001c 0433     		adds	r3, r3, #4
 2436 001e 1846     		mov	r0, r3
 2437 0020 FFF7FEFF 		bl	uxListRemove
 2438 0024 0346     		mov	r3, r0
 2439 0026 002B     		cmp	r3, #0
 2440 0028 0BD1     		bne	.L176
2281:FreeRTOS/tasks.c **** 	{
2282:FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2283:FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
2284:FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 2441              		.loc 1 2284 0
 2442 002a 124B     		ldr	r3, .L180
 2443 002c 1B68     		ldr	r3, [r3]
 2444 002e DB6A     		ldr	r3, [r3, #44]
 2445 0030 0122     		movs	r2, #1
 2446 0032 02FA03F3 		lsl	r3, r2, r3
 2447 0036 DA43     		mvns	r2, r3
 2448 0038 0F4B     		ldr	r3, .L180+4
 2449 003a 1B68     		ldr	r3, [r3]
 2450 003c 1340     		ands	r3, r3, r2
 2451 003e 0E4A     		ldr	r2, .L180+4
 2452 0040 1360     		str	r3, [r2]
 2453              	.L176:
2285:FreeRTOS/tasks.c **** 	}
2286:FreeRTOS/tasks.c **** 	else
2287:FreeRTOS/tasks.c **** 	{
2288:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2289:FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 88


2290:FreeRTOS/tasks.c **** 
2291:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2292:FreeRTOS/tasks.c **** 	{
2293:FreeRTOS/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2454              		.loc 1 2293 0
 2455 0042 3B68     		ldr	r3, [r7]
 2456 0044 B3F1FF3F 		cmp	r3, #-1
 2457 0048 07D1     		bne	.L177
2294:FreeRTOS/tasks.c **** 		{
2295:FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2296:FreeRTOS/tasks.c **** 			list to ensure the task is not woken by a timing event.  It will
2297:FreeRTOS/tasks.c **** 			block indefinitely. */
2298:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 2458              		.loc 1 2298 0
 2459 004a 0A4B     		ldr	r3, .L180
 2460 004c 1B68     		ldr	r3, [r3]
 2461 004e 0433     		adds	r3, r3, #4
 2462 0050 1946     		mov	r1, r3
 2463 0052 0A48     		ldr	r0, .L180+8
 2464 0054 FFF7FEFF 		bl	vListInsertEnd
2299:FreeRTOS/tasks.c **** 		}
2300:FreeRTOS/tasks.c **** 		else
2301:FreeRTOS/tasks.c **** 		{
2302:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2303:FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2304:FreeRTOS/tasks.c **** 			scheduler will handle it. */
2305:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2306:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2307:FreeRTOS/tasks.c **** 		}
2308:FreeRTOS/tasks.c **** 	}
2309:FreeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2310:FreeRTOS/tasks.c **** 	{
2311:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2312:FreeRTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the scheduler
2313:FreeRTOS/tasks.c **** 			will handle it. */
2314:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2315:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2316:FreeRTOS/tasks.c **** 	}
2317:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2318:FreeRTOS/tasks.c **** }
 2465              		.loc 1 2318 0
 2466 0058 07E0     		b	.L179
 2467              	.L177:
2305:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2468              		.loc 1 2305 0
 2469 005a 094B     		ldr	r3, .L180+12
 2470 005c 1A68     		ldr	r2, [r3]
 2471 005e 3B68     		ldr	r3, [r7]
 2472 0060 1344     		add	r3, r3, r2
 2473 0062 FB60     		str	r3, [r7, #12]
2306:FreeRTOS/tasks.c **** 		}
 2474              		.loc 1 2306 0
 2475 0064 F868     		ldr	r0, [r7, #12]
 2476 0066 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2477              	.L179:
 2478              		.loc 1 2318 0
 2479 006a 00BF     		nop
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 89


 2480 006c 1037     		adds	r7, r7, #16
 2481              		.cfi_def_cfa_offset 8
 2482 006e BD46     		mov	sp, r7
 2483              		.cfi_def_cfa_register 13
 2484              		@ sp needed
 2485 0070 80BD     		pop	{r7, pc}
 2486              	.L181:
 2487 0072 00BF     		.align	2
 2488              	.L180:
 2489 0074 00000000 		.word	pxCurrentTCB
 2490 0078 E0000000 		.word	uxTopReadyPriority
 2491 007c C4000000 		.word	xSuspendedTaskList
 2492 0080 DC000000 		.word	xTickCount
 2493              		.cfi_endproc
 2494              	.LFE85:
 2495              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2496              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2497              		.align	2
 2498              		.global	vTaskPlaceOnUnorderedEventList
 2499              		.thumb
 2500              		.thumb_func
 2501              		.type	vTaskPlaceOnUnorderedEventList, %function
 2502              	vTaskPlaceOnUnorderedEventList:
 2503              	.LFB86:
2319:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2320:FreeRTOS/tasks.c **** 
2321:FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2322:FreeRTOS/tasks.c **** {
 2504              		.loc 1 2322 0
 2505              		.cfi_startproc
 2506              		@ args = 0, pretend = 0, frame = 24
 2507              		@ frame_needed = 1, uses_anonymous_args = 0
 2508 0000 80B5     		push	{r7, lr}
 2509              		.cfi_def_cfa_offset 8
 2510              		.cfi_offset 7, -8
 2511              		.cfi_offset 14, -4
 2512 0002 86B0     		sub	sp, sp, #24
 2513              		.cfi_def_cfa_offset 32
 2514 0004 00AF     		add	r7, sp, #0
 2515              		.cfi_def_cfa_register 7
 2516 0006 F860     		str	r0, [r7, #12]
 2517 0008 B960     		str	r1, [r7, #8]
 2518 000a 7A60     		str	r2, [r7, #4]
2323:FreeRTOS/tasks.c **** TickType_t xTimeToWake;
2324:FreeRTOS/tasks.c **** 
2325:FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
2326:FreeRTOS/tasks.c **** 
2327:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2328:FreeRTOS/tasks.c **** 	the event groups implementation. */
2329:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2330:FreeRTOS/tasks.c **** 
2331:FreeRTOS/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2332:FreeRTOS/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2333:FreeRTOS/tasks.c **** 	task that is not in the Blocked state. */
2334:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 2519              		.loc 1 2334 0
 2520 000c 1C4B     		ldr	r3, .L187
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 90


 2521 000e 1B68     		ldr	r3, [r3]
 2522 0010 BA68     		ldr	r2, [r7, #8]
 2523 0012 42F00042 		orr	r2, r2, #-2147483648
 2524 0016 9A61     		str	r2, [r3, #24]
2335:FreeRTOS/tasks.c **** 
2336:FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2337:FreeRTOS/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2338:FreeRTOS/tasks.c **** 	event group implementation - and interrupts don't access event groups
2339:FreeRTOS/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2340:FreeRTOS/tasks.c **** 	the task level). */
2341:FreeRTOS/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2525              		.loc 1 2341 0
 2526 0018 194B     		ldr	r3, .L187
 2527 001a 1B68     		ldr	r3, [r3]
 2528 001c 1833     		adds	r3, r3, #24
 2529 001e 1946     		mov	r1, r3
 2530 0020 F868     		ldr	r0, [r7, #12]
 2531 0022 FFF7FEFF 		bl	vListInsertEnd
2342:FreeRTOS/tasks.c **** 
2343:FreeRTOS/tasks.c **** 	/* The task must be removed from the ready list before it is added to the
2344:FreeRTOS/tasks.c **** 	blocked list.  Exclusive access can be assured to the ready list as the
2345:FreeRTOS/tasks.c **** 	scheduler is locked. */
2346:FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 2532              		.loc 1 2346 0
 2533 0026 164B     		ldr	r3, .L187
 2534 0028 1B68     		ldr	r3, [r3]
 2535 002a 0433     		adds	r3, r3, #4
 2536 002c 1846     		mov	r0, r3
 2537 002e FFF7FEFF 		bl	uxListRemove
 2538 0032 0346     		mov	r3, r0
 2539 0034 002B     		cmp	r3, #0
 2540 0036 0BD1     		bne	.L183
2347:FreeRTOS/tasks.c **** 	{
2348:FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2349:FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
2350:FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 2541              		.loc 1 2350 0
 2542 0038 114B     		ldr	r3, .L187
 2543 003a 1B68     		ldr	r3, [r3]
 2544 003c DB6A     		ldr	r3, [r3, #44]
 2545 003e 0122     		movs	r2, #1
 2546 0040 02FA03F3 		lsl	r3, r2, r3
 2547 0044 DA43     		mvns	r2, r3
 2548 0046 0F4B     		ldr	r3, .L187+4
 2549 0048 1B68     		ldr	r3, [r3]
 2550 004a 1340     		ands	r3, r3, r2
 2551 004c 0D4A     		ldr	r2, .L187+4
 2552 004e 1360     		str	r3, [r2]
 2553              	.L183:
2351:FreeRTOS/tasks.c **** 	}
2352:FreeRTOS/tasks.c **** 	else
2353:FreeRTOS/tasks.c **** 	{
2354:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2355:FreeRTOS/tasks.c **** 	}
2356:FreeRTOS/tasks.c **** 
2357:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2358:FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 91


2359:FreeRTOS/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2554              		.loc 1 2359 0
 2555 0050 7B68     		ldr	r3, [r7, #4]
 2556 0052 B3F1FF3F 		cmp	r3, #-1
 2557 0056 07D1     		bne	.L184
2360:FreeRTOS/tasks.c **** 		{
2361:FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2362:FreeRTOS/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
2363:FreeRTOS/tasks.c **** 			indefinitely. */
2364:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 2558              		.loc 1 2364 0
 2559 0058 094B     		ldr	r3, .L187
 2560 005a 1B68     		ldr	r3, [r3]
 2561 005c 0433     		adds	r3, r3, #4
 2562 005e 1946     		mov	r1, r3
 2563 0060 0948     		ldr	r0, .L187+8
 2564 0062 FFF7FEFF 		bl	vListInsertEnd
2365:FreeRTOS/tasks.c **** 		}
2366:FreeRTOS/tasks.c **** 		else
2367:FreeRTOS/tasks.c **** 		{
2368:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2369:FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2370:FreeRTOS/tasks.c **** 			kernel will manage it correctly. */
2371:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2372:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2373:FreeRTOS/tasks.c **** 		}
2374:FreeRTOS/tasks.c **** 	}
2375:FreeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2376:FreeRTOS/tasks.c **** 	{
2377:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2378:FreeRTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the kernel
2379:FreeRTOS/tasks.c **** 			will manage it correctly. */
2380:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2381:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2382:FreeRTOS/tasks.c **** 	}
2383:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2384:FreeRTOS/tasks.c **** }
 2565              		.loc 1 2384 0
 2566 0066 07E0     		b	.L186
 2567              	.L184:
2371:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2568              		.loc 1 2371 0
 2569 0068 084B     		ldr	r3, .L187+12
 2570 006a 1A68     		ldr	r2, [r3]
 2571 006c 7B68     		ldr	r3, [r7, #4]
 2572 006e 1344     		add	r3, r3, r2
 2573 0070 7B61     		str	r3, [r7, #20]
2372:FreeRTOS/tasks.c **** 		}
 2574              		.loc 1 2372 0
 2575 0072 7869     		ldr	r0, [r7, #20]
 2576 0074 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2577              	.L186:
 2578              		.loc 1 2384 0
 2579 0078 00BF     		nop
 2580 007a 1837     		adds	r7, r7, #24
 2581              		.cfi_def_cfa_offset 8
 2582 007c BD46     		mov	sp, r7
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 92


 2583              		.cfi_def_cfa_register 13
 2584              		@ sp needed
 2585 007e 80BD     		pop	{r7, pc}
 2586              	.L188:
 2587              		.align	2
 2588              	.L187:
 2589 0080 00000000 		.word	pxCurrentTCB
 2590 0084 E0000000 		.word	uxTopReadyPriority
 2591 0088 C4000000 		.word	xSuspendedTaskList
 2592 008c DC000000 		.word	xTickCount
 2593              		.cfi_endproc
 2594              	.LFE86:
 2595              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2596              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2597              		.align	2
 2598              		.global	xTaskRemoveFromEventList
 2599              		.thumb
 2600              		.thumb_func
 2601              		.type	xTaskRemoveFromEventList, %function
 2602              	xTaskRemoveFromEventList:
 2603              	.LFB87:
2385:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2386:FreeRTOS/tasks.c **** 
2387:FreeRTOS/tasks.c **** #if configUSE_TIMERS == 1
2388:FreeRTOS/tasks.c **** 
2389:FreeRTOS/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, c
2390:FreeRTOS/tasks.c **** 	{
2391:FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
2392:FreeRTOS/tasks.c **** 
2393:FreeRTOS/tasks.c **** 		configASSERT( pxEventList );
2394:FreeRTOS/tasks.c **** 
2395:FreeRTOS/tasks.c **** 		/* This function should not be called by application code hence the
2396:FreeRTOS/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2397:FreeRTOS/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2398:FreeRTOS/tasks.c **** 		it should be called with the scheduler suspended. */
2399:FreeRTOS/tasks.c **** 
2400:FreeRTOS/tasks.c **** 
2401:FreeRTOS/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2402:FreeRTOS/tasks.c **** 		In this case it is assume that this is the only task that is going to
2403:FreeRTOS/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2404:FreeRTOS/tasks.c **** 		can be used in place of vListInsert. */
2405:FreeRTOS/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2406:FreeRTOS/tasks.c **** 
2407:FreeRTOS/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
2408:FreeRTOS/tasks.c **** 		blocked list as the same list item is used for both lists.  This
2409:FreeRTOS/tasks.c **** 		function is called with the scheduler locked so interrupts will not
2410:FreeRTOS/tasks.c **** 		access the lists at the same time. */
2411:FreeRTOS/tasks.c **** 		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
2412:FreeRTOS/tasks.c **** 		{
2413:FreeRTOS/tasks.c **** 			/* The current task must be in a ready list, so there is no need to
2414:FreeRTOS/tasks.c **** 			check, and the port reset macro can be called directly. */
2415:FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2416:FreeRTOS/tasks.c **** 		}
2417:FreeRTOS/tasks.c **** 		else
2418:FreeRTOS/tasks.c **** 		{
2419:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2420:FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 93


2421:FreeRTOS/tasks.c **** 
2422:FreeRTOS/tasks.c **** 		/* If vTaskSuspend() is available then the suspended task list is also
2423:FreeRTOS/tasks.c **** 		available and a task that is blocking indefinitely can enter the
2424:FreeRTOS/tasks.c **** 		suspended state (it is not really suspended as it will re-enter the
2425:FreeRTOS/tasks.c **** 		Ready state when the event it is waiting indefinitely for occurs).
2426:FreeRTOS/tasks.c **** 		Blocking indefinitely is useful when using tickless idle mode as when
2427:FreeRTOS/tasks.c **** 		all tasks are blocked indefinitely all timers can be turned off. */
2428:FreeRTOS/tasks.c **** 		#if( INCLUDE_vTaskSuspend == 1 )
2429:FreeRTOS/tasks.c **** 		{
2430:FreeRTOS/tasks.c **** 			if( xWaitIndefinitely == pdTRUE )
2431:FreeRTOS/tasks.c **** 			{
2432:FreeRTOS/tasks.c **** 				/* Add the task to the suspended task list instead of a delayed
2433:FreeRTOS/tasks.c **** 				task list to ensure the task is not woken by a timing event.  It
2434:FreeRTOS/tasks.c **** 				will block indefinitely. */
2435:FreeRTOS/tasks.c **** 				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2436:FreeRTOS/tasks.c **** 			}
2437:FreeRTOS/tasks.c **** 			else
2438:FreeRTOS/tasks.c **** 			{
2439:FreeRTOS/tasks.c **** 				/* Calculate the time at which the task should be woken if the
2440:FreeRTOS/tasks.c **** 				event does not occur.  This may overflow but this doesn't
2441:FreeRTOS/tasks.c **** 				matter. */
2442:FreeRTOS/tasks.c **** 				xTimeToWake = xTickCount + xTicksToWait;
2443:FreeRTOS/tasks.c **** 				traceTASK_DELAY_UNTIL();
2444:FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
2445:FreeRTOS/tasks.c **** 			}
2446:FreeRTOS/tasks.c **** 		}
2447:FreeRTOS/tasks.c **** 		#else
2448:FreeRTOS/tasks.c **** 		{
2449:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2450:FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter. */
2451:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2452:FreeRTOS/tasks.c **** 			traceTASK_DELAY_UNTIL();
2453:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2454:FreeRTOS/tasks.c **** 
2455:FreeRTOS/tasks.c **** 			/* Remove compiler warnings when INCLUDE_vTaskSuspend() is not
2456:FreeRTOS/tasks.c **** 			defined. */
2457:FreeRTOS/tasks.c **** 			( void ) xWaitIndefinitely;
2458:FreeRTOS/tasks.c **** 		}
2459:FreeRTOS/tasks.c **** 		#endif
2460:FreeRTOS/tasks.c **** 	}
2461:FreeRTOS/tasks.c **** 
2462:FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
2463:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2464:FreeRTOS/tasks.c **** 
2465:FreeRTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2466:FreeRTOS/tasks.c **** {
 2604              		.loc 1 2466 0
 2605              		.cfi_startproc
 2606              		@ args = 0, pretend = 0, frame = 16
 2607              		@ frame_needed = 1, uses_anonymous_args = 0
 2608 0000 80B5     		push	{r7, lr}
 2609              		.cfi_def_cfa_offset 8
 2610              		.cfi_offset 7, -8
 2611              		.cfi_offset 14, -4
 2612 0002 84B0     		sub	sp, sp, #16
 2613              		.cfi_def_cfa_offset 24
 2614 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 94


 2615              		.cfi_def_cfa_register 7
 2616 0006 7860     		str	r0, [r7, #4]
2467:FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2468:FreeRTOS/tasks.c **** BaseType_t xReturn;
2469:FreeRTOS/tasks.c **** 
2470:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2471:FreeRTOS/tasks.c **** 	called from a critical section within an ISR. */
2472:FreeRTOS/tasks.c **** 
2473:FreeRTOS/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2474:FreeRTOS/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2475:FreeRTOS/tasks.c **** 	the delayed list, and add it to the ready list.
2476:FreeRTOS/tasks.c **** 
2477:FreeRTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
2478:FreeRTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2479:FreeRTOS/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2480:FreeRTOS/tasks.c **** 
2481:FreeRTOS/tasks.c **** 	This function assumes that a check has already been made to ensure that
2482:FreeRTOS/tasks.c **** 	pxEventList is not empty. */
2483:FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 2617              		.loc 1 2483 0
 2618 0008 7B68     		ldr	r3, [r7, #4]
 2619 000a DB68     		ldr	r3, [r3, #12]
 2620 000c DB68     		ldr	r3, [r3, #12]
 2621 000e BB60     		str	r3, [r7, #8]
2484:FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
2485:FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2622              		.loc 1 2485 0
 2623 0010 BB68     		ldr	r3, [r7, #8]
 2624 0012 1833     		adds	r3, r3, #24
 2625 0014 1846     		mov	r0, r3
 2626 0016 FFF7FEFF 		bl	uxListRemove
2486:FreeRTOS/tasks.c **** 
2487:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2627              		.loc 1 2487 0
 2628 001a 1D4B     		ldr	r3, .L195
 2629 001c 1B68     		ldr	r3, [r3]
 2630 001e 002B     		cmp	r3, #0
 2631 0020 1CD1     		bne	.L190
2488:FreeRTOS/tasks.c **** 	{
2489:FreeRTOS/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 2632              		.loc 1 2489 0
 2633 0022 BB68     		ldr	r3, [r7, #8]
 2634 0024 0433     		adds	r3, r3, #4
 2635 0026 1846     		mov	r0, r3
 2636 0028 FFF7FEFF 		bl	uxListRemove
2490:FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2637              		.loc 1 2490 0
 2638 002c BB68     		ldr	r3, [r7, #8]
 2639 002e DB6A     		ldr	r3, [r3, #44]
 2640 0030 0122     		movs	r2, #1
 2641 0032 9A40     		lsls	r2, r2, r3
 2642 0034 174B     		ldr	r3, .L195+4
 2643 0036 1B68     		ldr	r3, [r3]
 2644 0038 1343     		orrs	r3, r3, r2
 2645 003a 164A     		ldr	r2, .L195+4
 2646 003c 1360     		str	r3, [r2]
 2647 003e BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 95


 2648 0040 DA6A     		ldr	r2, [r3, #44]
 2649 0042 1346     		mov	r3, r2
 2650 0044 9B00     		lsls	r3, r3, #2
 2651 0046 1344     		add	r3, r3, r2
 2652 0048 9B00     		lsls	r3, r3, #2
 2653 004a 134A     		ldr	r2, .L195+8
 2654 004c 1A44     		add	r2, r2, r3
 2655 004e BB68     		ldr	r3, [r7, #8]
 2656 0050 0433     		adds	r3, r3, #4
 2657 0052 1946     		mov	r1, r3
 2658 0054 1046     		mov	r0, r2
 2659 0056 FFF7FEFF 		bl	vListInsertEnd
 2660 005a 05E0     		b	.L191
 2661              	.L190:
2491:FreeRTOS/tasks.c **** 	}
2492:FreeRTOS/tasks.c **** 	else
2493:FreeRTOS/tasks.c **** 	{
2494:FreeRTOS/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2495:FreeRTOS/tasks.c **** 		pending until the scheduler is resumed. */
2496:FreeRTOS/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 2662              		.loc 1 2496 0
 2663 005c BB68     		ldr	r3, [r7, #8]
 2664 005e 1833     		adds	r3, r3, #24
 2665 0060 1946     		mov	r1, r3
 2666 0062 0E48     		ldr	r0, .L195+12
 2667 0064 FFF7FEFF 		bl	vListInsertEnd
 2668              	.L191:
2497:FreeRTOS/tasks.c **** 	}
2498:FreeRTOS/tasks.c **** 
2499:FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 2669              		.loc 1 2499 0
 2670 0068 BB68     		ldr	r3, [r7, #8]
 2671 006a DA6A     		ldr	r2, [r3, #44]
 2672 006c 0C4B     		ldr	r3, .L195+16
 2673 006e 1B68     		ldr	r3, [r3]
 2674 0070 DB6A     		ldr	r3, [r3, #44]
 2675 0072 9A42     		cmp	r2, r3
 2676 0074 05D9     		bls	.L192
2500:FreeRTOS/tasks.c **** 	{
2501:FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2502:FreeRTOS/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2503:FreeRTOS/tasks.c **** 		it should force a context switch now. */
2504:FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
 2677              		.loc 1 2504 0
 2678 0076 0123     		movs	r3, #1
 2679 0078 FB60     		str	r3, [r7, #12]
2505:FreeRTOS/tasks.c **** 
2506:FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2507:FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2508:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
 2680              		.loc 1 2508 0
 2681 007a 0A4B     		ldr	r3, .L195+20
 2682 007c 0122     		movs	r2, #1
 2683 007e 1A60     		str	r2, [r3]
 2684 0080 01E0     		b	.L193
 2685              	.L192:
2509:FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 96


2510:FreeRTOS/tasks.c **** 	else
2511:FreeRTOS/tasks.c **** 	{
2512:FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
 2686              		.loc 1 2512 0
 2687 0082 0023     		movs	r3, #0
 2688 0084 FB60     		str	r3, [r7, #12]
 2689              	.L193:
2513:FreeRTOS/tasks.c **** 	}
2514:FreeRTOS/tasks.c **** 
2515:FreeRTOS/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2516:FreeRTOS/tasks.c **** 	{
2517:FreeRTOS/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2518:FreeRTOS/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2519:FreeRTOS/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2520:FreeRTOS/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2521:FreeRTOS/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2522:FreeRTOS/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2523:FreeRTOS/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2524:FreeRTOS/tasks.c **** 		ensure it is updated at the earliest possible time. */
2525:FreeRTOS/tasks.c **** 		prvResetNextTaskUnblockTime();
2526:FreeRTOS/tasks.c **** 	}
2527:FreeRTOS/tasks.c **** 	#endif
2528:FreeRTOS/tasks.c **** 
2529:FreeRTOS/tasks.c **** 	return xReturn;
 2690              		.loc 1 2529 0
 2691 0086 FB68     		ldr	r3, [r7, #12]
2530:FreeRTOS/tasks.c **** }
 2692              		.loc 1 2530 0
 2693 0088 1846     		mov	r0, r3
 2694 008a 1037     		adds	r7, r7, #16
 2695              		.cfi_def_cfa_offset 8
 2696 008c BD46     		mov	sp, r7
 2697              		.cfi_def_cfa_register 13
 2698              		@ sp needed
 2699 008e 80BD     		pop	{r7, pc}
 2700              	.L196:
 2701              		.align	2
 2702              	.L195:
 2703 0090 FC000000 		.word	uxSchedulerSuspended
 2704 0094 E0000000 		.word	uxTopReadyPriority
 2705 0098 04000000 		.word	pxReadyTasksLists
 2706 009c 98000000 		.word	xPendingReadyList
 2707 00a0 00000000 		.word	pxCurrentTCB
 2708 00a4 EC000000 		.word	xYieldPending
 2709              		.cfi_endproc
 2710              	.LFE87:
 2711              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2712              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 2713              		.align	2
 2714              		.global	xTaskRemoveFromUnorderedEventList
 2715              		.thumb
 2716              		.thumb_func
 2717              		.type	xTaskRemoveFromUnorderedEventList, %function
 2718              	xTaskRemoveFromUnorderedEventList:
 2719              	.LFB88:
2531:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2532:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 97


2533:FreeRTOS/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2534:FreeRTOS/tasks.c **** {
 2720              		.loc 1 2534 0
 2721              		.cfi_startproc
 2722              		@ args = 0, pretend = 0, frame = 16
 2723              		@ frame_needed = 1, uses_anonymous_args = 0
 2724 0000 80B5     		push	{r7, lr}
 2725              		.cfi_def_cfa_offset 8
 2726              		.cfi_offset 7, -8
 2727              		.cfi_offset 14, -4
 2728 0002 84B0     		sub	sp, sp, #16
 2729              		.cfi_def_cfa_offset 24
 2730 0004 00AF     		add	r7, sp, #0
 2731              		.cfi_def_cfa_register 7
 2732 0006 7860     		str	r0, [r7, #4]
 2733 0008 3960     		str	r1, [r7]
2535:FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2536:FreeRTOS/tasks.c **** BaseType_t xReturn;
2537:FreeRTOS/tasks.c **** 
2538:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2539:FreeRTOS/tasks.c **** 	the event flags implementation. */
2540:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2541:FreeRTOS/tasks.c **** 
2542:FreeRTOS/tasks.c **** 	/* Store the new item value in the event list. */
2543:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 2734              		.loc 1 2543 0
 2735 000a 3B68     		ldr	r3, [r7]
 2736 000c 43F00042 		orr	r2, r3, #-2147483648
 2737 0010 7B68     		ldr	r3, [r7, #4]
 2738 0012 1A60     		str	r2, [r3]
2544:FreeRTOS/tasks.c **** 
2545:FreeRTOS/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2546:FreeRTOS/tasks.c **** 	event flags. */
2547:FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 2739              		.loc 1 2547 0
 2740 0014 7B68     		ldr	r3, [r7, #4]
 2741 0016 DB68     		ldr	r3, [r3, #12]
 2742 0018 BB60     		str	r3, [r7, #8]
2548:FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
2549:FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 2743              		.loc 1 2549 0
 2744 001a 7868     		ldr	r0, [r7, #4]
 2745 001c FFF7FEFF 		bl	uxListRemove
2550:FreeRTOS/tasks.c **** 
2551:FreeRTOS/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2552:FreeRTOS/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2553:FreeRTOS/tasks.c **** 	lists. */
2554:FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 2746              		.loc 1 2554 0
 2747 0020 BB68     		ldr	r3, [r7, #8]
 2748 0022 0433     		adds	r3, r3, #4
 2749 0024 1846     		mov	r0, r3
 2750 0026 FFF7FEFF 		bl	uxListRemove
2555:FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 2751              		.loc 1 2555 0
 2752 002a BB68     		ldr	r3, [r7, #8]
 2753 002c DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 98


 2754 002e 0122     		movs	r2, #1
 2755 0030 9A40     		lsls	r2, r2, r3
 2756 0032 134B     		ldr	r3, .L201
 2757 0034 1B68     		ldr	r3, [r3]
 2758 0036 1343     		orrs	r3, r3, r2
 2759 0038 114A     		ldr	r2, .L201
 2760 003a 1360     		str	r3, [r2]
 2761 003c BB68     		ldr	r3, [r7, #8]
 2762 003e DA6A     		ldr	r2, [r3, #44]
 2763 0040 1346     		mov	r3, r2
 2764 0042 9B00     		lsls	r3, r3, #2
 2765 0044 1344     		add	r3, r3, r2
 2766 0046 9B00     		lsls	r3, r3, #2
 2767 0048 0E4A     		ldr	r2, .L201+4
 2768 004a 1A44     		add	r2, r2, r3
 2769 004c BB68     		ldr	r3, [r7, #8]
 2770 004e 0433     		adds	r3, r3, #4
 2771 0050 1946     		mov	r1, r3
 2772 0052 1046     		mov	r0, r2
 2773 0054 FFF7FEFF 		bl	vListInsertEnd
2556:FreeRTOS/tasks.c **** 
2557:FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 2774              		.loc 1 2557 0
 2775 0058 BB68     		ldr	r3, [r7, #8]
 2776 005a DA6A     		ldr	r2, [r3, #44]
 2777 005c 0A4B     		ldr	r3, .L201+8
 2778 005e 1B68     		ldr	r3, [r3]
 2779 0060 DB6A     		ldr	r3, [r3, #44]
 2780 0062 9A42     		cmp	r2, r3
 2781 0064 05D9     		bls	.L198
2558:FreeRTOS/tasks.c **** 	{
2559:FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has
2560:FreeRTOS/tasks.c **** 		a higher priority than the calling task.  This allows
2561:FreeRTOS/tasks.c **** 		the calling task to know if it should force a context
2562:FreeRTOS/tasks.c **** 		switch now. */
2563:FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
 2782              		.loc 1 2563 0
 2783 0066 0123     		movs	r3, #1
 2784 0068 FB60     		str	r3, [r7, #12]
2564:FreeRTOS/tasks.c **** 
2565:FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2566:FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2567:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
 2785              		.loc 1 2567 0
 2786 006a 084B     		ldr	r3, .L201+12
 2787 006c 0122     		movs	r2, #1
 2788 006e 1A60     		str	r2, [r3]
 2789 0070 01E0     		b	.L199
 2790              	.L198:
2568:FreeRTOS/tasks.c **** 	}
2569:FreeRTOS/tasks.c **** 	else
2570:FreeRTOS/tasks.c **** 	{
2571:FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
 2791              		.loc 1 2571 0
 2792 0072 0023     		movs	r3, #0
 2793 0074 FB60     		str	r3, [r7, #12]
 2794              	.L199:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 99


2572:FreeRTOS/tasks.c **** 	}
2573:FreeRTOS/tasks.c **** 
2574:FreeRTOS/tasks.c **** 	return xReturn;
 2795              		.loc 1 2574 0
 2796 0076 FB68     		ldr	r3, [r7, #12]
2575:FreeRTOS/tasks.c **** }
 2797              		.loc 1 2575 0
 2798 0078 1846     		mov	r0, r3
 2799 007a 1037     		adds	r7, r7, #16
 2800              		.cfi_def_cfa_offset 8
 2801 007c BD46     		mov	sp, r7
 2802              		.cfi_def_cfa_register 13
 2803              		@ sp needed
 2804 007e 80BD     		pop	{r7, pc}
 2805              	.L202:
 2806              		.align	2
 2807              	.L201:
 2808 0080 E0000000 		.word	uxTopReadyPriority
 2809 0084 04000000 		.word	pxReadyTasksLists
 2810 0088 00000000 		.word	pxCurrentTCB
 2811 008c EC000000 		.word	xYieldPending
 2812              		.cfi_endproc
 2813              	.LFE88:
 2814              		.size	xTaskRemoveFromUnorderedEventList, .-xTaskRemoveFromUnorderedEventList
 2815              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 2816              		.align	2
 2817              		.global	vTaskSetTimeOutState
 2818              		.thumb
 2819              		.thumb_func
 2820              		.type	vTaskSetTimeOutState, %function
 2821              	vTaskSetTimeOutState:
 2822              	.LFB89:
2576:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2577:FreeRTOS/tasks.c **** 
2578:FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
2579:FreeRTOS/tasks.c **** {
 2823              		.loc 1 2579 0
 2824              		.cfi_startproc
 2825              		@ args = 0, pretend = 0, frame = 8
 2826              		@ frame_needed = 1, uses_anonymous_args = 0
 2827              		@ link register save eliminated.
 2828 0000 80B4     		push	{r7}
 2829              		.cfi_def_cfa_offset 4
 2830              		.cfi_offset 7, -4
 2831 0002 83B0     		sub	sp, sp, #12
 2832              		.cfi_def_cfa_offset 16
 2833 0004 00AF     		add	r7, sp, #0
 2834              		.cfi_def_cfa_register 7
 2835 0006 7860     		str	r0, [r7, #4]
2580:FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
2581:FreeRTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 2836              		.loc 1 2581 0
 2837 0008 064B     		ldr	r3, .L204
 2838 000a 1A68     		ldr	r2, [r3]
 2839 000c 7B68     		ldr	r3, [r7, #4]
 2840 000e 1A60     		str	r2, [r3]
2582:FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 100


 2841              		.loc 1 2582 0
 2842 0010 054B     		ldr	r3, .L204+4
 2843 0012 1A68     		ldr	r2, [r3]
 2844 0014 7B68     		ldr	r3, [r7, #4]
 2845 0016 5A60     		str	r2, [r3, #4]
2583:FreeRTOS/tasks.c **** }
 2846              		.loc 1 2583 0
 2847 0018 00BF     		nop
 2848 001a 0C37     		adds	r7, r7, #12
 2849              		.cfi_def_cfa_offset 4
 2850 001c BD46     		mov	sp, r7
 2851              		.cfi_def_cfa_register 13
 2852              		@ sp needed
 2853 001e 80BC     		pop	{r7}
 2854              		.cfi_restore 7
 2855              		.cfi_def_cfa_offset 0
 2856 0020 7047     		bx	lr
 2857              	.L205:
 2858 0022 00BF     		.align	2
 2859              	.L204:
 2860 0024 F0000000 		.word	xNumOfOverflows
 2861 0028 DC000000 		.word	xTickCount
 2862              		.cfi_endproc
 2863              	.LFE89:
 2864              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 2865              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 2866              		.align	2
 2867              		.global	xTaskCheckForTimeOut
 2868              		.thumb
 2869              		.thumb_func
 2870              		.type	xTaskCheckForTimeOut, %function
 2871              	xTaskCheckForTimeOut:
 2872              	.LFB90:
2584:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2585:FreeRTOS/tasks.c **** 
2586:FreeRTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
2587:FreeRTOS/tasks.c **** {
 2873              		.loc 1 2587 0
 2874              		.cfi_startproc
 2875              		@ args = 0, pretend = 0, frame = 16
 2876              		@ frame_needed = 1, uses_anonymous_args = 0
 2877 0000 80B5     		push	{r7, lr}
 2878              		.cfi_def_cfa_offset 8
 2879              		.cfi_offset 7, -8
 2880              		.cfi_offset 14, -4
 2881 0002 84B0     		sub	sp, sp, #16
 2882              		.cfi_def_cfa_offset 24
 2883 0004 00AF     		add	r7, sp, #0
 2884              		.cfi_def_cfa_register 7
 2885 0006 7860     		str	r0, [r7, #4]
 2886 0008 3960     		str	r1, [r7]
2588:FreeRTOS/tasks.c **** BaseType_t xReturn;
2589:FreeRTOS/tasks.c **** 
2590:FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
2591:FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
2592:FreeRTOS/tasks.c **** 
2593:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 101


 2887              		.loc 1 2593 0
 2888 000a FFF7FEFF 		bl	vPortEnterCritical
 2889              	.LBB15:
2594:FreeRTOS/tasks.c **** 	{
2595:FreeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
2596:FreeRTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 2890              		.loc 1 2596 0
 2891 000e 1C4B     		ldr	r3, .L212
 2892 0010 1B68     		ldr	r3, [r3]
 2893 0012 BB60     		str	r3, [r7, #8]
2597:FreeRTOS/tasks.c **** 
2598:FreeRTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
2599:FreeRTOS/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
2600:FreeRTOS/tasks.c **** 			the maximum block time then the task should block indefinitely, and
2601:FreeRTOS/tasks.c **** 			therefore never time out. */
2602:FreeRTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 2894              		.loc 1 2602 0
 2895 0014 3B68     		ldr	r3, [r7]
 2896 0016 1B68     		ldr	r3, [r3]
 2897 0018 B3F1FF3F 		cmp	r3, #-1
 2898 001c 02D1     		bne	.L207
2603:FreeRTOS/tasks.c **** 			{
2604:FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
 2899              		.loc 1 2604 0
 2900 001e 0023     		movs	r3, #0
 2901 0020 FB60     		str	r3, [r7, #12]
 2902 0022 26E0     		b	.L208
 2903              	.L207:
2605:FreeRTOS/tasks.c **** 			}
2606:FreeRTOS/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
2607:FreeRTOS/tasks.c **** 		#endif
2608:FreeRTOS/tasks.c **** 
2609:FreeRTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 2904              		.loc 1 2609 0
 2905 0024 7B68     		ldr	r3, [r7, #4]
 2906 0026 1A68     		ldr	r2, [r3]
 2907 0028 164B     		ldr	r3, .L212+4
 2908 002a 1B68     		ldr	r3, [r3]
 2909 002c 9A42     		cmp	r2, r3
 2910 002e 07D0     		beq	.L209
 2911              		.loc 1 2609 0 is_stmt 0 discriminator 1
 2912 0030 7B68     		ldr	r3, [r7, #4]
 2913 0032 5A68     		ldr	r2, [r3, #4]
 2914 0034 BB68     		ldr	r3, [r7, #8]
 2915 0036 9A42     		cmp	r2, r3
 2916 0038 02D8     		bhi	.L209
2610:FreeRTOS/tasks.c **** 		{
2611:FreeRTOS/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
2612:FreeRTOS/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
2613:FreeRTOS/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
2614:FreeRTOS/tasks.c **** 			passed since vTaskSetTimeout() was called. */
2615:FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
 2917              		.loc 1 2615 0 is_stmt 1
 2918 003a 0123     		movs	r3, #1
 2919 003c FB60     		str	r3, [r7, #12]
 2920 003e 18E0     		b	.L208
 2921              	.L209:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 102


2616:FreeRTOS/tasks.c **** 		}
2617:FreeRTOS/tasks.c **** 		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 2922              		.loc 1 2617 0
 2923 0040 7B68     		ldr	r3, [r7, #4]
 2924 0042 5B68     		ldr	r3, [r3, #4]
 2925 0044 BA68     		ldr	r2, [r7, #8]
 2926 0046 D21A     		subs	r2, r2, r3
 2927 0048 3B68     		ldr	r3, [r7]
 2928 004a 1B68     		ldr	r3, [r3]
 2929 004c 9A42     		cmp	r2, r3
 2930 004e 0ED2     		bcs	.L210
2618:FreeRTOS/tasks.c **** 		{
2619:FreeRTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
2620:FreeRTOS/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 2931              		.loc 1 2620 0
 2932 0050 3B68     		ldr	r3, [r7]
 2933 0052 1A68     		ldr	r2, [r3]
 2934 0054 7B68     		ldr	r3, [r7, #4]
 2935 0056 5968     		ldr	r1, [r3, #4]
 2936 0058 BB68     		ldr	r3, [r7, #8]
 2937 005a CB1A     		subs	r3, r1, r3
 2938 005c 1A44     		add	r2, r2, r3
 2939 005e 3B68     		ldr	r3, [r7]
 2940 0060 1A60     		str	r2, [r3]
2621:FreeRTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 2941              		.loc 1 2621 0
 2942 0062 7868     		ldr	r0, [r7, #4]
 2943 0064 FFF7FEFF 		bl	vTaskSetTimeOutState
2622:FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
 2944              		.loc 1 2622 0
 2945 0068 0023     		movs	r3, #0
 2946 006a FB60     		str	r3, [r7, #12]
 2947 006c 01E0     		b	.L208
 2948              	.L210:
2623:FreeRTOS/tasks.c **** 		}
2624:FreeRTOS/tasks.c **** 		else
2625:FreeRTOS/tasks.c **** 		{
2626:FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
 2949              		.loc 1 2626 0
 2950 006e 0123     		movs	r3, #1
 2951 0070 FB60     		str	r3, [r7, #12]
 2952              	.L208:
 2953              	.LBE15:
2627:FreeRTOS/tasks.c **** 		}
2628:FreeRTOS/tasks.c **** 	}
2629:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
 2954              		.loc 1 2629 0
 2955 0072 FFF7FEFF 		bl	vPortExitCritical
2630:FreeRTOS/tasks.c **** 
2631:FreeRTOS/tasks.c **** 	return xReturn;
 2956              		.loc 1 2631 0
 2957 0076 FB68     		ldr	r3, [r7, #12]
2632:FreeRTOS/tasks.c **** }
 2958              		.loc 1 2632 0
 2959 0078 1846     		mov	r0, r3
 2960 007a 1037     		adds	r7, r7, #16
 2961              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 103


 2962 007c BD46     		mov	sp, r7
 2963              		.cfi_def_cfa_register 13
 2964              		@ sp needed
 2965 007e 80BD     		pop	{r7, pc}
 2966              	.L213:
 2967              		.align	2
 2968              	.L212:
 2969 0080 DC000000 		.word	xTickCount
 2970 0084 F0000000 		.word	xNumOfOverflows
 2971              		.cfi_endproc
 2972              	.LFE90:
 2973              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 2974              		.section	.text.vTaskMissedYield,"ax",%progbits
 2975              		.align	2
 2976              		.global	vTaskMissedYield
 2977              		.thumb
 2978              		.thumb_func
 2979              		.type	vTaskMissedYield, %function
 2980              	vTaskMissedYield:
 2981              	.LFB91:
2633:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2634:FreeRTOS/tasks.c **** 
2635:FreeRTOS/tasks.c **** void vTaskMissedYield( void )
2636:FreeRTOS/tasks.c **** {
 2982              		.loc 1 2636 0
 2983              		.cfi_startproc
 2984              		@ args = 0, pretend = 0, frame = 0
 2985              		@ frame_needed = 1, uses_anonymous_args = 0
 2986              		@ link register save eliminated.
 2987 0000 80B4     		push	{r7}
 2988              		.cfi_def_cfa_offset 4
 2989              		.cfi_offset 7, -4
 2990 0002 00AF     		add	r7, sp, #0
 2991              		.cfi_def_cfa_register 7
2637:FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
 2992              		.loc 1 2637 0
 2993 0004 034B     		ldr	r3, .L215
 2994 0006 0122     		movs	r2, #1
 2995 0008 1A60     		str	r2, [r3]
2638:FreeRTOS/tasks.c **** }
 2996              		.loc 1 2638 0
 2997 000a 00BF     		nop
 2998 000c BD46     		mov	sp, r7
 2999              		.cfi_def_cfa_register 13
 3000              		@ sp needed
 3001 000e 80BC     		pop	{r7}
 3002              		.cfi_restore 7
 3003              		.cfi_def_cfa_offset 0
 3004 0010 7047     		bx	lr
 3005              	.L216:
 3006 0012 00BF     		.align	2
 3007              	.L215:
 3008 0014 EC000000 		.word	xYieldPending
 3009              		.cfi_endproc
 3010              	.LFE91:
 3011              		.size	vTaskMissedYield, .-vTaskMissedYield
 3012              		.section	.text.prvIdleTask,"ax",%progbits
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 104


 3013              		.align	2
 3014              		.thumb
 3015              		.thumb_func
 3016              		.type	prvIdleTask, %function
 3017              	prvIdleTask:
 3018              	.LFB92:
2639:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2640:FreeRTOS/tasks.c **** 
2641:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2642:FreeRTOS/tasks.c **** 
2643:FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
2644:FreeRTOS/tasks.c **** 	{
2645:FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
2646:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2647:FreeRTOS/tasks.c **** 
2648:FreeRTOS/tasks.c **** 		if( xTask != NULL )
2649:FreeRTOS/tasks.c **** 		{
2650:FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
2651:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
2652:FreeRTOS/tasks.c **** 		}
2653:FreeRTOS/tasks.c **** 		else
2654:FreeRTOS/tasks.c **** 		{
2655:FreeRTOS/tasks.c **** 			uxReturn = 0U;
2656:FreeRTOS/tasks.c **** 		}
2657:FreeRTOS/tasks.c **** 
2658:FreeRTOS/tasks.c **** 		return uxReturn;
2659:FreeRTOS/tasks.c **** 	}
2660:FreeRTOS/tasks.c **** 
2661:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2662:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2663:FreeRTOS/tasks.c **** 
2664:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2665:FreeRTOS/tasks.c **** 
2666:FreeRTOS/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
2667:FreeRTOS/tasks.c **** 	{
2668:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2669:FreeRTOS/tasks.c **** 
2670:FreeRTOS/tasks.c **** 		if( xTask != NULL )
2671:FreeRTOS/tasks.c **** 		{
2672:FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
2673:FreeRTOS/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
2674:FreeRTOS/tasks.c **** 		}
2675:FreeRTOS/tasks.c **** 	}
2676:FreeRTOS/tasks.c **** 
2677:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2678:FreeRTOS/tasks.c **** 
2679:FreeRTOS/tasks.c **** /*
2680:FreeRTOS/tasks.c ****  * -----------------------------------------------------------
2681:FreeRTOS/tasks.c ****  * The Idle task.
2682:FreeRTOS/tasks.c ****  * ----------------------------------------------------------
2683:FreeRTOS/tasks.c ****  *
2684:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
2685:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
2686:FreeRTOS/tasks.c ****  *
2687:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
2688:FreeRTOS/tasks.c ****  *
2689:FreeRTOS/tasks.c ****  */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 105


2690:FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
2691:FreeRTOS/tasks.c **** {
 3019              		.loc 1 2691 0
 3020              		.cfi_startproc
 3021              		@ args = 0, pretend = 0, frame = 8
 3022              		@ frame_needed = 1, uses_anonymous_args = 0
 3023 0000 80B5     		push	{r7, lr}
 3024              		.cfi_def_cfa_offset 8
 3025              		.cfi_offset 7, -8
 3026              		.cfi_offset 14, -4
 3027 0002 82B0     		sub	sp, sp, #8
 3028              		.cfi_def_cfa_offset 16
 3029 0004 00AF     		add	r7, sp, #0
 3030              		.cfi_def_cfa_register 7
 3031 0006 7860     		str	r0, [r7, #4]
 3032              	.L218:
2692:FreeRTOS/tasks.c **** 	/* Stop warnings. */
2693:FreeRTOS/tasks.c **** 	( void ) pvParameters;
2694:FreeRTOS/tasks.c **** 
2695:FreeRTOS/tasks.c **** 	for( ;; )
2696:FreeRTOS/tasks.c **** 	{
2697:FreeRTOS/tasks.c **** 		/* See if any tasks have been deleted. */
2698:FreeRTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
 3033              		.loc 1 2698 0 discriminator 1
 3034 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
2699:FreeRTOS/tasks.c **** 
2700:FreeRTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
2701:FreeRTOS/tasks.c **** 		{
2702:FreeRTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
2703:FreeRTOS/tasks.c **** 			see if any other task has become available.  If we are using
2704:FreeRTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
2705:FreeRTOS/tasks.c **** 			will automatically get the processor anyway. */
2706:FreeRTOS/tasks.c **** 			taskYIELD();
2707:FreeRTOS/tasks.c **** 		}
2708:FreeRTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2709:FreeRTOS/tasks.c **** 
2710:FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
2711:FreeRTOS/tasks.c **** 		{
2712:FreeRTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
2713:FreeRTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
2714:FreeRTOS/tasks.c **** 			to run then the idle task should yield before the end of the
2715:FreeRTOS/tasks.c **** 			timeslice.
2716:FreeRTOS/tasks.c **** 
2717:FreeRTOS/tasks.c **** 			A critical region is not required here as we are just reading from
2718:FreeRTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
2719:FreeRTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
2720:FreeRTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
2721:FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
2722:FreeRTOS/tasks.c **** 			{
2723:FreeRTOS/tasks.c **** 				taskYIELD();
2724:FreeRTOS/tasks.c **** 			}
2725:FreeRTOS/tasks.c **** 			else
2726:FreeRTOS/tasks.c **** 			{
2727:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2728:FreeRTOS/tasks.c **** 			}
2729:FreeRTOS/tasks.c **** 		}
2730:FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 106


2731:FreeRTOS/tasks.c **** 
2732:FreeRTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
2733:FreeRTOS/tasks.c **** 		{
2734:FreeRTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
2735:FreeRTOS/tasks.c **** 
2736:FreeRTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
2737:FreeRTOS/tasks.c **** 			allows the application designer to add background functionality
2738:FreeRTOS/tasks.c **** 			without the overhead of a separate task.
2739:FreeRTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
2740:FreeRTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
2741:FreeRTOS/tasks.c **** 			vApplicationIdleHook();
2742:FreeRTOS/tasks.c **** 		}
2743:FreeRTOS/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
2744:FreeRTOS/tasks.c **** 
2745:FreeRTOS/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
2746:FreeRTOS/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
2747:FreeRTOS/tasks.c **** 		user defined low power mode	implementations require
2748:FreeRTOS/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
2749:FreeRTOS/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
2750:FreeRTOS/tasks.c **** 		{
2751:FreeRTOS/tasks.c **** 		TickType_t xExpectedIdleTime;
2752:FreeRTOS/tasks.c **** 
2753:FreeRTOS/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
2754:FreeRTOS/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
2755:FreeRTOS/tasks.c **** 			test of the expected idle time is performed without the
2756:FreeRTOS/tasks.c **** 			scheduler suspended.  The result here is not necessarily
2757:FreeRTOS/tasks.c **** 			valid. */
2758:FreeRTOS/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
2759:FreeRTOS/tasks.c **** 
2760:FreeRTOS/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2761:FreeRTOS/tasks.c **** 			{
2762:FreeRTOS/tasks.c **** 				vTaskSuspendAll();
2763:FreeRTOS/tasks.c **** 				{
2764:FreeRTOS/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
2765:FreeRTOS/tasks.c **** 					time can be sampled again, and this time its value can
2766:FreeRTOS/tasks.c **** 					be used. */
2767:FreeRTOS/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
2768:FreeRTOS/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
2769:FreeRTOS/tasks.c **** 
2770:FreeRTOS/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2771:FreeRTOS/tasks.c **** 					{
2772:FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
2773:FreeRTOS/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
2774:FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_END();
2775:FreeRTOS/tasks.c **** 					}
2776:FreeRTOS/tasks.c **** 					else
2777:FreeRTOS/tasks.c **** 					{
2778:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2779:FreeRTOS/tasks.c **** 					}
2780:FreeRTOS/tasks.c **** 				}
2781:FreeRTOS/tasks.c **** 				( void ) xTaskResumeAll();
2782:FreeRTOS/tasks.c **** 			}
2783:FreeRTOS/tasks.c **** 			else
2784:FreeRTOS/tasks.c **** 			{
2785:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2786:FreeRTOS/tasks.c **** 			}
2787:FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 107


2788:FreeRTOS/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
2789:FreeRTOS/tasks.c **** 	}
 3035              		.loc 1 2789 0 discriminator 1
 3036 000c FCE7     		b	.L218
 3037              		.cfi_endproc
 3038              	.LFE92:
 3039              		.size	prvIdleTask, .-prvIdleTask
 3040 000e 00BF     		.section	.text.prvInitialiseTCBVariables,"ax",%progbits
 3041              		.align	2
 3042              		.thumb
 3043              		.thumb_func
 3044              		.type	prvInitialiseTCBVariables, %function
 3045              	prvInitialiseTCBVariables:
 3046              	.LFB93:
2790:FreeRTOS/tasks.c **** }
2791:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2792:FreeRTOS/tasks.c **** 
2793:FreeRTOS/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
2794:FreeRTOS/tasks.c **** 
2795:FreeRTOS/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
2796:FreeRTOS/tasks.c **** 	{
2797:FreeRTOS/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
2798:FreeRTOS/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
2799:FreeRTOS/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
2800:FreeRTOS/tasks.c **** 
2801:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
2802:FreeRTOS/tasks.c **** 		{
2803:FreeRTOS/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
2804:FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
2805:FreeRTOS/tasks.c **** 		}
2806:FreeRTOS/tasks.c **** 		else if( xYieldPending != pdFALSE )
2807:FreeRTOS/tasks.c **** 		{
2808:FreeRTOS/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
2809:FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
2810:FreeRTOS/tasks.c **** 		}
2811:FreeRTOS/tasks.c **** 		else
2812:FreeRTOS/tasks.c **** 		{
2813:FreeRTOS/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
2814:FreeRTOS/tasks.c **** 			have an infinite block time rather than actually being suspended)
2815:FreeRTOS/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
2816:FreeRTOS/tasks.c **** 			interrupts. */
2817:FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
2818:FreeRTOS/tasks.c **** 			{
2819:FreeRTOS/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
2820:FreeRTOS/tasks.c **** 			}
2821:FreeRTOS/tasks.c **** 			else
2822:FreeRTOS/tasks.c **** 			{
2823:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2824:FreeRTOS/tasks.c **** 			}
2825:FreeRTOS/tasks.c **** 		}
2826:FreeRTOS/tasks.c **** 
2827:FreeRTOS/tasks.c **** 		return eReturn;
2828:FreeRTOS/tasks.c **** 	}
2829:FreeRTOS/tasks.c **** 
2830:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2831:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2832:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 108


2833:FreeRTOS/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t 
2834:FreeRTOS/tasks.c **** {
 3047              		.loc 1 2834 0
 3048              		.cfi_startproc
 3049              		@ args = 4, pretend = 0, frame = 24
 3050              		@ frame_needed = 1, uses_anonymous_args = 0
 3051 0000 80B5     		push	{r7, lr}
 3052              		.cfi_def_cfa_offset 8
 3053              		.cfi_offset 7, -8
 3054              		.cfi_offset 14, -4
 3055 0002 86B0     		sub	sp, sp, #24
 3056              		.cfi_def_cfa_offset 32
 3057 0004 00AF     		add	r7, sp, #0
 3058              		.cfi_def_cfa_register 7
 3059 0006 F860     		str	r0, [r7, #12]
 3060 0008 B960     		str	r1, [r7, #8]
 3061 000a 7A60     		str	r2, [r7, #4]
 3062 000c 3B60     		str	r3, [r7]
2835:FreeRTOS/tasks.c **** UBaseType_t x;
2836:FreeRTOS/tasks.c **** 
2837:FreeRTOS/tasks.c **** 	/* Store the task name in the TCB. */
2838:FreeRTOS/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 3063              		.loc 1 2838 0
 3064 000e 0023     		movs	r3, #0
 3065 0010 7B61     		str	r3, [r7, #20]
 3066 0012 12E0     		b	.L220
 3067              	.L223:
2839:FreeRTOS/tasks.c **** 	{
2840:FreeRTOS/tasks.c **** 		pxTCB->pcTaskName[ x ] = pcName[ x ];
 3068              		.loc 1 2840 0
 3069 0014 BA68     		ldr	r2, [r7, #8]
 3070 0016 7B69     		ldr	r3, [r7, #20]
 3071 0018 1344     		add	r3, r3, r2
 3072 001a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3073 001c FA68     		ldr	r2, [r7, #12]
 3074 001e 7B69     		ldr	r3, [r7, #20]
 3075 0020 1344     		add	r3, r3, r2
 3076 0022 3433     		adds	r3, r3, #52
 3077 0024 0A46     		mov	r2, r1
 3078 0026 1A70     		strb	r2, [r3]
2841:FreeRTOS/tasks.c **** 
2842:FreeRTOS/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
2843:FreeRTOS/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
2844:FreeRTOS/tasks.c **** 		string is not accessible (extremely unlikely). */
2845:FreeRTOS/tasks.c **** 		if( pcName[ x ] == 0x00 )
 3079              		.loc 1 2845 0
 3080 0028 BA68     		ldr	r2, [r7, #8]
 3081 002a 7B69     		ldr	r3, [r7, #20]
 3082 002c 1344     		add	r3, r3, r2
 3083 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3084 0030 002B     		cmp	r3, #0
 3085 0032 06D0     		beq	.L225
2838:FreeRTOS/tasks.c **** 	{
 3086              		.loc 1 2838 0 discriminator 2
 3087 0034 7B69     		ldr	r3, [r7, #20]
 3088 0036 0133     		adds	r3, r3, #1
 3089 0038 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 109


 3090              	.L220:
2838:FreeRTOS/tasks.c **** 	{
 3091              		.loc 1 2838 0 is_stmt 0 discriminator 1
 3092 003a 7B69     		ldr	r3, [r7, #20]
 3093 003c 0B2B     		cmp	r3, #11
 3094 003e E9D9     		bls	.L223
 3095 0040 00E0     		b	.L222
 3096              	.L225:
2846:FreeRTOS/tasks.c **** 		{
2847:FreeRTOS/tasks.c **** 			break;
 3097              		.loc 1 2847 0 is_stmt 1
 3098 0042 00BF     		nop
 3099              	.L222:
2848:FreeRTOS/tasks.c **** 		}
2849:FreeRTOS/tasks.c **** 		else
2850:FreeRTOS/tasks.c **** 		{
2851:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2852:FreeRTOS/tasks.c **** 		}
2853:FreeRTOS/tasks.c **** 	}
2854:FreeRTOS/tasks.c **** 
2855:FreeRTOS/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
2856:FreeRTOS/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
2857:FreeRTOS/tasks.c **** 	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 3100              		.loc 1 2857 0
 3101 0044 FB68     		ldr	r3, [r7, #12]
 3102 0046 0022     		movs	r2, #0
 3103 0048 83F83F20 		strb	r2, [r3, #63]
2858:FreeRTOS/tasks.c **** 
2859:FreeRTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
2860:FreeRTOS/tasks.c **** 	remove the privilege bit if one is present. */
2861:FreeRTOS/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 3104              		.loc 1 2861 0
 3105 004c 7B68     		ldr	r3, [r7, #4]
 3106 004e 042B     		cmp	r3, #4
 3107 0050 01D9     		bls	.L224
2862:FreeRTOS/tasks.c **** 	{
2863:FreeRTOS/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 3108              		.loc 1 2863 0
 3109 0052 0423     		movs	r3, #4
 3110 0054 7B60     		str	r3, [r7, #4]
 3111              	.L224:
2864:FreeRTOS/tasks.c **** 	}
2865:FreeRTOS/tasks.c **** 	else
2866:FreeRTOS/tasks.c **** 	{
2867:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2868:FreeRTOS/tasks.c **** 	}
2869:FreeRTOS/tasks.c **** 
2870:FreeRTOS/tasks.c **** 	pxTCB->uxPriority = uxPriority;
 3112              		.loc 1 2870 0
 3113 0056 FB68     		ldr	r3, [r7, #12]
 3114 0058 7A68     		ldr	r2, [r7, #4]
 3115 005a DA62     		str	r2, [r3, #44]
2871:FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2872:FreeRTOS/tasks.c **** 	{
2873:FreeRTOS/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
 3116              		.loc 1 2873 0
 3117 005c FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 110


 3118 005e 7A68     		ldr	r2, [r7, #4]
 3119 0060 1A64     		str	r2, [r3, #64]
2874:FreeRTOS/tasks.c **** 		pxTCB->uxMutexesHeld = 0;
 3120              		.loc 1 2874 0
 3121 0062 FB68     		ldr	r3, [r7, #12]
 3122 0064 0022     		movs	r2, #0
 3123 0066 5A64     		str	r2, [r3, #68]
2875:FreeRTOS/tasks.c **** 	}
2876:FreeRTOS/tasks.c **** 	#endif /* configUSE_MUTEXES */
2877:FreeRTOS/tasks.c **** 
2878:FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 3124              		.loc 1 2878 0
 3125 0068 FB68     		ldr	r3, [r7, #12]
 3126 006a 0433     		adds	r3, r3, #4
 3127 006c 1846     		mov	r0, r3
 3128 006e FFF7FEFF 		bl	vListInitialiseItem
2879:FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 3129              		.loc 1 2879 0
 3130 0072 FB68     		ldr	r3, [r7, #12]
 3131 0074 1833     		adds	r3, r3, #24
 3132 0076 1846     		mov	r0, r3
 3133 0078 FFF7FEFF 		bl	vListInitialiseItem
2880:FreeRTOS/tasks.c **** 
2881:FreeRTOS/tasks.c **** 	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
2882:FreeRTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2883:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 3134              		.loc 1 2883 0
 3135 007c FB68     		ldr	r3, [r7, #12]
 3136 007e FA68     		ldr	r2, [r7, #12]
 3137 0080 1A61     		str	r2, [r3, #16]
2884:FreeRTOS/tasks.c **** 
2885:FreeRTOS/tasks.c **** 	/* Event lists are always in priority order. */
2886:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickT
 3138              		.loc 1 2886 0
 3139 0082 7B68     		ldr	r3, [r7, #4]
 3140 0084 C3F10502 		rsb	r2, r3, #5
 3141 0088 FB68     		ldr	r3, [r7, #12]
 3142 008a 9A61     		str	r2, [r3, #24]
2887:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 3143              		.loc 1 2887 0
 3144 008c FB68     		ldr	r3, [r7, #12]
 3145 008e FA68     		ldr	r2, [r7, #12]
 3146 0090 5A62     		str	r2, [r3, #36]
2888:FreeRTOS/tasks.c **** 
2889:FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2890:FreeRTOS/tasks.c **** 	{
2891:FreeRTOS/tasks.c **** 		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
2892:FreeRTOS/tasks.c **** 	}
2893:FreeRTOS/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
2894:FreeRTOS/tasks.c **** 
2895:FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2896:FreeRTOS/tasks.c **** 	{
2897:FreeRTOS/tasks.c **** 		pxTCB->pxTaskTag = NULL;
2898:FreeRTOS/tasks.c **** 	}
2899:FreeRTOS/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
2900:FreeRTOS/tasks.c **** 
2901:FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 111


2902:FreeRTOS/tasks.c **** 	{
2903:FreeRTOS/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
2904:FreeRTOS/tasks.c **** 	}
2905:FreeRTOS/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
2906:FreeRTOS/tasks.c **** 
2907:FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2908:FreeRTOS/tasks.c **** 	{
2909:FreeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2910:FreeRTOS/tasks.c **** 	}
2911:FreeRTOS/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
2912:FreeRTOS/tasks.c **** 	{
2913:FreeRTOS/tasks.c **** 		( void ) xRegions;
2914:FreeRTOS/tasks.c **** 		( void ) usStackDepth;
2915:FreeRTOS/tasks.c **** 	}
2916:FreeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
2917:FreeRTOS/tasks.c **** 
2918:FreeRTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2919:FreeRTOS/tasks.c **** 	{
2920:FreeRTOS/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
2921:FreeRTOS/tasks.c **** 		{
2922:FreeRTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ x ] = NULL;
2923:FreeRTOS/tasks.c **** 		}
2924:FreeRTOS/tasks.c **** 	}
2925:FreeRTOS/tasks.c **** 	#endif
2926:FreeRTOS/tasks.c **** 
2927:FreeRTOS/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
2928:FreeRTOS/tasks.c **** 	{
2929:FreeRTOS/tasks.c **** 		pxTCB->ulNotifiedValue = 0;
 3147              		.loc 1 2929 0
 3148 0092 FB68     		ldr	r3, [r7, #12]
 3149 0094 0022     		movs	r2, #0
 3150 0096 9A64     		str	r2, [r3, #72]
2930:FreeRTOS/tasks.c **** 		pxTCB->eNotifyState = eNotWaitingNotification;
 3151              		.loc 1 2930 0
 3152 0098 FB68     		ldr	r3, [r7, #12]
 3153 009a 0022     		movs	r2, #0
 3154 009c 83F84C20 		strb	r2, [r3, #76]
2931:FreeRTOS/tasks.c **** 	}
2932:FreeRTOS/tasks.c **** 	#endif
2933:FreeRTOS/tasks.c **** 
2934:FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
2935:FreeRTOS/tasks.c **** 	{
2936:FreeRTOS/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
2937:FreeRTOS/tasks.c **** 		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
2938:FreeRTOS/tasks.c **** 	}
2939:FreeRTOS/tasks.c **** 	#endif /* configUSE_NEWLIB_REENTRANT */
2940:FreeRTOS/tasks.c **** }
 3155              		.loc 1 2940 0
 3156 00a0 00BF     		nop
 3157 00a2 1837     		adds	r7, r7, #24
 3158              		.cfi_def_cfa_offset 8
 3159 00a4 BD46     		mov	sp, r7
 3160              		.cfi_def_cfa_register 13
 3161              		@ sp needed
 3162 00a6 80BD     		pop	{r7, pc}
 3163              		.cfi_endproc
 3164              	.LFE93:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 112


 3165              		.size	prvInitialiseTCBVariables, .-prvInitialiseTCBVariables
 3166              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 3167              		.align	2
 3168              		.thumb
 3169              		.thumb_func
 3170              		.type	prvInitialiseTaskLists, %function
 3171              	prvInitialiseTaskLists:
 3172              	.LFB94:
2941:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2942:FreeRTOS/tasks.c **** 
2943:FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2944:FreeRTOS/tasks.c **** 
2945:FreeRTOS/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
2946:FreeRTOS/tasks.c **** 	{
2947:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2948:FreeRTOS/tasks.c **** 
2949:FreeRTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
2950:FreeRTOS/tasks.c **** 		{
2951:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
2952:FreeRTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
2953:FreeRTOS/tasks.c **** 		}
2954:FreeRTOS/tasks.c **** 	}
2955:FreeRTOS/tasks.c **** 
2956:FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
2957:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2958:FreeRTOS/tasks.c **** 
2959:FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
2960:FreeRTOS/tasks.c **** 
2961:FreeRTOS/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
2962:FreeRTOS/tasks.c **** 	{
2963:FreeRTOS/tasks.c **** 	void *pvReturn = NULL;
2964:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2965:FreeRTOS/tasks.c **** 
2966:FreeRTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
2967:FreeRTOS/tasks.c **** 		{
2968:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2969:FreeRTOS/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
2970:FreeRTOS/tasks.c **** 		}
2971:FreeRTOS/tasks.c **** 		else
2972:FreeRTOS/tasks.c **** 		{
2973:FreeRTOS/tasks.c **** 			pvReturn = NULL;
2974:FreeRTOS/tasks.c **** 		}
2975:FreeRTOS/tasks.c **** 
2976:FreeRTOS/tasks.c **** 		return pvReturn;
2977:FreeRTOS/tasks.c **** 	}
2978:FreeRTOS/tasks.c **** 
2979:FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
2980:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2981:FreeRTOS/tasks.c **** 
2982:FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2983:FreeRTOS/tasks.c **** 
2984:FreeRTOS/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
2985:FreeRTOS/tasks.c **** 	{
2986:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2987:FreeRTOS/tasks.c **** 
2988:FreeRTOS/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
2989:FreeRTOS/tasks.c **** 		the calling task. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 113


2990:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2991:FreeRTOS/tasks.c **** 
2992:FreeRTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2993:FreeRTOS/tasks.c **** 	}
2994:FreeRTOS/tasks.c **** 
2995:FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
2996:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2997:FreeRTOS/tasks.c **** 
2998:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
2999:FreeRTOS/tasks.c **** {
 3173              		.loc 1 2999 0
 3174              		.cfi_startproc
 3175              		@ args = 0, pretend = 0, frame = 8
 3176              		@ frame_needed = 1, uses_anonymous_args = 0
 3177 0000 80B5     		push	{r7, lr}
 3178              		.cfi_def_cfa_offset 8
 3179              		.cfi_offset 7, -8
 3180              		.cfi_offset 14, -4
 3181 0002 82B0     		sub	sp, sp, #8
 3182              		.cfi_def_cfa_offset 16
 3183 0004 00AF     		add	r7, sp, #0
 3184              		.cfi_def_cfa_register 7
3000:FreeRTOS/tasks.c **** UBaseType_t uxPriority;
3001:FreeRTOS/tasks.c **** 
3002:FreeRTOS/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 3185              		.loc 1 3002 0
 3186 0006 0023     		movs	r3, #0
 3187 0008 7B60     		str	r3, [r7, #4]
 3188 000a 0CE0     		b	.L227
 3189              	.L228:
3003:FreeRTOS/tasks.c **** 	{
3004:FreeRTOS/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 3190              		.loc 1 3004 0 discriminator 3
 3191 000c 7A68     		ldr	r2, [r7, #4]
 3192 000e 1346     		mov	r3, r2
 3193 0010 9B00     		lsls	r3, r3, #2
 3194 0012 1344     		add	r3, r3, r2
 3195 0014 9B00     		lsls	r3, r3, #2
 3196 0016 124A     		ldr	r2, .L229
 3197 0018 1344     		add	r3, r3, r2
 3198 001a 1846     		mov	r0, r3
 3199 001c FFF7FEFF 		bl	vListInitialise
3002:FreeRTOS/tasks.c **** 	{
 3200              		.loc 1 3002 0 discriminator 3
 3201 0020 7B68     		ldr	r3, [r7, #4]
 3202 0022 0133     		adds	r3, r3, #1
 3203 0024 7B60     		str	r3, [r7, #4]
 3204              	.L227:
3002:FreeRTOS/tasks.c **** 	{
 3205              		.loc 1 3002 0 is_stmt 0 discriminator 1
 3206 0026 7B68     		ldr	r3, [r7, #4]
 3207 0028 042B     		cmp	r3, #4
 3208 002a EFD9     		bls	.L228
3005:FreeRTOS/tasks.c **** 	}
3006:FreeRTOS/tasks.c **** 
3007:FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 3209              		.loc 1 3007 0 is_stmt 1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 114


 3210 002c 0D48     		ldr	r0, .L229+4
 3211 002e FFF7FEFF 		bl	vListInitialise
3008:FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 3212              		.loc 1 3008 0
 3213 0032 0D48     		ldr	r0, .L229+8
 3214 0034 FFF7FEFF 		bl	vListInitialise
3009:FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 3215              		.loc 1 3009 0
 3216 0038 0C48     		ldr	r0, .L229+12
 3217 003a FFF7FEFF 		bl	vListInitialise
3010:FreeRTOS/tasks.c **** 
3011:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3012:FreeRTOS/tasks.c **** 	{
3013:FreeRTOS/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 3218              		.loc 1 3013 0
 3219 003e 0C48     		ldr	r0, .L229+16
 3220 0040 FFF7FEFF 		bl	vListInitialise
3014:FreeRTOS/tasks.c **** 	}
3015:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3016:FreeRTOS/tasks.c **** 
3017:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3018:FreeRTOS/tasks.c **** 	{
3019:FreeRTOS/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 3221              		.loc 1 3019 0
 3222 0044 0B48     		ldr	r0, .L229+20
 3223 0046 FFF7FEFF 		bl	vListInitialise
3020:FreeRTOS/tasks.c **** 	}
3021:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3022:FreeRTOS/tasks.c **** 
3023:FreeRTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3024:FreeRTOS/tasks.c **** 	using list2. */
3025:FreeRTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 3224              		.loc 1 3025 0
 3225 004a 0B4B     		ldr	r3, .L229+24
 3226 004c 054A     		ldr	r2, .L229+4
 3227 004e 1A60     		str	r2, [r3]
3026:FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 3228              		.loc 1 3026 0
 3229 0050 0A4B     		ldr	r3, .L229+28
 3230 0052 054A     		ldr	r2, .L229+8
 3231 0054 1A60     		str	r2, [r3]
3027:FreeRTOS/tasks.c **** }
 3232              		.loc 1 3027 0
 3233 0056 00BF     		nop
 3234 0058 0837     		adds	r7, r7, #8
 3235              		.cfi_def_cfa_offset 8
 3236 005a BD46     		mov	sp, r7
 3237              		.cfi_def_cfa_register 13
 3238              		@ sp needed
 3239 005c 80BD     		pop	{r7, pc}
 3240              	.L230:
 3241 005e 00BF     		.align	2
 3242              	.L229:
 3243 0060 04000000 		.word	pxReadyTasksLists
 3244 0064 68000000 		.word	xDelayedTaskList1
 3245 0068 7C000000 		.word	xDelayedTaskList2
 3246 006c 98000000 		.word	xPendingReadyList
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 115


 3247 0070 AC000000 		.word	xTasksWaitingTermination
 3248 0074 C4000000 		.word	xSuspendedTaskList
 3249 0078 90000000 		.word	pxDelayedTaskList
 3250 007c 94000000 		.word	pxOverflowDelayedTaskList
 3251              		.cfi_endproc
 3252              	.LFE94:
 3253              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 3254              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 3255              		.align	2
 3256              		.thumb
 3257              		.thumb_func
 3258              		.type	prvCheckTasksWaitingTermination, %function
 3259              	prvCheckTasksWaitingTermination:
 3260              	.LFB95:
3028:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3029:FreeRTOS/tasks.c **** 
3030:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3031:FreeRTOS/tasks.c **** {
 3261              		.loc 1 3031 0
 3262              		.cfi_startproc
 3263              		@ args = 0, pretend = 0, frame = 8
 3264              		@ frame_needed = 1, uses_anonymous_args = 0
 3265 0000 80B5     		push	{r7, lr}
 3266              		.cfi_def_cfa_offset 8
 3267              		.cfi_offset 7, -8
 3268              		.cfi_offset 14, -4
 3269 0002 82B0     		sub	sp, sp, #8
 3270              		.cfi_def_cfa_offset 16
 3271 0004 00AF     		add	r7, sp, #0
 3272              		.cfi_def_cfa_register 7
 3273              	.LBB16:
3032:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3033:FreeRTOS/tasks.c **** 	{
3034:FreeRTOS/tasks.c **** 		BaseType_t xListIsEmpty;
3035:FreeRTOS/tasks.c **** 
3036:FreeRTOS/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3037:FreeRTOS/tasks.c **** 		too often in the idle task. */
3038:FreeRTOS/tasks.c **** 		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 3274              		.loc 1 3038 0
 3275 0006 28E0     		b	.L232
 3276              	.L233:
3039:FreeRTOS/tasks.c **** 		{
3040:FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 3277              		.loc 1 3040 0
 3278 0008 FFF7FEFF 		bl	vTaskSuspendAll
3041:FreeRTOS/tasks.c **** 			{
3042:FreeRTOS/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 3279              		.loc 1 3042 0
 3280 000c 174B     		ldr	r3, .L234
 3281 000e 1B68     		ldr	r3, [r3]
 3282 0010 002B     		cmp	r3, #0
 3283 0012 0CBF     		ite	eq
 3284 0014 0123     		moveq	r3, #1
 3285 0016 0023     		movne	r3, #0
 3286 0018 DBB2     		uxtb	r3, r3
 3287 001a 7B60     		str	r3, [r7, #4]
3043:FreeRTOS/tasks.c **** 			}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 116


3044:FreeRTOS/tasks.c **** 			( void ) xTaskResumeAll();
 3288              		.loc 1 3044 0
 3289 001c FFF7FEFF 		bl	xTaskResumeAll
3045:FreeRTOS/tasks.c **** 
3046:FreeRTOS/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 3290              		.loc 1 3046 0
 3291 0020 7B68     		ldr	r3, [r7, #4]
 3292 0022 002B     		cmp	r3, #0
 3293 0024 19D1     		bne	.L232
 3294              	.LBB17:
3047:FreeRTOS/tasks.c **** 			{
3048:FreeRTOS/tasks.c **** 				TCB_t *pxTCB;
3049:FreeRTOS/tasks.c **** 
3050:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
 3295              		.loc 1 3050 0
 3296 0026 FFF7FEFF 		bl	vPortEnterCritical
3051:FreeRTOS/tasks.c **** 				{
3052:FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 3297              		.loc 1 3052 0
 3298 002a 104B     		ldr	r3, .L234
 3299 002c DB68     		ldr	r3, [r3, #12]
 3300 002e DB68     		ldr	r3, [r3, #12]
 3301 0030 3B60     		str	r3, [r7]
3053:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 3302              		.loc 1 3053 0
 3303 0032 3B68     		ldr	r3, [r7]
 3304 0034 0433     		adds	r3, r3, #4
 3305 0036 1846     		mov	r0, r3
 3306 0038 FFF7FEFF 		bl	uxListRemove
3054:FreeRTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
 3307              		.loc 1 3054 0
 3308 003c 0C4B     		ldr	r3, .L234+4
 3309 003e 1B68     		ldr	r3, [r3]
 3310 0040 013B     		subs	r3, r3, #1
 3311 0042 0B4A     		ldr	r2, .L234+4
 3312 0044 1360     		str	r3, [r2]
3055:FreeRTOS/tasks.c **** 					--uxTasksDeleted;
 3313              		.loc 1 3055 0
 3314 0046 0B4B     		ldr	r3, .L234+8
 3315 0048 1B68     		ldr	r3, [r3]
 3316 004a 013B     		subs	r3, r3, #1
 3317 004c 094A     		ldr	r2, .L234+8
 3318 004e 1360     		str	r3, [r2]
3056:FreeRTOS/tasks.c **** 				}
3057:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
 3319              		.loc 1 3057 0
 3320 0050 FFF7FEFF 		bl	vPortExitCritical
3058:FreeRTOS/tasks.c **** 
3059:FreeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
 3321              		.loc 1 3059 0
 3322 0054 3868     		ldr	r0, [r7]
 3323 0056 FFF7FEFF 		bl	prvDeleteTCB
 3324              	.L232:
 3325              	.LBE17:
3038:FreeRTOS/tasks.c **** 		{
 3326              		.loc 1 3038 0
 3327 005a 064B     		ldr	r3, .L234+8
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 117


 3328 005c 1B68     		ldr	r3, [r3]
 3329 005e 002B     		cmp	r3, #0
 3330 0060 D2D1     		bne	.L233
 3331              	.LBE16:
3060:FreeRTOS/tasks.c **** 			}
3061:FreeRTOS/tasks.c **** 			else
3062:FreeRTOS/tasks.c **** 			{
3063:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3064:FreeRTOS/tasks.c **** 			}
3065:FreeRTOS/tasks.c **** 		}
3066:FreeRTOS/tasks.c **** 	}
3067:FreeRTOS/tasks.c **** 	#endif /* vTaskDelete */
3068:FreeRTOS/tasks.c **** }
 3332              		.loc 1 3068 0
 3333 0062 00BF     		nop
 3334 0064 0837     		adds	r7, r7, #8
 3335              		.cfi_def_cfa_offset 8
 3336 0066 BD46     		mov	sp, r7
 3337              		.cfi_def_cfa_register 13
 3338              		@ sp needed
 3339 0068 80BD     		pop	{r7, pc}
 3340              	.L235:
 3341 006a 00BF     		.align	2
 3342              	.L234:
 3343 006c AC000000 		.word	xTasksWaitingTermination
 3344 0070 D8000000 		.word	uxCurrentNumberOfTasks
 3345 0074 C0000000 		.word	uxTasksDeleted
 3346              		.cfi_endproc
 3347              	.LFE95:
 3348              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 3349              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 3350              		.align	2
 3351              		.thumb
 3352              		.thumb_func
 3353              		.type	prvAddCurrentTaskToDelayedList, %function
 3354              	prvAddCurrentTaskToDelayedList:
 3355              	.LFB96:
3069:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3070:FreeRTOS/tasks.c **** 
3071:FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
3072:FreeRTOS/tasks.c **** {
 3356              		.loc 1 3072 0
 3357              		.cfi_startproc
 3358              		@ args = 0, pretend = 0, frame = 8
 3359              		@ frame_needed = 1, uses_anonymous_args = 0
 3360 0000 80B5     		push	{r7, lr}
 3361              		.cfi_def_cfa_offset 8
 3362              		.cfi_offset 7, -8
 3363              		.cfi_offset 14, -4
 3364 0002 82B0     		sub	sp, sp, #8
 3365              		.cfi_def_cfa_offset 16
 3366 0004 00AF     		add	r7, sp, #0
 3367              		.cfi_def_cfa_register 7
 3368 0006 7860     		str	r0, [r7, #4]
3073:FreeRTOS/tasks.c **** 	/* The list item will be inserted in wake time order. */
3074:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 3369              		.loc 1 3074 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 118


 3370 0008 134B     		ldr	r3, .L240
 3371 000a 1B68     		ldr	r3, [r3]
 3372 000c 7A68     		ldr	r2, [r7, #4]
 3373 000e 5A60     		str	r2, [r3, #4]
3075:FreeRTOS/tasks.c **** 
3076:FreeRTOS/tasks.c **** 	if( xTimeToWake < xTickCount )
 3374              		.loc 1 3076 0
 3375 0010 124B     		ldr	r3, .L240+4
 3376 0012 1B68     		ldr	r3, [r3]
 3377 0014 7A68     		ldr	r2, [r7, #4]
 3378 0016 9A42     		cmp	r2, r3
 3379 0018 09D2     		bcs	.L237
3077:FreeRTOS/tasks.c **** 	{
3078:FreeRTOS/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
3079:FreeRTOS/tasks.c **** 		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 3380              		.loc 1 3079 0
 3381 001a 114B     		ldr	r3, .L240+8
 3382 001c 1A68     		ldr	r2, [r3]
 3383 001e 0E4B     		ldr	r3, .L240
 3384 0020 1B68     		ldr	r3, [r3]
 3385 0022 0433     		adds	r3, r3, #4
 3386 0024 1946     		mov	r1, r3
 3387 0026 1046     		mov	r0, r2
 3388 0028 FFF7FEFF 		bl	vListInsert
3080:FreeRTOS/tasks.c **** 	}
3081:FreeRTOS/tasks.c **** 	else
3082:FreeRTOS/tasks.c **** 	{
3083:FreeRTOS/tasks.c **** 		/* The wake time has not overflowed, so the current block list is used. */
3084:FreeRTOS/tasks.c **** 		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
3085:FreeRTOS/tasks.c **** 
3086:FreeRTOS/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
3087:FreeRTOS/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
3088:FreeRTOS/tasks.c **** 		too. */
3089:FreeRTOS/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
3090:FreeRTOS/tasks.c **** 		{
3091:FreeRTOS/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
3092:FreeRTOS/tasks.c **** 		}
3093:FreeRTOS/tasks.c **** 		else
3094:FreeRTOS/tasks.c **** 		{
3095:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3096:FreeRTOS/tasks.c **** 		}
3097:FreeRTOS/tasks.c **** 	}
3098:FreeRTOS/tasks.c **** }
 3389              		.loc 1 3098 0
 3390 002c 10E0     		b	.L239
 3391              	.L237:
3084:FreeRTOS/tasks.c **** 
 3392              		.loc 1 3084 0
 3393 002e 0D4B     		ldr	r3, .L240+12
 3394 0030 1A68     		ldr	r2, [r3]
 3395 0032 094B     		ldr	r3, .L240
 3396 0034 1B68     		ldr	r3, [r3]
 3397 0036 0433     		adds	r3, r3, #4
 3398 0038 1946     		mov	r1, r3
 3399 003a 1046     		mov	r0, r2
 3400 003c FFF7FEFF 		bl	vListInsert
3089:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 119


 3401              		.loc 1 3089 0
 3402 0040 094B     		ldr	r3, .L240+16
 3403 0042 1B68     		ldr	r3, [r3]
 3404 0044 7A68     		ldr	r2, [r7, #4]
 3405 0046 9A42     		cmp	r2, r3
 3406 0048 02D2     		bcs	.L239
3091:FreeRTOS/tasks.c **** 		}
 3407              		.loc 1 3091 0
 3408 004a 074A     		ldr	r2, .L240+16
 3409 004c 7B68     		ldr	r3, [r7, #4]
 3410 004e 1360     		str	r3, [r2]
 3411              	.L239:
 3412              		.loc 1 3098 0
 3413 0050 00BF     		nop
 3414 0052 0837     		adds	r7, r7, #8
 3415              		.cfi_def_cfa_offset 8
 3416 0054 BD46     		mov	sp, r7
 3417              		.cfi_def_cfa_register 13
 3418              		@ sp needed
 3419 0056 80BD     		pop	{r7, pc}
 3420              	.L241:
 3421              		.align	2
 3422              	.L240:
 3423 0058 00000000 		.word	pxCurrentTCB
 3424 005c DC000000 		.word	xTickCount
 3425 0060 94000000 		.word	pxOverflowDelayedTaskList
 3426 0064 90000000 		.word	pxDelayedTaskList
 3427 0068 F8000000 		.word	xNextTaskUnblockTime
 3428              		.cfi_endproc
 3429              	.LFE96:
 3430              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 3431              		.section	.text.prvAllocateTCBAndStack,"ax",%progbits
 3432              		.align	2
 3433              		.thumb
 3434              		.thumb_func
 3435              		.type	prvAllocateTCBAndStack, %function
 3436              	prvAllocateTCBAndStack:
 3437              	.LFB97:
3099:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3100:FreeRTOS/tasks.c **** 
3101:FreeRTOS/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuff
3102:FreeRTOS/tasks.c **** {
 3438              		.loc 1 3102 0
 3439              		.cfi_startproc
 3440              		@ args = 0, pretend = 0, frame = 16
 3441              		@ frame_needed = 1, uses_anonymous_args = 0
 3442 0000 80B5     		push	{r7, lr}
 3443              		.cfi_def_cfa_offset 8
 3444              		.cfi_offset 7, -8
 3445              		.cfi_offset 14, -4
 3446 0002 84B0     		sub	sp, sp, #16
 3447              		.cfi_def_cfa_offset 24
 3448 0004 00AF     		add	r7, sp, #0
 3449              		.cfi_def_cfa_register 7
 3450 0006 0346     		mov	r3, r0
 3451 0008 3960     		str	r1, [r7]
 3452 000a FB80     		strh	r3, [r7, #6]	@ movhi
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 120


 3453              	.LBB18:
3103:FreeRTOS/tasks.c **** TCB_t *pxNewTCB;
3104:FreeRTOS/tasks.c **** 
3105:FreeRTOS/tasks.c **** 	/* If the stack grows down then allocate the stack then the TCB so the stack
3106:FreeRTOS/tasks.c **** 	does not grow into the TCB.  Likewise if the stack grows up then allocate
3107:FreeRTOS/tasks.c **** 	the TCB then the stack. */
3108:FreeRTOS/tasks.c **** 	#if( portSTACK_GROWTH > 0 )
3109:FreeRTOS/tasks.c **** 	{
3110:FreeRTOS/tasks.c **** 		/* Allocate space for the TCB.  Where the memory comes from depends on
3111:FreeRTOS/tasks.c **** 		the implementation of the port malloc function. */
3112:FreeRTOS/tasks.c **** 		pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
3113:FreeRTOS/tasks.c **** 
3114:FreeRTOS/tasks.c **** 		if( pxNewTCB != NULL )
3115:FreeRTOS/tasks.c **** 		{
3116:FreeRTOS/tasks.c **** 			/* Allocate space for the stack used by the task being created.
3117:FreeRTOS/tasks.c **** 			The base of the stack memory stored in the TCB so the task can
3118:FreeRTOS/tasks.c **** 			be deleted later if required. */
3119:FreeRTOS/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeo
3120:FreeRTOS/tasks.c **** 
3121:FreeRTOS/tasks.c **** 			if( pxNewTCB->pxStack == NULL )
3122:FreeRTOS/tasks.c **** 			{
3123:FreeRTOS/tasks.c **** 				/* Could not allocate the stack.  Delete the allocated TCB. */
3124:FreeRTOS/tasks.c **** 				vPortFree( pxNewTCB );
3125:FreeRTOS/tasks.c **** 				pxNewTCB = NULL;
3126:FreeRTOS/tasks.c **** 			}
3127:FreeRTOS/tasks.c **** 		}
3128:FreeRTOS/tasks.c **** 	}
3129:FreeRTOS/tasks.c **** 	#else /* portSTACK_GROWTH */
3130:FreeRTOS/tasks.c **** 	{
3131:FreeRTOS/tasks.c **** 	StackType_t *pxStack;
3132:FreeRTOS/tasks.c **** 
3133:FreeRTOS/tasks.c **** 		/* Allocate space for the stack used by the task being created. */
3134:FreeRTOS/tasks.c **** 		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackTyp
 3454              		.loc 1 3134 0
 3455 000c 3B68     		ldr	r3, [r7]
 3456 000e 002B     		cmp	r3, #0
 3457 0010 06D1     		bne	.L243
 3458              		.loc 1 3134 0 is_stmt 0 discriminator 1
 3459 0012 FB88     		ldrh	r3, [r7, #6]
 3460 0014 9B00     		lsls	r3, r3, #2
 3461 0016 1846     		mov	r0, r3
 3462 0018 FFF7FEFF 		bl	pvPortMalloc
 3463 001c 0346     		mov	r3, r0
 3464 001e 00E0     		b	.L244
 3465              	.L243:
 3466              		.loc 1 3134 0 discriminator 2
 3467 0020 3B68     		ldr	r3, [r7]
 3468              	.L244:
 3469              		.loc 1 3134 0 discriminator 4
 3470 0022 BB60     		str	r3, [r7, #8]
3135:FreeRTOS/tasks.c **** 
3136:FreeRTOS/tasks.c **** 		if( pxStack != NULL )
 3471              		.loc 1 3136 0 is_stmt 1 discriminator 4
 3472 0024 BB68     		ldr	r3, [r7, #8]
 3473 0026 002B     		cmp	r3, #0
 3474 0028 0ED0     		beq	.L245
3137:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 121


3138:FreeRTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
3139:FreeRTOS/tasks.c **** 			on the implementation of the port malloc function. */
3140:FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 3475              		.loc 1 3140 0
 3476 002a 5020     		movs	r0, #80
 3477 002c FFF7FEFF 		bl	pvPortMalloc
 3478 0030 F860     		str	r0, [r7, #12]
3141:FreeRTOS/tasks.c **** 
3142:FreeRTOS/tasks.c **** 			if( pxNewTCB != NULL )
 3479              		.loc 1 3142 0
 3480 0032 FB68     		ldr	r3, [r7, #12]
 3481 0034 002B     		cmp	r3, #0
 3482 0036 03D0     		beq	.L246
3143:FreeRTOS/tasks.c **** 			{
3144:FreeRTOS/tasks.c **** 				/* Store the stack location in the TCB. */
3145:FreeRTOS/tasks.c **** 				pxNewTCB->pxStack = pxStack;
 3483              		.loc 1 3145 0
 3484 0038 FB68     		ldr	r3, [r7, #12]
 3485 003a BA68     		ldr	r2, [r7, #8]
 3486 003c 1A63     		str	r2, [r3, #48]
 3487 003e 05E0     		b	.L248
 3488              	.L246:
3146:FreeRTOS/tasks.c **** 			}
3147:FreeRTOS/tasks.c **** 			else
3148:FreeRTOS/tasks.c **** 			{
3149:FreeRTOS/tasks.c **** 				/* The stack cannot be used as the TCB was not created.  Free it
3150:FreeRTOS/tasks.c **** 				again. */
3151:FreeRTOS/tasks.c **** 				vPortFree( pxStack );
 3489              		.loc 1 3151 0
 3490 0040 B868     		ldr	r0, [r7, #8]
 3491 0042 FFF7FEFF 		bl	vPortFree
 3492 0046 01E0     		b	.L248
 3493              	.L245:
3152:FreeRTOS/tasks.c **** 			}
3153:FreeRTOS/tasks.c **** 		}
3154:FreeRTOS/tasks.c **** 		else
3155:FreeRTOS/tasks.c **** 		{
3156:FreeRTOS/tasks.c **** 			pxNewTCB = NULL;
 3494              		.loc 1 3156 0
 3495 0048 0023     		movs	r3, #0
 3496 004a FB60     		str	r3, [r7, #12]
 3497              	.L248:
 3498              	.LBE18:
3157:FreeRTOS/tasks.c **** 		}
3158:FreeRTOS/tasks.c **** 	}
3159:FreeRTOS/tasks.c **** 	#endif /* portSTACK_GROWTH */
3160:FreeRTOS/tasks.c **** 
3161:FreeRTOS/tasks.c **** 	if( pxNewTCB != NULL )
 3499              		.loc 1 3161 0
 3500 004c FB68     		ldr	r3, [r7, #12]
 3501 004e 002B     		cmp	r3, #0
 3502 0050 07D0     		beq	.L249
3162:FreeRTOS/tasks.c **** 	{
3163:FreeRTOS/tasks.c **** 		/* Avoid dependency on memset() if it is not required. */
3164:FreeRTOS/tasks.c **** 		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxT
3165:FreeRTOS/tasks.c **** 		{
3166:FreeRTOS/tasks.c **** 			/* Just to help debugging. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 122


3167:FreeRTOS/tasks.c **** 			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof
 3503              		.loc 1 3167 0
 3504 0052 FB68     		ldr	r3, [r7, #12]
 3505 0054 186B     		ldr	r0, [r3, #48]
 3506 0056 FB88     		ldrh	r3, [r7, #6]
 3507 0058 9B00     		lsls	r3, r3, #2
 3508 005a 1A46     		mov	r2, r3
 3509 005c A521     		movs	r1, #165
 3510 005e FFF7FEFF 		bl	memset
 3511              	.L249:
3168:FreeRTOS/tasks.c **** 		}
3169:FreeRTOS/tasks.c **** 		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( IN
3170:FreeRTOS/tasks.c **** 	}
3171:FreeRTOS/tasks.c **** 
3172:FreeRTOS/tasks.c **** 	return pxNewTCB;
 3512              		.loc 1 3172 0
 3513 0062 FB68     		ldr	r3, [r7, #12]
3173:FreeRTOS/tasks.c **** }
 3514              		.loc 1 3173 0
 3515 0064 1846     		mov	r0, r3
 3516 0066 1037     		adds	r7, r7, #16
 3517              		.cfi_def_cfa_offset 8
 3518 0068 BD46     		mov	sp, r7
 3519              		.cfi_def_cfa_register 13
 3520              		@ sp needed
 3521 006a 80BD     		pop	{r7, pc}
 3522              		.cfi_endproc
 3523              	.LFE97:
 3524              		.size	prvAllocateTCBAndStack, .-prvAllocateTCBAndStack
 3525              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 3526              		.align	2
 3527              		.thumb
 3528              		.thumb_func
 3529              		.type	prvTaskCheckFreeStackSpace, %function
 3530              	prvTaskCheckFreeStackSpace:
 3531              	.LFB98:
3174:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3175:FreeRTOS/tasks.c **** 
3176:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3177:FreeRTOS/tasks.c **** 
3178:FreeRTOS/tasks.c **** 	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, e
3179:FreeRTOS/tasks.c **** 	{
3180:FreeRTOS/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3181:FreeRTOS/tasks.c **** 	UBaseType_t uxTask = 0;
3182:FreeRTOS/tasks.c **** 
3183:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3184:FreeRTOS/tasks.c **** 		{
3185:FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3186:FreeRTOS/tasks.c **** 
3187:FreeRTOS/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3188:FreeRTOS/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3189:FreeRTOS/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3190:FreeRTOS/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3191:FreeRTOS/tasks.c **** 			do
3192:FreeRTOS/tasks.c **** 			{
3193:FreeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3194:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 123


3195:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
3196:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
3197:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
3198:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
3199:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
3200:FreeRTOS/tasks.c **** 
3201:FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3202:FreeRTOS/tasks.c **** 				{
3203:FreeRTOS/tasks.c **** 					/* If the task is in the suspended list then there is a chance
3204:FreeRTOS/tasks.c **** 					it is actually just blocked indefinitely - so really it should
3205:FreeRTOS/tasks.c **** 					be reported as being in the Blocked state. */
3206:FreeRTOS/tasks.c **** 					if( eState == eSuspended )
3207:FreeRTOS/tasks.c **** 					{
3208:FreeRTOS/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
3209:FreeRTOS/tasks.c **** 						{
3210:FreeRTOS/tasks.c **** 							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
3211:FreeRTOS/tasks.c **** 						}
3212:FreeRTOS/tasks.c **** 					}
3213:FreeRTOS/tasks.c **** 				}
3214:FreeRTOS/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3215:FreeRTOS/tasks.c **** 
3216:FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
3217:FreeRTOS/tasks.c **** 				{
3218:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
3219:FreeRTOS/tasks.c **** 				}
3220:FreeRTOS/tasks.c **** 				#else
3221:FreeRTOS/tasks.c **** 				{
3222:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = 0;
3223:FreeRTOS/tasks.c **** 				}
3224:FreeRTOS/tasks.c **** 				#endif
3225:FreeRTOS/tasks.c **** 
3226:FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1 )
3227:FreeRTOS/tasks.c **** 				{
3228:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
3229:FreeRTOS/tasks.c **** 				}
3230:FreeRTOS/tasks.c **** 				#else
3231:FreeRTOS/tasks.c **** 				{
3232:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
3233:FreeRTOS/tasks.c **** 				}
3234:FreeRTOS/tasks.c **** 				#endif
3235:FreeRTOS/tasks.c **** 
3236:FreeRTOS/tasks.c **** 				#if ( portSTACK_GROWTH > 0 )
3237:FreeRTOS/tasks.c **** 				{
3238:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
3239:FreeRTOS/tasks.c **** 				}
3240:FreeRTOS/tasks.c **** 				#else
3241:FreeRTOS/tasks.c **** 				{
3242:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
3243:FreeRTOS/tasks.c **** 				}
3244:FreeRTOS/tasks.c **** 				#endif
3245:FreeRTOS/tasks.c **** 
3246:FreeRTOS/tasks.c **** 				uxTask++;
3247:FreeRTOS/tasks.c **** 
3248:FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3249:FreeRTOS/tasks.c **** 		}
3250:FreeRTOS/tasks.c **** 		else
3251:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 124


3252:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3253:FreeRTOS/tasks.c **** 		}
3254:FreeRTOS/tasks.c **** 
3255:FreeRTOS/tasks.c **** 		return uxTask;
3256:FreeRTOS/tasks.c **** 	}
3257:FreeRTOS/tasks.c **** 
3258:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3259:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3260:FreeRTOS/tasks.c **** 
3261:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3262:FreeRTOS/tasks.c **** 
3263:FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3264:FreeRTOS/tasks.c **** 	{
 3532              		.loc 1 3264 0
 3533              		.cfi_startproc
 3534              		@ args = 0, pretend = 0, frame = 16
 3535              		@ frame_needed = 1, uses_anonymous_args = 0
 3536              		@ link register save eliminated.
 3537 0000 80B4     		push	{r7}
 3538              		.cfi_def_cfa_offset 4
 3539              		.cfi_offset 7, -4
 3540 0002 85B0     		sub	sp, sp, #20
 3541              		.cfi_def_cfa_offset 24
 3542 0004 00AF     		add	r7, sp, #0
 3543              		.cfi_def_cfa_register 7
 3544 0006 7860     		str	r0, [r7, #4]
3265:FreeRTOS/tasks.c **** 	uint32_t ulCount = 0U;
 3545              		.loc 1 3265 0
 3546 0008 0023     		movs	r3, #0
 3547 000a FB60     		str	r3, [r7, #12]
3266:FreeRTOS/tasks.c **** 
3267:FreeRTOS/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 3548              		.loc 1 3267 0
 3549 000c 05E0     		b	.L252
 3550              	.L253:
3268:FreeRTOS/tasks.c **** 		{
3269:FreeRTOS/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 3551              		.loc 1 3269 0
 3552 000e 7B68     		ldr	r3, [r7, #4]
 3553 0010 0133     		adds	r3, r3, #1
 3554 0012 7B60     		str	r3, [r7, #4]
3270:FreeRTOS/tasks.c **** 			ulCount++;
 3555              		.loc 1 3270 0
 3556 0014 FB68     		ldr	r3, [r7, #12]
 3557 0016 0133     		adds	r3, r3, #1
 3558 0018 FB60     		str	r3, [r7, #12]
 3559              	.L252:
3267:FreeRTOS/tasks.c **** 		{
 3560              		.loc 1 3267 0
 3561 001a 7B68     		ldr	r3, [r7, #4]
 3562 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3563 001e A52B     		cmp	r3, #165
 3564 0020 F5D0     		beq	.L253
3271:FreeRTOS/tasks.c **** 		}
3272:FreeRTOS/tasks.c **** 
3273:FreeRTOS/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 3565              		.loc 1 3273 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 125


 3566 0022 FB68     		ldr	r3, [r7, #12]
 3567 0024 9B08     		lsrs	r3, r3, #2
 3568 0026 FB60     		str	r3, [r7, #12]
3274:FreeRTOS/tasks.c **** 
3275:FreeRTOS/tasks.c **** 		return ( uint16_t ) ulCount;
 3569              		.loc 1 3275 0
 3570 0028 FB68     		ldr	r3, [r7, #12]
 3571 002a 9BB2     		uxth	r3, r3
3276:FreeRTOS/tasks.c **** 	}
 3572              		.loc 1 3276 0
 3573 002c 1846     		mov	r0, r3
 3574 002e 1437     		adds	r7, r7, #20
 3575              		.cfi_def_cfa_offset 4
 3576 0030 BD46     		mov	sp, r7
 3577              		.cfi_def_cfa_register 13
 3578              		@ sp needed
 3579 0032 80BC     		pop	{r7}
 3580              		.cfi_restore 7
 3581              		.cfi_def_cfa_offset 0
 3582 0034 7047     		bx	lr
 3583              		.cfi_endproc
 3584              	.LFE98:
 3585              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 3586 0036 00BF     		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3587              		.align	2
 3588              		.global	uxTaskGetStackHighWaterMark
 3589              		.thumb
 3590              		.thumb_func
 3591              		.type	uxTaskGetStackHighWaterMark, %function
 3592              	uxTaskGetStackHighWaterMark:
 3593              	.LFB99:
3277:FreeRTOS/tasks.c **** 
3278:FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3279:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3280:FreeRTOS/tasks.c **** 
3281:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3282:FreeRTOS/tasks.c **** 
3283:FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3284:FreeRTOS/tasks.c **** 	{
 3594              		.loc 1 3284 0
 3595              		.cfi_startproc
 3596              		@ args = 0, pretend = 0, frame = 24
 3597              		@ frame_needed = 1, uses_anonymous_args = 0
 3598 0000 80B5     		push	{r7, lr}
 3599              		.cfi_def_cfa_offset 8
 3600              		.cfi_offset 7, -8
 3601              		.cfi_offset 14, -4
 3602 0002 86B0     		sub	sp, sp, #24
 3603              		.cfi_def_cfa_offset 32
 3604 0004 00AF     		add	r7, sp, #0
 3605              		.cfi_def_cfa_register 7
 3606 0006 7860     		str	r0, [r7, #4]
3285:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3286:FreeRTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3287:FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
3288:FreeRTOS/tasks.c **** 
3289:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 126


 3607              		.loc 1 3289 0
 3608 0008 7B68     		ldr	r3, [r7, #4]
 3609 000a 002B     		cmp	r3, #0
 3610 000c 02D1     		bne	.L256
 3611              		.loc 1 3289 0 is_stmt 0 discriminator 1
 3612 000e 094B     		ldr	r3, .L259
 3613 0010 1B68     		ldr	r3, [r3]
 3614 0012 00E0     		b	.L257
 3615              	.L256:
 3616              		.loc 1 3289 0 discriminator 2
 3617 0014 7B68     		ldr	r3, [r7, #4]
 3618              	.L257:
 3619              		.loc 1 3289 0 discriminator 4
 3620 0016 7B61     		str	r3, [r7, #20]
3290:FreeRTOS/tasks.c **** 
3291:FreeRTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3292:FreeRTOS/tasks.c **** 		{
3293:FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 3621              		.loc 1 3293 0 is_stmt 1 discriminator 4
 3622 0018 7B69     		ldr	r3, [r7, #20]
 3623 001a 1B6B     		ldr	r3, [r3, #48]
 3624 001c 3B61     		str	r3, [r7, #16]
3294:FreeRTOS/tasks.c **** 		}
3295:FreeRTOS/tasks.c **** 		#else
3296:FreeRTOS/tasks.c **** 		{
3297:FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3298:FreeRTOS/tasks.c **** 		}
3299:FreeRTOS/tasks.c **** 		#endif
3300:FreeRTOS/tasks.c **** 
3301:FreeRTOS/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 3625              		.loc 1 3301 0 discriminator 4
 3626 001e 3869     		ldr	r0, [r7, #16]
 3627 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3628 0024 0346     		mov	r3, r0
 3629 0026 FB60     		str	r3, [r7, #12]
3302:FreeRTOS/tasks.c **** 
3303:FreeRTOS/tasks.c **** 		return uxReturn;
 3630              		.loc 1 3303 0 discriminator 4
 3631 0028 FB68     		ldr	r3, [r7, #12]
3304:FreeRTOS/tasks.c **** 	}
 3632              		.loc 1 3304 0 discriminator 4
 3633 002a 1846     		mov	r0, r3
 3634 002c 1837     		adds	r7, r7, #24
 3635              		.cfi_def_cfa_offset 8
 3636 002e BD46     		mov	sp, r7
 3637              		.cfi_def_cfa_register 13
 3638              		@ sp needed
 3639 0030 80BD     		pop	{r7, pc}
 3640              	.L260:
 3641 0032 00BF     		.align	2
 3642              	.L259:
 3643 0034 00000000 		.word	pxCurrentTCB
 3644              		.cfi_endproc
 3645              	.LFE99:
 3646              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 3647              		.section	.text.prvDeleteTCB,"ax",%progbits
 3648              		.align	2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 127


 3649              		.thumb
 3650              		.thumb_func
 3651              		.type	prvDeleteTCB, %function
 3652              	prvDeleteTCB:
 3653              	.LFB100:
3305:FreeRTOS/tasks.c **** 
3306:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3307:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3308:FreeRTOS/tasks.c **** 
3309:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3310:FreeRTOS/tasks.c **** 
3311:FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3312:FreeRTOS/tasks.c **** 	{
 3654              		.loc 1 3312 0
 3655              		.cfi_startproc
 3656              		@ args = 0, pretend = 0, frame = 8
 3657              		@ frame_needed = 1, uses_anonymous_args = 0
 3658 0000 80B5     		push	{r7, lr}
 3659              		.cfi_def_cfa_offset 8
 3660              		.cfi_offset 7, -8
 3661              		.cfi_offset 14, -4
 3662 0002 82B0     		sub	sp, sp, #8
 3663              		.cfi_def_cfa_offset 16
 3664 0004 00AF     		add	r7, sp, #0
 3665              		.cfi_def_cfa_register 7
 3666 0006 7860     		str	r0, [r7, #4]
3313:FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3314:FreeRTOS/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3315:FreeRTOS/tasks.c **** 		want to allocate and clean RAM statically. */
3316:FreeRTOS/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3317:FreeRTOS/tasks.c **** 
3318:FreeRTOS/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3319:FreeRTOS/tasks.c **** 		to the task to free any memory allocated at the application level. */
3320:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3321:FreeRTOS/tasks.c **** 		{
3322:FreeRTOS/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3323:FreeRTOS/tasks.c **** 		}
3324:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3325:FreeRTOS/tasks.c **** 
3326:FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
3327:FreeRTOS/tasks.c **** 		{
3328:FreeRTOS/tasks.c **** 			/* Only free the stack if it was allocated dynamically in the first
3329:FreeRTOS/tasks.c **** 			place. */
3330:FreeRTOS/tasks.c **** 			if( pxTCB->xUsingStaticallyAllocatedStack == pdFALSE )
3331:FreeRTOS/tasks.c **** 			{
3332:FreeRTOS/tasks.c **** 				vPortFreeAligned( pxTCB->pxStack );
3333:FreeRTOS/tasks.c **** 			}
3334:FreeRTOS/tasks.c **** 		}
3335:FreeRTOS/tasks.c **** 		#else
3336:FreeRTOS/tasks.c **** 		{
3337:FreeRTOS/tasks.c **** 			vPortFreeAligned( pxTCB->pxStack );
 3667              		.loc 1 3337 0
 3668 0008 7B68     		ldr	r3, [r7, #4]
 3669 000a 1B6B     		ldr	r3, [r3, #48]
 3670 000c 1846     		mov	r0, r3
 3671 000e FFF7FEFF 		bl	vPortFree
3338:FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 128


3339:FreeRTOS/tasks.c **** 		#endif
3340:FreeRTOS/tasks.c **** 
3341:FreeRTOS/tasks.c **** 		vPortFree( pxTCB );
 3672              		.loc 1 3341 0
 3673 0012 7868     		ldr	r0, [r7, #4]
 3674 0014 FFF7FEFF 		bl	vPortFree
3342:FreeRTOS/tasks.c **** 	}
 3675              		.loc 1 3342 0
 3676 0018 00BF     		nop
 3677 001a 0837     		adds	r7, r7, #8
 3678              		.cfi_def_cfa_offset 8
 3679 001c BD46     		mov	sp, r7
 3680              		.cfi_def_cfa_register 13
 3681              		@ sp needed
 3682 001e 80BD     		pop	{r7, pc}
 3683              		.cfi_endproc
 3684              	.LFE100:
 3685              		.size	prvDeleteTCB, .-prvDeleteTCB
 3686              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 3687              		.align	2
 3688              		.thumb
 3689              		.thumb_func
 3690              		.type	prvResetNextTaskUnblockTime, %function
 3691              	prvResetNextTaskUnblockTime:
 3692              	.LFB101:
3343:FreeRTOS/tasks.c **** 
3344:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3345:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3346:FreeRTOS/tasks.c **** 
3347:FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3348:FreeRTOS/tasks.c **** {
 3693              		.loc 1 3348 0
 3694              		.cfi_startproc
 3695              		@ args = 0, pretend = 0, frame = 8
 3696              		@ frame_needed = 1, uses_anonymous_args = 0
 3697              		@ link register save eliminated.
 3698 0000 80B4     		push	{r7}
 3699              		.cfi_def_cfa_offset 4
 3700              		.cfi_offset 7, -4
 3701 0002 83B0     		sub	sp, sp, #12
 3702              		.cfi_def_cfa_offset 16
 3703 0004 00AF     		add	r7, sp, #0
 3704              		.cfi_def_cfa_register 7
3349:FreeRTOS/tasks.c **** TCB_t *pxTCB;
3350:FreeRTOS/tasks.c **** 
3351:FreeRTOS/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3705              		.loc 1 3351 0
 3706 0006 0E4B     		ldr	r3, .L268
 3707 0008 1B68     		ldr	r3, [r3]
 3708 000a 1B68     		ldr	r3, [r3]
 3709 000c 002B     		cmp	r3, #0
 3710 000e 01D1     		bne	.L263
 3711              		.loc 1 3351 0 is_stmt 0 discriminator 1
 3712 0010 0123     		movs	r3, #1
 3713 0012 00E0     		b	.L264
 3714              	.L263:
 3715              		.loc 1 3351 0 discriminator 2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 129


 3716 0014 0023     		movs	r3, #0
 3717              	.L264:
 3718              		.loc 1 3351 0 discriminator 4
 3719 0016 002B     		cmp	r3, #0
 3720 0018 04D0     		beq	.L265
3352:FreeRTOS/tasks.c **** 	{
3353:FreeRTOS/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3354:FreeRTOS/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3355:FreeRTOS/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3356:FreeRTOS/tasks.c **** 		there is an item in the delayed list. */
3357:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 3721              		.loc 1 3357 0 is_stmt 1
 3722 001a 0A4B     		ldr	r3, .L268+4
 3723 001c 4FF0FF32 		mov	r2, #-1
 3724 0020 1A60     		str	r2, [r3]
3358:FreeRTOS/tasks.c **** 	}
3359:FreeRTOS/tasks.c **** 	else
3360:FreeRTOS/tasks.c **** 	{
3361:FreeRTOS/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3362:FreeRTOS/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3363:FreeRTOS/tasks.c **** 		which the task at the head of the delayed list should be removed
3364:FreeRTOS/tasks.c **** 		from the Blocked state. */
3365:FreeRTOS/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
3366:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
3367:FreeRTOS/tasks.c **** 	}
3368:FreeRTOS/tasks.c **** }
 3725              		.loc 1 3368 0
 3726 0022 08E0     		b	.L267
 3727              	.L265:
3365:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 3728              		.loc 1 3365 0
 3729 0024 064B     		ldr	r3, .L268
 3730 0026 1B68     		ldr	r3, [r3]
 3731 0028 DB68     		ldr	r3, [r3, #12]
 3732 002a DB68     		ldr	r3, [r3, #12]
 3733 002c 7B60     		str	r3, [r7, #4]
3366:FreeRTOS/tasks.c **** 	}
 3734              		.loc 1 3366 0
 3735 002e 7B68     		ldr	r3, [r7, #4]
 3736 0030 5B68     		ldr	r3, [r3, #4]
 3737 0032 044A     		ldr	r2, .L268+4
 3738 0034 1360     		str	r3, [r2]
 3739              	.L267:
 3740              		.loc 1 3368 0
 3741 0036 00BF     		nop
 3742 0038 0C37     		adds	r7, r7, #12
 3743              		.cfi_def_cfa_offset 4
 3744 003a BD46     		mov	sp, r7
 3745              		.cfi_def_cfa_register 13
 3746              		@ sp needed
 3747 003c 80BC     		pop	{r7}
 3748              		.cfi_restore 7
 3749              		.cfi_def_cfa_offset 0
 3750 003e 7047     		bx	lr
 3751              	.L269:
 3752              		.align	2
 3753              	.L268:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 130


 3754 0040 90000000 		.word	pxDelayedTaskList
 3755 0044 F8000000 		.word	xNextTaskUnblockTime
 3756              		.cfi_endproc
 3757              	.LFE101:
 3758              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 3759              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3760              		.align	2
 3761              		.global	xTaskGetCurrentTaskHandle
 3762              		.thumb
 3763              		.thumb_func
 3764              		.type	xTaskGetCurrentTaskHandle, %function
 3765              	xTaskGetCurrentTaskHandle:
 3766              	.LFB102:
3369:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3370:FreeRTOS/tasks.c **** 
3371:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3372:FreeRTOS/tasks.c **** 
3373:FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3374:FreeRTOS/tasks.c **** 	{
 3767              		.loc 1 3374 0
 3768              		.cfi_startproc
 3769              		@ args = 0, pretend = 0, frame = 8
 3770              		@ frame_needed = 1, uses_anonymous_args = 0
 3771              		@ link register save eliminated.
 3772 0000 80B4     		push	{r7}
 3773              		.cfi_def_cfa_offset 4
 3774              		.cfi_offset 7, -4
 3775 0002 83B0     		sub	sp, sp, #12
 3776              		.cfi_def_cfa_offset 16
 3777 0004 00AF     		add	r7, sp, #0
 3778              		.cfi_def_cfa_register 7
3375:FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
3376:FreeRTOS/tasks.c **** 
3377:FreeRTOS/tasks.c **** 		/* A critical section is not required as this is not called from
3378:FreeRTOS/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3379:FreeRTOS/tasks.c **** 		individual execution thread. */
3380:FreeRTOS/tasks.c **** 		xReturn = pxCurrentTCB;
 3779              		.loc 1 3380 0
 3780 0006 044B     		ldr	r3, .L272
 3781 0008 1B68     		ldr	r3, [r3]
 3782 000a 7B60     		str	r3, [r7, #4]
3381:FreeRTOS/tasks.c **** 
3382:FreeRTOS/tasks.c **** 		return xReturn;
 3783              		.loc 1 3382 0
 3784 000c 7B68     		ldr	r3, [r7, #4]
3383:FreeRTOS/tasks.c **** 	}
 3785              		.loc 1 3383 0
 3786 000e 1846     		mov	r0, r3
 3787 0010 0C37     		adds	r7, r7, #12
 3788              		.cfi_def_cfa_offset 4
 3789 0012 BD46     		mov	sp, r7
 3790              		.cfi_def_cfa_register 13
 3791              		@ sp needed
 3792 0014 80BC     		pop	{r7}
 3793              		.cfi_restore 7
 3794              		.cfi_def_cfa_offset 0
 3795 0016 7047     		bx	lr
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 131


 3796              	.L273:
 3797              		.align	2
 3798              	.L272:
 3799 0018 00000000 		.word	pxCurrentTCB
 3800              		.cfi_endproc
 3801              	.LFE102:
 3802              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 3803              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 3804              		.align	2
 3805              		.global	vTaskPriorityInherit
 3806              		.thumb
 3807              		.thumb_func
 3808              		.type	vTaskPriorityInherit, %function
 3809              	vTaskPriorityInherit:
 3810              	.LFB103:
3384:FreeRTOS/tasks.c **** 
3385:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3386:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3387:FreeRTOS/tasks.c **** 
3388:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3389:FreeRTOS/tasks.c **** 
3390:FreeRTOS/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3391:FreeRTOS/tasks.c **** 	{
3392:FreeRTOS/tasks.c **** 	BaseType_t xReturn;
3393:FreeRTOS/tasks.c **** 
3394:FreeRTOS/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3395:FreeRTOS/tasks.c **** 		{
3396:FreeRTOS/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3397:FreeRTOS/tasks.c **** 		}
3398:FreeRTOS/tasks.c **** 		else
3399:FreeRTOS/tasks.c **** 		{
3400:FreeRTOS/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3401:FreeRTOS/tasks.c **** 			{
3402:FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3403:FreeRTOS/tasks.c **** 			}
3404:FreeRTOS/tasks.c **** 			else
3405:FreeRTOS/tasks.c **** 			{
3406:FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3407:FreeRTOS/tasks.c **** 			}
3408:FreeRTOS/tasks.c **** 		}
3409:FreeRTOS/tasks.c **** 
3410:FreeRTOS/tasks.c **** 		return xReturn;
3411:FreeRTOS/tasks.c **** 	}
3412:FreeRTOS/tasks.c **** 
3413:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3414:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3415:FreeRTOS/tasks.c **** 
3416:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3417:FreeRTOS/tasks.c **** 
3418:FreeRTOS/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3419:FreeRTOS/tasks.c **** 	{
 3811              		.loc 1 3419 0
 3812              		.cfi_startproc
 3813              		@ args = 0, pretend = 0, frame = 16
 3814              		@ frame_needed = 1, uses_anonymous_args = 0
 3815 0000 80B5     		push	{r7, lr}
 3816              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 132


 3817              		.cfi_offset 7, -8
 3818              		.cfi_offset 14, -4
 3819 0002 84B0     		sub	sp, sp, #16
 3820              		.cfi_def_cfa_offset 24
 3821 0004 00AF     		add	r7, sp, #0
 3822              		.cfi_def_cfa_register 7
 3823 0006 7860     		str	r0, [r7, #4]
3420:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3824              		.loc 1 3420 0
 3825 0008 7B68     		ldr	r3, [r7, #4]
 3826 000a FB60     		str	r3, [r7, #12]
3421:FreeRTOS/tasks.c **** 
3422:FreeRTOS/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3423:FreeRTOS/tasks.c **** 		locked then the mutex holder might now be NULL. */
3424:FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 3827              		.loc 1 3424 0
 3828 000c 7B68     		ldr	r3, [r7, #4]
 3829 000e 002B     		cmp	r3, #0
 3830 0010 62D0     		beq	.L283
3425:FreeRTOS/tasks.c **** 		{
3426:FreeRTOS/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3427:FreeRTOS/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3428:FreeRTOS/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3429:FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 3831              		.loc 1 3429 0
 3832 0012 FB68     		ldr	r3, [r7, #12]
 3833 0014 DA6A     		ldr	r2, [r3, #44]
 3834 0016 324B     		ldr	r3, .L284
 3835 0018 1B68     		ldr	r3, [r3]
 3836 001a DB6A     		ldr	r3, [r3, #44]
 3837 001c 9A42     		cmp	r2, r3
 3838 001e 5BD2     		bcs	.L283
3430:FreeRTOS/tasks.c **** 			{
3431:FreeRTOS/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3432:FreeRTOS/tasks.c **** 				priority.  Only reset the event list item value if the value is
3433:FreeRTOS/tasks.c **** 				not	being used for anything else. */
3434:FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 3839              		.loc 1 3434 0
 3840 0020 FB68     		ldr	r3, [r7, #12]
 3841 0022 9B69     		ldr	r3, [r3, #24]
 3842 0024 002B     		cmp	r3, #0
 3843 0026 06DB     		blt	.L276
3435:FreeRTOS/tasks.c **** 				{
3436:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 3844              		.loc 1 3436 0
 3845 0028 2D4B     		ldr	r3, .L284
 3846 002a 1B68     		ldr	r3, [r3]
 3847 002c DB6A     		ldr	r3, [r3, #44]
 3848 002e C3F10502 		rsb	r2, r3, #5
 3849 0032 FB68     		ldr	r3, [r7, #12]
 3850 0034 9A61     		str	r2, [r3, #24]
 3851              	.L276:
3437:FreeRTOS/tasks.c **** 				}
3438:FreeRTOS/tasks.c **** 				else
3439:FreeRTOS/tasks.c **** 				{
3440:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3441:FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 133


3442:FreeRTOS/tasks.c **** 
3443:FreeRTOS/tasks.c **** 				/* If the task being modified is in the ready state it will need
3444:FreeRTOS/tasks.c **** 				to be moved into a new list. */
3445:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericLis
 3852              		.loc 1 3445 0
 3853 0036 FB68     		ldr	r3, [r7, #12]
 3854 0038 5969     		ldr	r1, [r3, #20]
 3855 003a FB68     		ldr	r3, [r7, #12]
 3856 003c DA6A     		ldr	r2, [r3, #44]
 3857 003e 1346     		mov	r3, r2
 3858 0040 9B00     		lsls	r3, r3, #2
 3859 0042 1344     		add	r3, r3, r2
 3860 0044 9B00     		lsls	r3, r3, #2
 3861 0046 274A     		ldr	r2, .L284+4
 3862 0048 1344     		add	r3, r3, r2
 3863 004a 9942     		cmp	r1, r3
 3864 004c 01D1     		bne	.L277
 3865              		.loc 1 3445 0 is_stmt 0 discriminator 1
 3866 004e 0123     		movs	r3, #1
 3867 0050 00E0     		b	.L278
 3868              	.L277:
 3869              		.loc 1 3445 0 discriminator 2
 3870 0052 0023     		movs	r3, #0
 3871              	.L278:
 3872              		.loc 1 3445 0 discriminator 4
 3873 0054 002B     		cmp	r3, #0
 3874 0056 3AD0     		beq	.L279
3446:FreeRTOS/tasks.c **** 				{
3447:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 3875              		.loc 1 3447 0 is_stmt 1
 3876 0058 FB68     		ldr	r3, [r7, #12]
 3877 005a 0433     		adds	r3, r3, #4
 3878 005c 1846     		mov	r0, r3
 3879 005e FFF7FEFF 		bl	uxListRemove
 3880 0062 0346     		mov	r3, r0
 3881 0064 002B     		cmp	r3, #0
 3882 0066 15D1     		bne	.L280
3448:FreeRTOS/tasks.c **** 					{
3449:FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 3883              		.loc 1 3449 0
 3884 0068 FB68     		ldr	r3, [r7, #12]
 3885 006a DA6A     		ldr	r2, [r3, #44]
 3886 006c 1D49     		ldr	r1, .L284+4
 3887 006e 1346     		mov	r3, r2
 3888 0070 9B00     		lsls	r3, r3, #2
 3889 0072 1344     		add	r3, r3, r2
 3890 0074 9B00     		lsls	r3, r3, #2
 3891 0076 0B44     		add	r3, r3, r1
 3892 0078 1B68     		ldr	r3, [r3]
 3893 007a 002B     		cmp	r3, #0
 3894 007c 0AD1     		bne	.L280
 3895              		.loc 1 3449 0 is_stmt 0 discriminator 1
 3896 007e FB68     		ldr	r3, [r7, #12]
 3897 0080 DB6A     		ldr	r3, [r3, #44]
 3898 0082 0122     		movs	r2, #1
 3899 0084 02FA03F3 		lsl	r3, r2, r3
 3900 0088 DA43     		mvns	r2, r3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 134


 3901 008a 174B     		ldr	r3, .L284+8
 3902 008c 1B68     		ldr	r3, [r3]
 3903 008e 1340     		ands	r3, r3, r2
 3904 0090 154A     		ldr	r2, .L284+8
 3905 0092 1360     		str	r3, [r2]
 3906              	.L280:
3450:FreeRTOS/tasks.c **** 					}
3451:FreeRTOS/tasks.c **** 					else
3452:FreeRTOS/tasks.c **** 					{
3453:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3454:FreeRTOS/tasks.c **** 					}
3455:FreeRTOS/tasks.c **** 
3456:FreeRTOS/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3457:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3907              		.loc 1 3457 0 is_stmt 1
 3908 0094 124B     		ldr	r3, .L284
 3909 0096 1B68     		ldr	r3, [r3]
 3910 0098 DA6A     		ldr	r2, [r3, #44]
 3911 009a FB68     		ldr	r3, [r7, #12]
 3912 009c DA62     		str	r2, [r3, #44]
3458:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3913              		.loc 1 3458 0
 3914 009e FB68     		ldr	r3, [r7, #12]
 3915 00a0 DB6A     		ldr	r3, [r3, #44]
 3916 00a2 0122     		movs	r2, #1
 3917 00a4 9A40     		lsls	r2, r2, r3
 3918 00a6 104B     		ldr	r3, .L284+8
 3919 00a8 1B68     		ldr	r3, [r3]
 3920 00aa 1343     		orrs	r3, r3, r2
 3921 00ac 0E4A     		ldr	r2, .L284+8
 3922 00ae 1360     		str	r3, [r2]
 3923 00b0 FB68     		ldr	r3, [r7, #12]
 3924 00b2 DA6A     		ldr	r2, [r3, #44]
 3925 00b4 1346     		mov	r3, r2
 3926 00b6 9B00     		lsls	r3, r3, #2
 3927 00b8 1344     		add	r3, r3, r2
 3928 00ba 9B00     		lsls	r3, r3, #2
 3929 00bc 094A     		ldr	r2, .L284+4
 3930 00be 1A44     		add	r2, r2, r3
 3931 00c0 FB68     		ldr	r3, [r7, #12]
 3932 00c2 0433     		adds	r3, r3, #4
 3933 00c4 1946     		mov	r1, r3
 3934 00c6 1046     		mov	r0, r2
 3935 00c8 FFF7FEFF 		bl	vListInsertEnd
3459:FreeRTOS/tasks.c **** 				}
3460:FreeRTOS/tasks.c **** 				else
3461:FreeRTOS/tasks.c **** 				{
3462:FreeRTOS/tasks.c **** 					/* Just inherit the priority. */
3463:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3464:FreeRTOS/tasks.c **** 				}
3465:FreeRTOS/tasks.c **** 
3466:FreeRTOS/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3467:FreeRTOS/tasks.c **** 			}
3468:FreeRTOS/tasks.c **** 			else
3469:FreeRTOS/tasks.c **** 			{
3470:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3471:FreeRTOS/tasks.c **** 			}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 135


3472:FreeRTOS/tasks.c **** 		}
3473:FreeRTOS/tasks.c **** 		else
3474:FreeRTOS/tasks.c **** 		{
3475:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3476:FreeRTOS/tasks.c **** 		}
3477:FreeRTOS/tasks.c **** 	}
 3936              		.loc 1 3477 0
 3937 00cc 04E0     		b	.L283
 3938              	.L279:
3463:FreeRTOS/tasks.c **** 				}
 3939              		.loc 1 3463 0
 3940 00ce 044B     		ldr	r3, .L284
 3941 00d0 1B68     		ldr	r3, [r3]
 3942 00d2 DA6A     		ldr	r2, [r3, #44]
 3943 00d4 FB68     		ldr	r3, [r7, #12]
 3944 00d6 DA62     		str	r2, [r3, #44]
 3945              	.L283:
 3946              		.loc 1 3477 0
 3947 00d8 00BF     		nop
 3948 00da 1037     		adds	r7, r7, #16
 3949              		.cfi_def_cfa_offset 8
 3950 00dc BD46     		mov	sp, r7
 3951              		.cfi_def_cfa_register 13
 3952              		@ sp needed
 3953 00de 80BD     		pop	{r7, pc}
 3954              	.L285:
 3955              		.align	2
 3956              	.L284:
 3957 00e0 00000000 		.word	pxCurrentTCB
 3958 00e4 04000000 		.word	pxReadyTasksLists
 3959 00e8 E0000000 		.word	uxTopReadyPriority
 3960              		.cfi_endproc
 3961              	.LFE103:
 3962              		.size	vTaskPriorityInherit, .-vTaskPriorityInherit
 3963              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3964              		.align	2
 3965              		.global	xTaskPriorityDisinherit
 3966              		.thumb
 3967              		.thumb_func
 3968              		.type	xTaskPriorityDisinherit, %function
 3969              	xTaskPriorityDisinherit:
 3970              	.LFB104:
3478:FreeRTOS/tasks.c **** 
3479:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3480:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3481:FreeRTOS/tasks.c **** 
3482:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3483:FreeRTOS/tasks.c **** 
3484:FreeRTOS/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3485:FreeRTOS/tasks.c **** 	{
 3971              		.loc 1 3485 0
 3972              		.cfi_startproc
 3973              		@ args = 0, pretend = 0, frame = 16
 3974              		@ frame_needed = 1, uses_anonymous_args = 0
 3975 0000 80B5     		push	{r7, lr}
 3976              		.cfi_def_cfa_offset 8
 3977              		.cfi_offset 7, -8
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 136


 3978              		.cfi_offset 14, -4
 3979 0002 84B0     		sub	sp, sp, #16
 3980              		.cfi_def_cfa_offset 24
 3981 0004 00AF     		add	r7, sp, #0
 3982              		.cfi_def_cfa_register 7
 3983 0006 7860     		str	r0, [r7, #4]
3486:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3984              		.loc 1 3486 0
 3985 0008 7B68     		ldr	r3, [r7, #4]
 3986 000a BB60     		str	r3, [r7, #8]
3487:FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 3987              		.loc 1 3487 0
 3988 000c 0023     		movs	r3, #0
 3989 000e FB60     		str	r3, [r7, #12]
3488:FreeRTOS/tasks.c **** 
3489:FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 3990              		.loc 1 3489 0
 3991 0010 7B68     		ldr	r3, [r7, #4]
 3992 0012 002B     		cmp	r3, #0
 3993 0014 4FD0     		beq	.L287
3490:FreeRTOS/tasks.c **** 		{
3491:FreeRTOS/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3492:FreeRTOS/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3493:FreeRTOS/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3494:FreeRTOS/tasks.c **** 			be the running state task. */
3495:FreeRTOS/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3496:FreeRTOS/tasks.c **** 
3497:FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3498:FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3994              		.loc 1 3498 0
 3995 0016 BB68     		ldr	r3, [r7, #8]
 3996 0018 5B6C     		ldr	r3, [r3, #68]
 3997 001a 5A1E     		subs	r2, r3, #1
 3998 001c BB68     		ldr	r3, [r7, #8]
 3999 001e 5A64     		str	r2, [r3, #68]
3499:FreeRTOS/tasks.c **** 
3500:FreeRTOS/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3501:FreeRTOS/tasks.c **** 			task? */
3502:FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 4000              		.loc 1 3502 0
 4001 0020 BB68     		ldr	r3, [r7, #8]
 4002 0022 DA6A     		ldr	r2, [r3, #44]
 4003 0024 BB68     		ldr	r3, [r7, #8]
 4004 0026 1B6C     		ldr	r3, [r3, #64]
 4005 0028 9A42     		cmp	r2, r3
 4006 002a 44D0     		beq	.L287
3503:FreeRTOS/tasks.c **** 			{
3504:FreeRTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3505:FreeRTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 4007              		.loc 1 3505 0
 4008 002c BB68     		ldr	r3, [r7, #8]
 4009 002e 5B6C     		ldr	r3, [r3, #68]
 4010 0030 002B     		cmp	r3, #0
 4011 0032 40D1     		bne	.L287
3506:FreeRTOS/tasks.c **** 				{
3507:FreeRTOS/tasks.c **** 					/* A task can only have an inherited priority if it holds
3508:FreeRTOS/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 137


3509:FreeRTOS/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3510:FreeRTOS/tasks.c **** 					holding	task then it must be the running state task.  Remove
3511:FreeRTOS/tasks.c **** 					the	holding task from the ready	list. */
3512:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 4012              		.loc 1 3512 0
 4013 0034 BB68     		ldr	r3, [r7, #8]
 4014 0036 0433     		adds	r3, r3, #4
 4015 0038 1846     		mov	r0, r3
 4016 003a FFF7FEFF 		bl	uxListRemove
 4017 003e 0346     		mov	r3, r0
 4018 0040 002B     		cmp	r3, #0
 4019 0042 15D1     		bne	.L288
3513:FreeRTOS/tasks.c **** 					{
3514:FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4020              		.loc 1 3514 0
 4021 0044 BB68     		ldr	r3, [r7, #8]
 4022 0046 DA6A     		ldr	r2, [r3, #44]
 4023 0048 1D49     		ldr	r1, .L291
 4024 004a 1346     		mov	r3, r2
 4025 004c 9B00     		lsls	r3, r3, #2
 4026 004e 1344     		add	r3, r3, r2
 4027 0050 9B00     		lsls	r3, r3, #2
 4028 0052 0B44     		add	r3, r3, r1
 4029 0054 1B68     		ldr	r3, [r3]
 4030 0056 002B     		cmp	r3, #0
 4031 0058 0AD1     		bne	.L288
 4032              		.loc 1 3514 0 is_stmt 0 discriminator 1
 4033 005a BB68     		ldr	r3, [r7, #8]
 4034 005c DB6A     		ldr	r3, [r3, #44]
 4035 005e 0122     		movs	r2, #1
 4036 0060 02FA03F3 		lsl	r3, r2, r3
 4037 0064 DA43     		mvns	r2, r3
 4038 0066 174B     		ldr	r3, .L291+4
 4039 0068 1B68     		ldr	r3, [r3]
 4040 006a 1340     		ands	r3, r3, r2
 4041 006c 154A     		ldr	r2, .L291+4
 4042 006e 1360     		str	r3, [r2]
 4043              	.L288:
3515:FreeRTOS/tasks.c **** 					}
3516:FreeRTOS/tasks.c **** 					else
3517:FreeRTOS/tasks.c **** 					{
3518:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3519:FreeRTOS/tasks.c **** 					}
3520:FreeRTOS/tasks.c **** 
3521:FreeRTOS/tasks.c **** 					/* Disinherit the priority before adding the task into the
3522:FreeRTOS/tasks.c **** 					new	ready list. */
3523:FreeRTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3524:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 4044              		.loc 1 3524 0 is_stmt 1
 4045 0070 BB68     		ldr	r3, [r7, #8]
 4046 0072 1A6C     		ldr	r2, [r3, #64]
 4047 0074 BB68     		ldr	r3, [r7, #8]
 4048 0076 DA62     		str	r2, [r3, #44]
3525:FreeRTOS/tasks.c **** 
3526:FreeRTOS/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3527:FreeRTOS/tasks.c **** 					any other purpose if this task is running, and it must be
3528:FreeRTOS/tasks.c **** 					running to give back the mutex. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 138


3529:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 4049              		.loc 1 3529 0
 4050 0078 BB68     		ldr	r3, [r7, #8]
 4051 007a DB6A     		ldr	r3, [r3, #44]
 4052 007c C3F10502 		rsb	r2, r3, #5
 4053 0080 BB68     		ldr	r3, [r7, #8]
 4054 0082 9A61     		str	r2, [r3, #24]
3530:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4055              		.loc 1 3530 0
 4056 0084 BB68     		ldr	r3, [r7, #8]
 4057 0086 DB6A     		ldr	r3, [r3, #44]
 4058 0088 0122     		movs	r2, #1
 4059 008a 9A40     		lsls	r2, r2, r3
 4060 008c 0D4B     		ldr	r3, .L291+4
 4061 008e 1B68     		ldr	r3, [r3]
 4062 0090 1343     		orrs	r3, r3, r2
 4063 0092 0C4A     		ldr	r2, .L291+4
 4064 0094 1360     		str	r3, [r2]
 4065 0096 BB68     		ldr	r3, [r7, #8]
 4066 0098 DA6A     		ldr	r2, [r3, #44]
 4067 009a 1346     		mov	r3, r2
 4068 009c 9B00     		lsls	r3, r3, #2
 4069 009e 1344     		add	r3, r3, r2
 4070 00a0 9B00     		lsls	r3, r3, #2
 4071 00a2 074A     		ldr	r2, .L291
 4072 00a4 1A44     		add	r2, r2, r3
 4073 00a6 BB68     		ldr	r3, [r7, #8]
 4074 00a8 0433     		adds	r3, r3, #4
 4075 00aa 1946     		mov	r1, r3
 4076 00ac 1046     		mov	r0, r2
 4077 00ae FFF7FEFF 		bl	vListInsertEnd
3531:FreeRTOS/tasks.c **** 
3532:FreeRTOS/tasks.c **** 					/* Return true to indicate that a context switch is required.
3533:FreeRTOS/tasks.c **** 					This is only actually required in the corner case whereby
3534:FreeRTOS/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3535:FreeRTOS/tasks.c **** 					in an order different to that in which they were taken.
3536:FreeRTOS/tasks.c **** 					If a context switch did not occur when the first mutex was
3537:FreeRTOS/tasks.c **** 					returned, even if a task was waiting on it, then a context
3538:FreeRTOS/tasks.c **** 					switch should occur when the last mutex is returned whether
3539:FreeRTOS/tasks.c **** 					a task is waiting on it or not. */
3540:FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
 4078              		.loc 1 3540 0
 4079 00b2 0123     		movs	r3, #1
 4080 00b4 FB60     		str	r3, [r7, #12]
 4081              	.L287:
3541:FreeRTOS/tasks.c **** 				}
3542:FreeRTOS/tasks.c **** 				else
3543:FreeRTOS/tasks.c **** 				{
3544:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3545:FreeRTOS/tasks.c **** 				}
3546:FreeRTOS/tasks.c **** 			}
3547:FreeRTOS/tasks.c **** 			else
3548:FreeRTOS/tasks.c **** 			{
3549:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3550:FreeRTOS/tasks.c **** 			}
3551:FreeRTOS/tasks.c **** 		}
3552:FreeRTOS/tasks.c **** 		else
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 139


3553:FreeRTOS/tasks.c **** 		{
3554:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3555:FreeRTOS/tasks.c **** 		}
3556:FreeRTOS/tasks.c **** 
3557:FreeRTOS/tasks.c **** 		return xReturn;
 4082              		.loc 1 3557 0
 4083 00b6 FB68     		ldr	r3, [r7, #12]
3558:FreeRTOS/tasks.c **** 	}
 4084              		.loc 1 3558 0
 4085 00b8 1846     		mov	r0, r3
 4086 00ba 1037     		adds	r7, r7, #16
 4087              		.cfi_def_cfa_offset 8
 4088 00bc BD46     		mov	sp, r7
 4089              		.cfi_def_cfa_register 13
 4090              		@ sp needed
 4091 00be 80BD     		pop	{r7, pc}
 4092              	.L292:
 4093              		.align	2
 4094              	.L291:
 4095 00c0 04000000 		.word	pxReadyTasksLists
 4096 00c4 E0000000 		.word	uxTopReadyPriority
 4097              		.cfi_endproc
 4098              	.LFE104:
 4099              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 4100              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4101              		.align	2
 4102              		.global	uxTaskResetEventItemValue
 4103              		.thumb
 4104              		.thumb_func
 4105              		.type	uxTaskResetEventItemValue, %function
 4106              	uxTaskResetEventItemValue:
 4107              	.LFB105:
3559:FreeRTOS/tasks.c **** 
3560:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3561:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3562:FreeRTOS/tasks.c **** 
3563:FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3564:FreeRTOS/tasks.c **** 
3565:FreeRTOS/tasks.c **** 	void vTaskEnterCritical( void )
3566:FreeRTOS/tasks.c **** 	{
3567:FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
3568:FreeRTOS/tasks.c **** 
3569:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3570:FreeRTOS/tasks.c **** 		{
3571:FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3572:FreeRTOS/tasks.c **** 
3573:FreeRTOS/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3574:FreeRTOS/tasks.c **** 			function so	assert() if it is being called from an interrupt
3575:FreeRTOS/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3576:FreeRTOS/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3577:FreeRTOS/tasks.c **** 			protect against recursive calls if the assert function also uses a
3578:FreeRTOS/tasks.c **** 			critical section. */
3579:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3580:FreeRTOS/tasks.c **** 			{
3581:FreeRTOS/tasks.c **** 				portASSERT_IF_IN_ISR();
3582:FreeRTOS/tasks.c **** 			}
3583:FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 140


3584:FreeRTOS/tasks.c **** 		else
3585:FreeRTOS/tasks.c **** 		{
3586:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3587:FreeRTOS/tasks.c **** 		}
3588:FreeRTOS/tasks.c **** 	}
3589:FreeRTOS/tasks.c **** 
3590:FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3591:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3592:FreeRTOS/tasks.c **** 
3593:FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3594:FreeRTOS/tasks.c **** 
3595:FreeRTOS/tasks.c **** 	void vTaskExitCritical( void )
3596:FreeRTOS/tasks.c **** 	{
3597:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3598:FreeRTOS/tasks.c **** 		{
3599:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3600:FreeRTOS/tasks.c **** 			{
3601:FreeRTOS/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3602:FreeRTOS/tasks.c **** 
3603:FreeRTOS/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3604:FreeRTOS/tasks.c **** 				{
3605:FreeRTOS/tasks.c **** 					portENABLE_INTERRUPTS();
3606:FreeRTOS/tasks.c **** 				}
3607:FreeRTOS/tasks.c **** 				else
3608:FreeRTOS/tasks.c **** 				{
3609:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3610:FreeRTOS/tasks.c **** 				}
3611:FreeRTOS/tasks.c **** 			}
3612:FreeRTOS/tasks.c **** 			else
3613:FreeRTOS/tasks.c **** 			{
3614:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3615:FreeRTOS/tasks.c **** 			}
3616:FreeRTOS/tasks.c **** 		}
3617:FreeRTOS/tasks.c **** 		else
3618:FreeRTOS/tasks.c **** 		{
3619:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3620:FreeRTOS/tasks.c **** 		}
3621:FreeRTOS/tasks.c **** 	}
3622:FreeRTOS/tasks.c **** 
3623:FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3624:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3625:FreeRTOS/tasks.c **** 
3626:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3627:FreeRTOS/tasks.c **** 
3628:FreeRTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3629:FreeRTOS/tasks.c **** 	{
3630:FreeRTOS/tasks.c **** 	size_t x;
3631:FreeRTOS/tasks.c **** 
3632:FreeRTOS/tasks.c **** 		/* Start by copying the entire string. */
3633:FreeRTOS/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3634:FreeRTOS/tasks.c **** 
3635:FreeRTOS/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3636:FreeRTOS/tasks.c **** 		printed out. */
3637:FreeRTOS/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3638:FreeRTOS/tasks.c **** 		{
3639:FreeRTOS/tasks.c **** 			pcBuffer[ x ] = ' ';
3640:FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 141


3641:FreeRTOS/tasks.c **** 
3642:FreeRTOS/tasks.c **** 		/* Terminate. */
3643:FreeRTOS/tasks.c **** 		pcBuffer[ x ] = 0x00;
3644:FreeRTOS/tasks.c **** 
3645:FreeRTOS/tasks.c **** 		/* Return the new end of string. */
3646:FreeRTOS/tasks.c **** 		return &( pcBuffer[ x ] );
3647:FreeRTOS/tasks.c **** 	}
3648:FreeRTOS/tasks.c **** 
3649:FreeRTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3650:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3651:FreeRTOS/tasks.c **** 
3652:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3653:FreeRTOS/tasks.c **** 
3654:FreeRTOS/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3655:FreeRTOS/tasks.c **** 	{
3656:FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3657:FreeRTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3658:FreeRTOS/tasks.c **** 	char cStatus;
3659:FreeRTOS/tasks.c **** 
3660:FreeRTOS/tasks.c **** 		/*
3661:FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
3662:FreeRTOS/tasks.c **** 		 *
3663:FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3664:FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3665:FreeRTOS/tasks.c **** 		 * scheduler.
3666:FreeRTOS/tasks.c **** 		 *
3667:FreeRTOS/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3668:FreeRTOS/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3669:FreeRTOS/tasks.c **** 		 * displays task names, states and stack usage.
3670:FreeRTOS/tasks.c **** 		 *
3671:FreeRTOS/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3672:FreeRTOS/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3673:FreeRTOS/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3674:FreeRTOS/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3675:FreeRTOS/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3676:FreeRTOS/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3677:FreeRTOS/tasks.c **** 		 * snprintf() implementation!).
3678:FreeRTOS/tasks.c **** 		 *
3679:FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3680:FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3681:FreeRTOS/tasks.c **** 		 * through a call to vTaskList().
3682:FreeRTOS/tasks.c **** 		 */
3683:FreeRTOS/tasks.c **** 
3684:FreeRTOS/tasks.c **** 
3685:FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3686:FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
3687:FreeRTOS/tasks.c **** 
3688:FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3689:FreeRTOS/tasks.c **** 		function is executing. */
3690:FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3691:FreeRTOS/tasks.c **** 
3692:FreeRTOS/tasks.c **** 		/* Allocate an array index for each task. */
3693:FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3694:FreeRTOS/tasks.c **** 
3695:FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
3696:FreeRTOS/tasks.c **** 		{
3697:FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 142


3698:FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3699:FreeRTOS/tasks.c **** 
3700:FreeRTOS/tasks.c **** 			/* Create a human readable table from the binary data. */
3701:FreeRTOS/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3702:FreeRTOS/tasks.c **** 			{
3703:FreeRTOS/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3704:FreeRTOS/tasks.c **** 				{
3705:FreeRTOS/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3706:FreeRTOS/tasks.c **** 										break;
3707:FreeRTOS/tasks.c **** 
3708:FreeRTOS/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3709:FreeRTOS/tasks.c **** 										break;
3710:FreeRTOS/tasks.c **** 
3711:FreeRTOS/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
3712:FreeRTOS/tasks.c **** 										break;
3713:FreeRTOS/tasks.c **** 
3714:FreeRTOS/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
3715:FreeRTOS/tasks.c **** 										break;
3716:FreeRTOS/tasks.c **** 
3717:FreeRTOS/tasks.c **** 					default:			/* Should not get here, but it is included
3718:FreeRTOS/tasks.c **** 										to prevent static checking errors. */
3719:FreeRTOS/tasks.c **** 										cStatus = 0x00;
3720:FreeRTOS/tasks.c **** 										break;
3721:FreeRTOS/tasks.c **** 				}
3722:FreeRTOS/tasks.c **** 
3723:FreeRTOS/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
3724:FreeRTOS/tasks.c **** 				can be printed in tabular form more easily. */
3725:FreeRTOS/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
3726:FreeRTOS/tasks.c **** 
3727:FreeRTOS/tasks.c **** 				/* Write the rest of the string. */
3728:FreeRTOS/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
3729:FreeRTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
3730:FreeRTOS/tasks.c **** 			}
3731:FreeRTOS/tasks.c **** 
3732:FreeRTOS/tasks.c **** 			/* Free the array again. */
3733:FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
3734:FreeRTOS/tasks.c **** 		}
3735:FreeRTOS/tasks.c **** 		else
3736:FreeRTOS/tasks.c **** 		{
3737:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3738:FreeRTOS/tasks.c **** 		}
3739:FreeRTOS/tasks.c **** 	}
3740:FreeRTOS/tasks.c **** 
3741:FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
3742:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
3743:FreeRTOS/tasks.c **** 
3744:FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3745:FreeRTOS/tasks.c **** 
3746:FreeRTOS/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
3747:FreeRTOS/tasks.c **** 	{
3748:FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3749:FreeRTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3750:FreeRTOS/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
3751:FreeRTOS/tasks.c **** 
3752:FreeRTOS/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
3753:FreeRTOS/tasks.c **** 		{
3754:FreeRTOS/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 143


3755:FreeRTOS/tasks.c **** 		}
3756:FreeRTOS/tasks.c **** 		#endif
3757:FreeRTOS/tasks.c **** 
3758:FreeRTOS/tasks.c **** 		/*
3759:FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
3760:FreeRTOS/tasks.c **** 		 *
3761:FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3762:FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3763:FreeRTOS/tasks.c **** 		 * scheduler.
3764:FreeRTOS/tasks.c **** 		 *
3765:FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
3766:FreeRTOS/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
3767:FreeRTOS/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
3768:FreeRTOS/tasks.c **** 		 * in both absolute and percentage terms.
3769:FreeRTOS/tasks.c **** 		 *
3770:FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
3771:FreeRTOS/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
3772:FreeRTOS/tasks.c **** 		 * provide different results on different platforms.  An alternative,
3773:FreeRTOS/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
3774:FreeRTOS/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
3775:FreeRTOS/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
3776:FreeRTOS/tasks.c **** 		 * a full snprintf() implementation!).
3777:FreeRTOS/tasks.c **** 		 *
3778:FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3779:FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3780:FreeRTOS/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
3781:FreeRTOS/tasks.c **** 		 */
3782:FreeRTOS/tasks.c **** 
3783:FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3784:FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
3785:FreeRTOS/tasks.c **** 
3786:FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3787:FreeRTOS/tasks.c **** 		function is executing. */
3788:FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3789:FreeRTOS/tasks.c **** 
3790:FreeRTOS/tasks.c **** 		/* Allocate an array index for each task. */
3791:FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3792:FreeRTOS/tasks.c **** 
3793:FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
3794:FreeRTOS/tasks.c **** 		{
3795:FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
3796:FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
3797:FreeRTOS/tasks.c **** 
3798:FreeRTOS/tasks.c **** 			/* For percentage calculations. */
3799:FreeRTOS/tasks.c **** 			ulTotalTime /= 100UL;
3800:FreeRTOS/tasks.c **** 
3801:FreeRTOS/tasks.c **** 			/* Avoid divide by zero errors. */
3802:FreeRTOS/tasks.c **** 			if( ulTotalTime > 0 )
3803:FreeRTOS/tasks.c **** 			{
3804:FreeRTOS/tasks.c **** 				/* Create a human readable table from the binary data. */
3805:FreeRTOS/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
3806:FreeRTOS/tasks.c **** 				{
3807:FreeRTOS/tasks.c **** 					/* What percentage of the total run time has the task used?
3808:FreeRTOS/tasks.c **** 					This will always be rounded down to the nearest integer.
3809:FreeRTOS/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
3810:FreeRTOS/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
3811:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 144


3812:FreeRTOS/tasks.c **** 					/* Write the task name to the string, padding with
3813:FreeRTOS/tasks.c **** 					spaces so it can be printed in tabular form more
3814:FreeRTOS/tasks.c **** 					easily. */
3815:FreeRTOS/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
3816:FreeRTOS/tasks.c **** 
3817:FreeRTOS/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
3818:FreeRTOS/tasks.c **** 					{
3819:FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3820:FreeRTOS/tasks.c **** 						{
3821:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
3822:FreeRTOS/tasks.c **** 						}
3823:FreeRTOS/tasks.c **** 						#else
3824:FreeRTOS/tasks.c **** 						{
3825:FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3826:FreeRTOS/tasks.c **** 							printf() library can be used. */
3827:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
3828:FreeRTOS/tasks.c **** 						}
3829:FreeRTOS/tasks.c **** 						#endif
3830:FreeRTOS/tasks.c **** 					}
3831:FreeRTOS/tasks.c **** 					else
3832:FreeRTOS/tasks.c **** 					{
3833:FreeRTOS/tasks.c **** 						/* If the percentage is zero here then the task has
3834:FreeRTOS/tasks.c **** 						consumed less than 1% of the total run time. */
3835:FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3836:FreeRTOS/tasks.c **** 						{
3837:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
3838:FreeRTOS/tasks.c **** 						}
3839:FreeRTOS/tasks.c **** 						#else
3840:FreeRTOS/tasks.c **** 						{
3841:FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3842:FreeRTOS/tasks.c **** 							printf() library can be used. */
3843:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
3844:FreeRTOS/tasks.c **** 						}
3845:FreeRTOS/tasks.c **** 						#endif
3846:FreeRTOS/tasks.c **** 					}
3847:FreeRTOS/tasks.c **** 
3848:FreeRTOS/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
3849:FreeRTOS/tasks.c **** 				}
3850:FreeRTOS/tasks.c **** 			}
3851:FreeRTOS/tasks.c **** 			else
3852:FreeRTOS/tasks.c **** 			{
3853:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3854:FreeRTOS/tasks.c **** 			}
3855:FreeRTOS/tasks.c **** 
3856:FreeRTOS/tasks.c **** 			/* Free the array again. */
3857:FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
3858:FreeRTOS/tasks.c **** 		}
3859:FreeRTOS/tasks.c **** 		else
3860:FreeRTOS/tasks.c **** 		{
3861:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3862:FreeRTOS/tasks.c **** 		}
3863:FreeRTOS/tasks.c **** 	}
3864:FreeRTOS/tasks.c **** 
3865:FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
3866:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3867:FreeRTOS/tasks.c **** 
3868:FreeRTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 145


3869:FreeRTOS/tasks.c **** {
 4108              		.loc 1 3869 0
 4109              		.cfi_startproc
 4110              		@ args = 0, pretend = 0, frame = 8
 4111              		@ frame_needed = 1, uses_anonymous_args = 0
 4112              		@ link register save eliminated.
 4113 0000 80B4     		push	{r7}
 4114              		.cfi_def_cfa_offset 4
 4115              		.cfi_offset 7, -4
 4116 0002 83B0     		sub	sp, sp, #12
 4117              		.cfi_def_cfa_offset 16
 4118 0004 00AF     		add	r7, sp, #0
 4119              		.cfi_def_cfa_register 7
3870:FreeRTOS/tasks.c **** TickType_t uxReturn;
3871:FreeRTOS/tasks.c **** 
3872:FreeRTOS/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 4120              		.loc 1 3872 0
 4121 0006 094B     		ldr	r3, .L295
 4122 0008 1B68     		ldr	r3, [r3]
 4123 000a 9B69     		ldr	r3, [r3, #24]
 4124 000c 7B60     		str	r3, [r7, #4]
3873:FreeRTOS/tasks.c **** 
3874:FreeRTOS/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
3875:FreeRTOS/tasks.c **** 	queues and semaphores. */
3876:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 4125              		.loc 1 3876 0
 4126 000e 074B     		ldr	r3, .L295
 4127 0010 1B68     		ldr	r3, [r3]
 4128 0012 064A     		ldr	r2, .L295
 4129 0014 1268     		ldr	r2, [r2]
 4130 0016 D26A     		ldr	r2, [r2, #44]
 4131 0018 C2F10502 		rsb	r2, r2, #5
 4132 001c 9A61     		str	r2, [r3, #24]
3877:FreeRTOS/tasks.c **** 
3878:FreeRTOS/tasks.c **** 	return uxReturn;
 4133              		.loc 1 3878 0
 4134 001e 7B68     		ldr	r3, [r7, #4]
3879:FreeRTOS/tasks.c **** }
 4135              		.loc 1 3879 0
 4136 0020 1846     		mov	r0, r3
 4137 0022 0C37     		adds	r7, r7, #12
 4138              		.cfi_def_cfa_offset 4
 4139 0024 BD46     		mov	sp, r7
 4140              		.cfi_def_cfa_register 13
 4141              		@ sp needed
 4142 0026 80BC     		pop	{r7}
 4143              		.cfi_restore 7
 4144              		.cfi_def_cfa_offset 0
 4145 0028 7047     		bx	lr
 4146              	.L296:
 4147 002a 00BF     		.align	2
 4148              	.L295:
 4149 002c 00000000 		.word	pxCurrentTCB
 4150              		.cfi_endproc
 4151              	.LFE105:
 4152              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 4153              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 146


 4154              		.align	2
 4155              		.global	pvTaskIncrementMutexHeldCount
 4156              		.thumb
 4157              		.thumb_func
 4158              		.type	pvTaskIncrementMutexHeldCount, %function
 4159              	pvTaskIncrementMutexHeldCount:
 4160              	.LFB106:
3880:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3881:FreeRTOS/tasks.c **** 
3882:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3883:FreeRTOS/tasks.c **** 
3884:FreeRTOS/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
3885:FreeRTOS/tasks.c **** 	{
 4161              		.loc 1 3885 0
 4162              		.cfi_startproc
 4163              		@ args = 0, pretend = 0, frame = 0
 4164              		@ frame_needed = 1, uses_anonymous_args = 0
 4165              		@ link register save eliminated.
 4166 0000 80B4     		push	{r7}
 4167              		.cfi_def_cfa_offset 4
 4168              		.cfi_offset 7, -4
 4169 0002 00AF     		add	r7, sp, #0
 4170              		.cfi_def_cfa_register 7
3886:FreeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
3887:FreeRTOS/tasks.c **** 		then pxCurrentTCB will be NULL. */
3888:FreeRTOS/tasks.c **** 		if( pxCurrentTCB != NULL )
 4171              		.loc 1 3888 0
 4172 0004 074B     		ldr	r3, .L300
 4173 0006 1B68     		ldr	r3, [r3]
 4174 0008 002B     		cmp	r3, #0
 4175 000a 04D0     		beq	.L298
3889:FreeRTOS/tasks.c **** 		{
3890:FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 4176              		.loc 1 3890 0
 4177 000c 054B     		ldr	r3, .L300
 4178 000e 1B68     		ldr	r3, [r3]
 4179 0010 5A6C     		ldr	r2, [r3, #68]
 4180 0012 0132     		adds	r2, r2, #1
 4181 0014 5A64     		str	r2, [r3, #68]
 4182              	.L298:
3891:FreeRTOS/tasks.c **** 		}
3892:FreeRTOS/tasks.c **** 
3893:FreeRTOS/tasks.c **** 		return pxCurrentTCB;
 4183              		.loc 1 3893 0
 4184 0016 034B     		ldr	r3, .L300
 4185 0018 1B68     		ldr	r3, [r3]
3894:FreeRTOS/tasks.c **** 	}
 4186              		.loc 1 3894 0
 4187 001a 1846     		mov	r0, r3
 4188 001c BD46     		mov	sp, r7
 4189              		.cfi_def_cfa_register 13
 4190              		@ sp needed
 4191 001e 80BC     		pop	{r7}
 4192              		.cfi_restore 7
 4193              		.cfi_def_cfa_offset 0
 4194 0020 7047     		bx	lr
 4195              	.L301:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 147


 4196 0022 00BF     		.align	2
 4197              	.L300:
 4198 0024 00000000 		.word	pxCurrentTCB
 4199              		.cfi_endproc
 4200              	.LFE106:
 4201              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 4202              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4203              		.align	2
 4204              		.global	ulTaskNotifyTake
 4205              		.thumb
 4206              		.thumb_func
 4207              		.type	ulTaskNotifyTake, %function
 4208              	ulTaskNotifyTake:
 4209              	.LFB107:
3895:FreeRTOS/tasks.c **** 
3896:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3897:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3898:FreeRTOS/tasks.c **** 
3899:FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
3900:FreeRTOS/tasks.c **** 
3901:FreeRTOS/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
3902:FreeRTOS/tasks.c **** 	{
 4210              		.loc 1 3902 0
 4211              		.cfi_startproc
 4212              		@ args = 0, pretend = 0, frame = 16
 4213              		@ frame_needed = 1, uses_anonymous_args = 0
 4214 0000 80B5     		push	{r7, lr}
 4215              		.cfi_def_cfa_offset 8
 4216              		.cfi_offset 7, -8
 4217              		.cfi_offset 14, -4
 4218 0002 84B0     		sub	sp, sp, #16
 4219              		.cfi_def_cfa_offset 24
 4220 0004 00AF     		add	r7, sp, #0
 4221              		.cfi_def_cfa_register 7
 4222 0006 7860     		str	r0, [r7, #4]
 4223 0008 3960     		str	r1, [r7]
3903:FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
3904:FreeRTOS/tasks.c **** 	uint32_t ulReturn;
3905:FreeRTOS/tasks.c **** 
3906:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 4224              		.loc 1 3906 0
 4225 000a FFF7FEFF 		bl	vPortEnterCritical
3907:FreeRTOS/tasks.c **** 		{
3908:FreeRTOS/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
3909:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 4226              		.loc 1 3909 0
 4227 000e 2E4B     		ldr	r3, .L311
 4228 0010 1B68     		ldr	r3, [r3]
 4229 0012 9B6C     		ldr	r3, [r3, #72]
 4230 0014 002B     		cmp	r3, #0
 4231 0016 32D1     		bne	.L303
3910:FreeRTOS/tasks.c **** 			{
3911:FreeRTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
3912:FreeRTOS/tasks.c **** 				pxCurrentTCB->eNotifyState = eWaitingNotification;
 4232              		.loc 1 3912 0
 4233 0018 2B4B     		ldr	r3, .L311
 4234 001a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 148


 4235 001c 0122     		movs	r2, #1
 4236 001e 83F84C20 		strb	r2, [r3, #76]
3913:FreeRTOS/tasks.c **** 
3914:FreeRTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 4237              		.loc 1 3914 0
 4238 0022 3B68     		ldr	r3, [r7]
 4239 0024 002B     		cmp	r3, #0
 4240 0026 2AD0     		beq	.L303
3915:FreeRTOS/tasks.c **** 				{
3916:FreeRTOS/tasks.c **** 					/* The task is going to block.  First it must be removed
3917:FreeRTOS/tasks.c **** 					from the ready list. */
3918:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 4241              		.loc 1 3918 0
 4242 0028 274B     		ldr	r3, .L311
 4243 002a 1B68     		ldr	r3, [r3]
 4244 002c 0433     		adds	r3, r3, #4
 4245 002e 1846     		mov	r0, r3
 4246 0030 FFF7FEFF 		bl	uxListRemove
 4247 0034 0346     		mov	r3, r0
 4248 0036 002B     		cmp	r3, #0
 4249 0038 0BD1     		bne	.L304
3919:FreeRTOS/tasks.c **** 					{
3920:FreeRTOS/tasks.c **** 						/* The current task must be in a ready list, so there is
3921:FreeRTOS/tasks.c **** 						no need to check, and the port reset macro can be called
3922:FreeRTOS/tasks.c **** 						directly. */
3923:FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 4250              		.loc 1 3923 0
 4251 003a 234B     		ldr	r3, .L311
 4252 003c 1B68     		ldr	r3, [r3]
 4253 003e DB6A     		ldr	r3, [r3, #44]
 4254 0040 0122     		movs	r2, #1
 4255 0042 02FA03F3 		lsl	r3, r2, r3
 4256 0046 DA43     		mvns	r2, r3
 4257 0048 204B     		ldr	r3, .L311+4
 4258 004a 1B68     		ldr	r3, [r3]
 4259 004c 1340     		ands	r3, r3, r2
 4260 004e 1F4A     		ldr	r2, .L311+4
 4261 0050 1360     		str	r3, [r2]
 4262              	.L304:
3924:FreeRTOS/tasks.c **** 					}
3925:FreeRTOS/tasks.c **** 					else
3926:FreeRTOS/tasks.c **** 					{
3927:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3928:FreeRTOS/tasks.c **** 					}
3929:FreeRTOS/tasks.c **** 
3930:FreeRTOS/tasks.c **** 					#if ( INCLUDE_vTaskSuspend == 1 )
3931:FreeRTOS/tasks.c **** 					{
3932:FreeRTOS/tasks.c **** 						if( xTicksToWait == portMAX_DELAY )
 4263              		.loc 1 3932 0
 4264 0052 3B68     		ldr	r3, [r7]
 4265 0054 B3F1FF3F 		cmp	r3, #-1
 4266 0058 07D1     		bne	.L305
3933:FreeRTOS/tasks.c **** 						{
3934:FreeRTOS/tasks.c **** 							/* Add the task to the suspended task list instead
3935:FreeRTOS/tasks.c **** 							of a delayed task list to ensure the task is not
3936:FreeRTOS/tasks.c **** 							woken by a timing event.  It will block
3937:FreeRTOS/tasks.c **** 							indefinitely. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 149


3938:FreeRTOS/tasks.c **** 							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 4267              		.loc 1 3938 0
 4268 005a 1B4B     		ldr	r3, .L311
 4269 005c 1B68     		ldr	r3, [r3]
 4270 005e 0433     		adds	r3, r3, #4
 4271 0060 1946     		mov	r1, r3
 4272 0062 1B48     		ldr	r0, .L311+8
 4273 0064 FFF7FEFF 		bl	vListInsertEnd
 4274 0068 07E0     		b	.L306
 4275              	.L305:
3939:FreeRTOS/tasks.c **** 						}
3940:FreeRTOS/tasks.c **** 						else
3941:FreeRTOS/tasks.c **** 						{
3942:FreeRTOS/tasks.c **** 							/* Calculate the time at which the task should be
3943:FreeRTOS/tasks.c **** 							woken if no notification events occur.  This may
3944:FreeRTOS/tasks.c **** 							overflow but this doesn't matter, the scheduler will
3945:FreeRTOS/tasks.c **** 							handle it. */
3946:FreeRTOS/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
 4276              		.loc 1 3946 0
 4277 006a 1A4B     		ldr	r3, .L311+12
 4278 006c 1A68     		ldr	r2, [r3]
 4279 006e 3B68     		ldr	r3, [r7]
 4280 0070 1344     		add	r3, r3, r2
 4281 0072 FB60     		str	r3, [r7, #12]
3947:FreeRTOS/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
 4282              		.loc 1 3947 0
 4283 0074 F868     		ldr	r0, [r7, #12]
 4284 0076 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4285              	.L306:
3948:FreeRTOS/tasks.c **** 						}
3949:FreeRTOS/tasks.c **** 					}
3950:FreeRTOS/tasks.c **** 					#else /* INCLUDE_vTaskSuspend */
3951:FreeRTOS/tasks.c **** 					{
3952:FreeRTOS/tasks.c **** 							/* Calculate the time at which the task should be
3953:FreeRTOS/tasks.c **** 							woken if the event does not occur.  This may
3954:FreeRTOS/tasks.c **** 							overflow but this doesn't matter, the scheduler will
3955:FreeRTOS/tasks.c **** 							handle it. */
3956:FreeRTOS/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
3957:FreeRTOS/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
3958:FreeRTOS/tasks.c **** 					}
3959:FreeRTOS/tasks.c **** 					#endif /* INCLUDE_vTaskSuspend */
3960:FreeRTOS/tasks.c **** 
3961:FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
3962:FreeRTOS/tasks.c **** 
3963:FreeRTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
3964:FreeRTOS/tasks.c **** 					section (some will yield immediately, others wait until the
3965:FreeRTOS/tasks.c **** 					critical section exits) - but it is not something that
3966:FreeRTOS/tasks.c **** 					application code should ever do. */
3967:FreeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
 4286              		.loc 1 3967 0
 4287 007a FFF7FEFF 		bl	vPortYield
 4288              	.L303:
3968:FreeRTOS/tasks.c **** 				}
3969:FreeRTOS/tasks.c **** 				else
3970:FreeRTOS/tasks.c **** 				{
3971:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3972:FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 150


3973:FreeRTOS/tasks.c **** 			}
3974:FreeRTOS/tasks.c **** 			else
3975:FreeRTOS/tasks.c **** 			{
3976:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3977:FreeRTOS/tasks.c **** 			}
3978:FreeRTOS/tasks.c **** 		}
3979:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 4289              		.loc 1 3979 0
 4290 007e FFF7FEFF 		bl	vPortExitCritical
3980:FreeRTOS/tasks.c **** 
3981:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 4291              		.loc 1 3981 0
 4292 0082 FFF7FEFF 		bl	vPortEnterCritical
3982:FreeRTOS/tasks.c **** 		{
3983:FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_TAKE();
3984:FreeRTOS/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 4293              		.loc 1 3984 0
 4294 0086 104B     		ldr	r3, .L311
 4295 0088 1B68     		ldr	r3, [r3]
 4296 008a 9B6C     		ldr	r3, [r3, #72]
 4297 008c BB60     		str	r3, [r7, #8]
3985:FreeRTOS/tasks.c **** 
3986:FreeRTOS/tasks.c **** 			if( ulReturn != 0UL )
 4298              		.loc 1 3986 0
 4299 008e BB68     		ldr	r3, [r7, #8]
 4300 0090 002B     		cmp	r3, #0
 4301 0092 0CD0     		beq	.L307
3987:FreeRTOS/tasks.c **** 			{
3988:FreeRTOS/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 4302              		.loc 1 3988 0
 4303 0094 7B68     		ldr	r3, [r7, #4]
 4304 0096 002B     		cmp	r3, #0
 4305 0098 04D0     		beq	.L308
3989:FreeRTOS/tasks.c **** 				{
3990:FreeRTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 4306              		.loc 1 3990 0
 4307 009a 0B4B     		ldr	r3, .L311
 4308 009c 1B68     		ldr	r3, [r3]
 4309 009e 0022     		movs	r2, #0
 4310 00a0 9A64     		str	r2, [r3, #72]
 4311 00a2 04E0     		b	.L307
 4312              	.L308:
3991:FreeRTOS/tasks.c **** 				}
3992:FreeRTOS/tasks.c **** 				else
3993:FreeRTOS/tasks.c **** 				{
3994:FreeRTOS/tasks.c **** 					( pxCurrentTCB->ulNotifiedValue )--;
 4313              		.loc 1 3994 0
 4314 00a4 084B     		ldr	r3, .L311
 4315 00a6 1B68     		ldr	r3, [r3]
 4316 00a8 9A6C     		ldr	r2, [r3, #72]
 4317 00aa 013A     		subs	r2, r2, #1
 4318 00ac 9A64     		str	r2, [r3, #72]
 4319              	.L307:
3995:FreeRTOS/tasks.c **** 				}
3996:FreeRTOS/tasks.c **** 			}
3997:FreeRTOS/tasks.c **** 			else
3998:FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 151


3999:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4000:FreeRTOS/tasks.c **** 			}
4001:FreeRTOS/tasks.c **** 
4002:FreeRTOS/tasks.c **** 			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 4320              		.loc 1 4002 0
 4321 00ae 064B     		ldr	r3, .L311
 4322 00b0 1B68     		ldr	r3, [r3]
 4323 00b2 0022     		movs	r2, #0
 4324 00b4 83F84C20 		strb	r2, [r3, #76]
4003:FreeRTOS/tasks.c **** 		}
4004:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 4325              		.loc 1 4004 0
 4326 00b8 FFF7FEFF 		bl	vPortExitCritical
4005:FreeRTOS/tasks.c **** 
4006:FreeRTOS/tasks.c **** 		return ulReturn;
 4327              		.loc 1 4006 0
 4328 00bc BB68     		ldr	r3, [r7, #8]
4007:FreeRTOS/tasks.c **** 	}
 4329              		.loc 1 4007 0
 4330 00be 1846     		mov	r0, r3
 4331 00c0 1037     		adds	r7, r7, #16
 4332              		.cfi_def_cfa_offset 8
 4333 00c2 BD46     		mov	sp, r7
 4334              		.cfi_def_cfa_register 13
 4335              		@ sp needed
 4336 00c4 80BD     		pop	{r7, pc}
 4337              	.L312:
 4338 00c6 00BF     		.align	2
 4339              	.L311:
 4340 00c8 00000000 		.word	pxCurrentTCB
 4341 00cc E0000000 		.word	uxTopReadyPriority
 4342 00d0 C4000000 		.word	xSuspendedTaskList
 4343 00d4 DC000000 		.word	xTickCount
 4344              		.cfi_endproc
 4345              	.LFE107:
 4346              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 4347              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4348              		.align	2
 4349              		.global	xTaskNotifyWait
 4350              		.thumb
 4351              		.thumb_func
 4352              		.type	xTaskNotifyWait, %function
 4353              	xTaskNotifyWait:
 4354              	.LFB108:
4008:FreeRTOS/tasks.c **** 
4009:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4010:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4011:FreeRTOS/tasks.c **** 
4012:FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4013:FreeRTOS/tasks.c **** 
4014:FreeRTOS/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4015:FreeRTOS/tasks.c **** 	{
 4355              		.loc 1 4015 0
 4356              		.cfi_startproc
 4357              		@ args = 0, pretend = 0, frame = 24
 4358              		@ frame_needed = 1, uses_anonymous_args = 0
 4359 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 152


 4360              		.cfi_def_cfa_offset 8
 4361              		.cfi_offset 7, -8
 4362              		.cfi_offset 14, -4
 4363 0002 86B0     		sub	sp, sp, #24
 4364              		.cfi_def_cfa_offset 32
 4365 0004 00AF     		add	r7, sp, #0
 4366              		.cfi_def_cfa_register 7
 4367 0006 F860     		str	r0, [r7, #12]
 4368 0008 B960     		str	r1, [r7, #8]
 4369 000a 7A60     		str	r2, [r7, #4]
 4370 000c 3B60     		str	r3, [r7]
4016:FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
4017:FreeRTOS/tasks.c **** 	BaseType_t xReturn;
4018:FreeRTOS/tasks.c **** 
4019:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 4371              		.loc 1 4019 0
 4372 000e FFF7FEFF 		bl	vPortEnterCritical
4020:FreeRTOS/tasks.c **** 		{
4021:FreeRTOS/tasks.c **** 			/* Only block if a notification is not already pending. */
4022:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->eNotifyState != eNotified )
 4373              		.loc 1 4022 0
 4374 0012 364B     		ldr	r3, .L322
 4375 0014 1B68     		ldr	r3, [r3]
 4376 0016 93F84C30 		ldrb	r3, [r3, #76]
 4377 001a DBB2     		uxtb	r3, r3
 4378 001c 022B     		cmp	r3, #2
 4379 001e 39D0     		beq	.L314
4023:FreeRTOS/tasks.c **** 			{
4024:FreeRTOS/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4025:FreeRTOS/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4026:FreeRTOS/tasks.c **** 				clear the value to zero. */
4027:FreeRTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 4380              		.loc 1 4027 0
 4381 0020 324B     		ldr	r3, .L322
 4382 0022 1B68     		ldr	r3, [r3]
 4383 0024 996C     		ldr	r1, [r3, #72]
 4384 0026 FA68     		ldr	r2, [r7, #12]
 4385 0028 D243     		mvns	r2, r2
 4386 002a 0A40     		ands	r2, r2, r1
 4387 002c 9A64     		str	r2, [r3, #72]
4028:FreeRTOS/tasks.c **** 
4029:FreeRTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4030:FreeRTOS/tasks.c **** 				pxCurrentTCB->eNotifyState = eWaitingNotification;
 4388              		.loc 1 4030 0
 4389 002e 2F4B     		ldr	r3, .L322
 4390 0030 1B68     		ldr	r3, [r3]
 4391 0032 0122     		movs	r2, #1
 4392 0034 83F84C20 		strb	r2, [r3, #76]
4031:FreeRTOS/tasks.c **** 
4032:FreeRTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 4393              		.loc 1 4032 0
 4394 0038 3B68     		ldr	r3, [r7]
 4395 003a 002B     		cmp	r3, #0
 4396 003c 2AD0     		beq	.L314
4033:FreeRTOS/tasks.c **** 				{
4034:FreeRTOS/tasks.c **** 					/* The task is going to block.  First it must be removed
4035:FreeRTOS/tasks.c **** 					from the	ready list. */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 153


4036:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 4397              		.loc 1 4036 0
 4398 003e 2B4B     		ldr	r3, .L322
 4399 0040 1B68     		ldr	r3, [r3]
 4400 0042 0433     		adds	r3, r3, #4
 4401 0044 1846     		mov	r0, r3
 4402 0046 FFF7FEFF 		bl	uxListRemove
 4403 004a 0346     		mov	r3, r0
 4404 004c 002B     		cmp	r3, #0
 4405 004e 0BD1     		bne	.L315
4037:FreeRTOS/tasks.c **** 					{
4038:FreeRTOS/tasks.c **** 						/* The current task must be in a ready list, so there is
4039:FreeRTOS/tasks.c **** 						no need to check, and the port reset macro can be called
4040:FreeRTOS/tasks.c **** 						directly. */
4041:FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 4406              		.loc 1 4041 0
 4407 0050 264B     		ldr	r3, .L322
 4408 0052 1B68     		ldr	r3, [r3]
 4409 0054 DB6A     		ldr	r3, [r3, #44]
 4410 0056 0122     		movs	r2, #1
 4411 0058 02FA03F3 		lsl	r3, r2, r3
 4412 005c DA43     		mvns	r2, r3
 4413 005e 244B     		ldr	r3, .L322+4
 4414 0060 1B68     		ldr	r3, [r3]
 4415 0062 1340     		ands	r3, r3, r2
 4416 0064 224A     		ldr	r2, .L322+4
 4417 0066 1360     		str	r3, [r2]
 4418              	.L315:
4042:FreeRTOS/tasks.c **** 					}
4043:FreeRTOS/tasks.c **** 					else
4044:FreeRTOS/tasks.c **** 					{
4045:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4046:FreeRTOS/tasks.c **** 					}
4047:FreeRTOS/tasks.c **** 
4048:FreeRTOS/tasks.c **** 					#if ( INCLUDE_vTaskSuspend == 1 )
4049:FreeRTOS/tasks.c **** 					{
4050:FreeRTOS/tasks.c **** 						if( xTicksToWait == portMAX_DELAY )
 4419              		.loc 1 4050 0
 4420 0068 3B68     		ldr	r3, [r7]
 4421 006a B3F1FF3F 		cmp	r3, #-1
 4422 006e 07D1     		bne	.L316
4051:FreeRTOS/tasks.c **** 						{
4052:FreeRTOS/tasks.c **** 							/* Add the task to the suspended task list instead
4053:FreeRTOS/tasks.c **** 							of a delayed task list to ensure the task is not
4054:FreeRTOS/tasks.c **** 							woken by a timing event.  It will block
4055:FreeRTOS/tasks.c **** 							indefinitely. */
4056:FreeRTOS/tasks.c **** 							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 4423              		.loc 1 4056 0
 4424 0070 1E4B     		ldr	r3, .L322
 4425 0072 1B68     		ldr	r3, [r3]
 4426 0074 0433     		adds	r3, r3, #4
 4427 0076 1946     		mov	r1, r3
 4428 0078 1E48     		ldr	r0, .L322+8
 4429 007a FFF7FEFF 		bl	vListInsertEnd
 4430 007e 07E0     		b	.L317
 4431              	.L316:
4057:FreeRTOS/tasks.c **** 						}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 154


4058:FreeRTOS/tasks.c **** 						else
4059:FreeRTOS/tasks.c **** 						{
4060:FreeRTOS/tasks.c **** 							/* Calculate the time at which the task should be
4061:FreeRTOS/tasks.c **** 							woken if no notification events occur.  This may
4062:FreeRTOS/tasks.c **** 							overflow but this doesn't matter, the scheduler will
4063:FreeRTOS/tasks.c **** 							handle it. */
4064:FreeRTOS/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
 4432              		.loc 1 4064 0
 4433 0080 1D4B     		ldr	r3, .L322+12
 4434 0082 1A68     		ldr	r2, [r3]
 4435 0084 3B68     		ldr	r3, [r7]
 4436 0086 1344     		add	r3, r3, r2
 4437 0088 3B61     		str	r3, [r7, #16]
4065:FreeRTOS/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
 4438              		.loc 1 4065 0
 4439 008a 3869     		ldr	r0, [r7, #16]
 4440 008c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4441              	.L317:
4066:FreeRTOS/tasks.c **** 						}
4067:FreeRTOS/tasks.c **** 					}
4068:FreeRTOS/tasks.c **** 					#else /* INCLUDE_vTaskSuspend */
4069:FreeRTOS/tasks.c **** 					{
4070:FreeRTOS/tasks.c **** 							/* Calculate the time at which the task should be
4071:FreeRTOS/tasks.c **** 							woken if the event does not occur.  This may
4072:FreeRTOS/tasks.c **** 							overflow but this doesn't matter, the scheduler will
4073:FreeRTOS/tasks.c **** 							handle it. */
4074:FreeRTOS/tasks.c **** 							xTimeToWake = xTickCount + xTicksToWait;
4075:FreeRTOS/tasks.c **** 							prvAddCurrentTaskToDelayedList( xTimeToWake );
4076:FreeRTOS/tasks.c **** 					}
4077:FreeRTOS/tasks.c **** 					#endif /* INCLUDE_vTaskSuspend */
4078:FreeRTOS/tasks.c **** 
4079:FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4080:FreeRTOS/tasks.c **** 
4081:FreeRTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4082:FreeRTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4083:FreeRTOS/tasks.c **** 					critical section exits) - but it is not something that
4084:FreeRTOS/tasks.c **** 					application code should ever do. */
4085:FreeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
 4442              		.loc 1 4085 0
 4443 0090 FFF7FEFF 		bl	vPortYield
 4444              	.L314:
4086:FreeRTOS/tasks.c **** 				}
4087:FreeRTOS/tasks.c **** 				else
4088:FreeRTOS/tasks.c **** 				{
4089:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4090:FreeRTOS/tasks.c **** 				}
4091:FreeRTOS/tasks.c **** 			}
4092:FreeRTOS/tasks.c **** 			else
4093:FreeRTOS/tasks.c **** 			{
4094:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4095:FreeRTOS/tasks.c **** 			}
4096:FreeRTOS/tasks.c **** 		}
4097:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 4445              		.loc 1 4097 0
 4446 0094 FFF7FEFF 		bl	vPortExitCritical
4098:FreeRTOS/tasks.c **** 
4099:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 155


 4447              		.loc 1 4099 0
 4448 0098 FFF7FEFF 		bl	vPortEnterCritical
4100:FreeRTOS/tasks.c **** 		{
4101:FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4102:FreeRTOS/tasks.c **** 
4103:FreeRTOS/tasks.c **** 			if( pulNotificationValue != NULL )
 4449              		.loc 1 4103 0
 4450 009c 7B68     		ldr	r3, [r7, #4]
 4451 009e 002B     		cmp	r3, #0
 4452 00a0 04D0     		beq	.L318
4104:FreeRTOS/tasks.c **** 			{
4105:FreeRTOS/tasks.c **** 				/* Output the current notification value, which may or may not
4106:FreeRTOS/tasks.c **** 				have changed. */
4107:FreeRTOS/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 4453              		.loc 1 4107 0
 4454 00a2 124B     		ldr	r3, .L322
 4455 00a4 1B68     		ldr	r3, [r3]
 4456 00a6 9A6C     		ldr	r2, [r3, #72]
 4457 00a8 7B68     		ldr	r3, [r7, #4]
 4458 00aa 1A60     		str	r2, [r3]
 4459              	.L318:
4108:FreeRTOS/tasks.c **** 			}
4109:FreeRTOS/tasks.c **** 
4110:FreeRTOS/tasks.c **** 			/* If eNotifyValue is set then either the task never entered the
4111:FreeRTOS/tasks.c **** 			blocked state (because a notification was already pending) or the
4112:FreeRTOS/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4113:FreeRTOS/tasks.c **** 			unblocked because of a timeout. */
4114:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
 4460              		.loc 1 4114 0
 4461 00ac 0F4B     		ldr	r3, .L322
 4462 00ae 1B68     		ldr	r3, [r3]
 4463 00b0 93F84C30 		ldrb	r3, [r3, #76]
 4464 00b4 DBB2     		uxtb	r3, r3
 4465 00b6 012B     		cmp	r3, #1
 4466 00b8 02D1     		bne	.L319
4115:FreeRTOS/tasks.c **** 			{
4116:FreeRTOS/tasks.c **** 				/* A notification was not received. */
4117:FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
 4467              		.loc 1 4117 0
 4468 00ba 0023     		movs	r3, #0
 4469 00bc 7B61     		str	r3, [r7, #20]
 4470 00be 08E0     		b	.L320
 4471              	.L319:
4118:FreeRTOS/tasks.c **** 			}
4119:FreeRTOS/tasks.c **** 			else
4120:FreeRTOS/tasks.c **** 			{
4121:FreeRTOS/tasks.c **** 				/* A notification was already pending or a notification was
4122:FreeRTOS/tasks.c **** 				received while the task was waiting. */
4123:FreeRTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 4472              		.loc 1 4123 0
 4473 00c0 0A4B     		ldr	r3, .L322
 4474 00c2 1B68     		ldr	r3, [r3]
 4475 00c4 996C     		ldr	r1, [r3, #72]
 4476 00c6 BA68     		ldr	r2, [r7, #8]
 4477 00c8 D243     		mvns	r2, r2
 4478 00ca 0A40     		ands	r2, r2, r1
 4479 00cc 9A64     		str	r2, [r3, #72]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 156


4124:FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
 4480              		.loc 1 4124 0
 4481 00ce 0123     		movs	r3, #1
 4482 00d0 7B61     		str	r3, [r7, #20]
 4483              	.L320:
4125:FreeRTOS/tasks.c **** 			}
4126:FreeRTOS/tasks.c **** 
4127:FreeRTOS/tasks.c **** 			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 4484              		.loc 1 4127 0
 4485 00d2 064B     		ldr	r3, .L322
 4486 00d4 1B68     		ldr	r3, [r3]
 4487 00d6 0022     		movs	r2, #0
 4488 00d8 83F84C20 		strb	r2, [r3, #76]
4128:FreeRTOS/tasks.c **** 		}
4129:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 4489              		.loc 1 4129 0
 4490 00dc FFF7FEFF 		bl	vPortExitCritical
4130:FreeRTOS/tasks.c **** 
4131:FreeRTOS/tasks.c **** 		return xReturn;
 4491              		.loc 1 4131 0
 4492 00e0 7B69     		ldr	r3, [r7, #20]
4132:FreeRTOS/tasks.c **** 	}
 4493              		.loc 1 4132 0
 4494 00e2 1846     		mov	r0, r3
 4495 00e4 1837     		adds	r7, r7, #24
 4496              		.cfi_def_cfa_offset 8
 4497 00e6 BD46     		mov	sp, r7
 4498              		.cfi_def_cfa_register 13
 4499              		@ sp needed
 4500 00e8 80BD     		pop	{r7, pc}
 4501              	.L323:
 4502 00ea 00BF     		.align	2
 4503              	.L322:
 4504 00ec 00000000 		.word	pxCurrentTCB
 4505 00f0 E0000000 		.word	uxTopReadyPriority
 4506 00f4 C4000000 		.word	xSuspendedTaskList
 4507 00f8 DC000000 		.word	xTickCount
 4508              		.cfi_endproc
 4509              	.LFE108:
 4510              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 4511              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4512              		.align	2
 4513              		.global	xTaskGenericNotify
 4514              		.thumb
 4515              		.thumb_func
 4516              		.type	xTaskGenericNotify, %function
 4517              	xTaskGenericNotify:
 4518              	.LFB109:
4133:FreeRTOS/tasks.c **** 
4134:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4135:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4136:FreeRTOS/tasks.c **** 
4137:FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4138:FreeRTOS/tasks.c **** 
4139:FreeRTOS/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4140:FreeRTOS/tasks.c **** 	{
 4519              		.loc 1 4140 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 157


 4520              		.cfi_startproc
 4521              		@ args = 0, pretend = 0, frame = 32
 4522              		@ frame_needed = 1, uses_anonymous_args = 0
 4523 0000 80B5     		push	{r7, lr}
 4524              		.cfi_def_cfa_offset 8
 4525              		.cfi_offset 7, -8
 4526              		.cfi_offset 14, -4
 4527 0002 88B0     		sub	sp, sp, #32
 4528              		.cfi_def_cfa_offset 40
 4529 0004 00AF     		add	r7, sp, #0
 4530              		.cfi_def_cfa_register 7
 4531 0006 F860     		str	r0, [r7, #12]
 4532 0008 B960     		str	r1, [r7, #8]
 4533 000a 3B60     		str	r3, [r7]
 4534 000c 1346     		mov	r3, r2
 4535 000e FB71     		strb	r3, [r7, #7]
4141:FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4142:FreeRTOS/tasks.c **** 	eNotifyValue eOriginalNotifyState;
4143:FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4536              		.loc 1 4143 0
 4537 0010 0123     		movs	r3, #1
 4538 0012 FB61     		str	r3, [r7, #28]
4144:FreeRTOS/tasks.c **** 
4145:FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4146:FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4539              		.loc 1 4146 0
 4540 0014 FB68     		ldr	r3, [r7, #12]
 4541 0016 BB61     		str	r3, [r7, #24]
4147:FreeRTOS/tasks.c **** 
4148:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 4542              		.loc 1 4148 0
 4543 0018 FFF7FEFF 		bl	vPortEnterCritical
4149:FreeRTOS/tasks.c **** 		{
4150:FreeRTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 4544              		.loc 1 4150 0
 4545 001c 3B68     		ldr	r3, [r7]
 4546 001e 002B     		cmp	r3, #0
 4547 0020 03D0     		beq	.L325
4151:FreeRTOS/tasks.c **** 			{
4152:FreeRTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 4548              		.loc 1 4152 0
 4549 0022 BB69     		ldr	r3, [r7, #24]
 4550 0024 9A6C     		ldr	r2, [r3, #72]
 4551 0026 3B68     		ldr	r3, [r7]
 4552 0028 1A60     		str	r2, [r3]
 4553              	.L325:
4153:FreeRTOS/tasks.c **** 			}
4154:FreeRTOS/tasks.c **** 
4155:FreeRTOS/tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
 4554              		.loc 1 4155 0
 4555 002a BB69     		ldr	r3, [r7, #24]
 4556 002c 93F84C30 		ldrb	r3, [r3, #76]
 4557 0030 FB75     		strb	r3, [r7, #23]
4156:FreeRTOS/tasks.c **** 
4157:FreeRTOS/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 4558              		.loc 1 4157 0
 4559 0032 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 158


 4560 0034 0222     		movs	r2, #2
 4561 0036 83F84C20 		strb	r2, [r3, #76]
4158:FreeRTOS/tasks.c **** 
4159:FreeRTOS/tasks.c **** 			switch( eAction )
 4562              		.loc 1 4159 0
 4563 003a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4564 003c 042B     		cmp	r3, #4
 4565 003e 28D8     		bhi	.L326
 4566 0040 01A2     		adr	r2, .L328
 4567 0042 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4568 0046 00BF     		.p2align 2
 4569              	.L328:
 4570 0048 93000000 		.word	.L326+1
 4571 004c 5D000000 		.word	.L329+1
 4572 0050 6B000000 		.word	.L330+1
 4573 0054 77000000 		.word	.L331+1
 4574 0058 7F000000 		.word	.L332+1
 4575              		.p2align 1
 4576              	.L329:
4160:FreeRTOS/tasks.c **** 			{
4161:FreeRTOS/tasks.c **** 				case eSetBits	:
4162:FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 4577              		.loc 1 4162 0
 4578 005c BB69     		ldr	r3, [r7, #24]
 4579 005e 9A6C     		ldr	r2, [r3, #72]
 4580 0060 BB68     		ldr	r3, [r7, #8]
 4581 0062 1A43     		orrs	r2, r2, r3
 4582 0064 BB69     		ldr	r3, [r7, #24]
 4583 0066 9A64     		str	r2, [r3, #72]
4163:FreeRTOS/tasks.c **** 					break;
 4584              		.loc 1 4163 0
 4585 0068 13E0     		b	.L326
 4586              	.L330:
4164:FreeRTOS/tasks.c **** 
4165:FreeRTOS/tasks.c **** 				case eIncrement	:
4166:FreeRTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 4587              		.loc 1 4166 0
 4588 006a BB69     		ldr	r3, [r7, #24]
 4589 006c 9B6C     		ldr	r3, [r3, #72]
 4590 006e 5A1C     		adds	r2, r3, #1
 4591 0070 BB69     		ldr	r3, [r7, #24]
 4592 0072 9A64     		str	r2, [r3, #72]
4167:FreeRTOS/tasks.c **** 					break;
 4593              		.loc 1 4167 0
 4594 0074 0DE0     		b	.L326
 4595              	.L331:
4168:FreeRTOS/tasks.c **** 
4169:FreeRTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4170:FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 4596              		.loc 1 4170 0
 4597 0076 BB69     		ldr	r3, [r7, #24]
 4598 0078 BA68     		ldr	r2, [r7, #8]
 4599 007a 9A64     		str	r2, [r3, #72]
4171:FreeRTOS/tasks.c **** 					break;
 4600              		.loc 1 4171 0
 4601 007c 09E0     		b	.L326
 4602              	.L332:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 159


4172:FreeRTOS/tasks.c **** 
4173:FreeRTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4174:FreeRTOS/tasks.c **** 					if( eOriginalNotifyState != eNotified )
 4603              		.loc 1 4174 0
 4604 007e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4605 0080 022B     		cmp	r3, #2
 4606 0082 03D0     		beq	.L333
4175:FreeRTOS/tasks.c **** 					{
4176:FreeRTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 4607              		.loc 1 4176 0
 4608 0084 BB69     		ldr	r3, [r7, #24]
 4609 0086 BA68     		ldr	r2, [r7, #8]
 4610 0088 9A64     		str	r2, [r3, #72]
4177:FreeRTOS/tasks.c **** 					}
4178:FreeRTOS/tasks.c **** 					else
4179:FreeRTOS/tasks.c **** 					{
4180:FreeRTOS/tasks.c **** 						/* The value could not be written to the task. */
4181:FreeRTOS/tasks.c **** 						xReturn = pdFAIL;
4182:FreeRTOS/tasks.c **** 					}
4183:FreeRTOS/tasks.c **** 					break;
 4611              		.loc 1 4183 0
 4612 008a 01E0     		b	.L337
 4613              	.L333:
4181:FreeRTOS/tasks.c **** 					}
 4614              		.loc 1 4181 0
 4615 008c 0023     		movs	r3, #0
 4616 008e FB61     		str	r3, [r7, #28]
 4617              	.L337:
 4618              		.loc 1 4183 0
 4619 0090 00BF     		nop
 4620              	.L326:
4184:FreeRTOS/tasks.c **** 
4185:FreeRTOS/tasks.c **** 				case eNoAction:
4186:FreeRTOS/tasks.c **** 					/* The task is being notified without its notify value being
4187:FreeRTOS/tasks.c **** 					updated. */
4188:FreeRTOS/tasks.c **** 					break;
4189:FreeRTOS/tasks.c **** 			}
4190:FreeRTOS/tasks.c **** 
4191:FreeRTOS/tasks.c **** 			traceTASK_NOTIFY();
4192:FreeRTOS/tasks.c **** 
4193:FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4194:FreeRTOS/tasks.c **** 			notification then unblock it now. */
4195:FreeRTOS/tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 4621              		.loc 1 4195 0
 4622 0092 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4623 0094 012B     		cmp	r3, #1
 4624 0096 24D1     		bne	.L335
4196:FreeRTOS/tasks.c **** 			{
4197:FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 4625              		.loc 1 4197 0
 4626 0098 BB69     		ldr	r3, [r7, #24]
 4627 009a 0433     		adds	r3, r3, #4
 4628 009c 1846     		mov	r0, r3
 4629 009e FFF7FEFF 		bl	uxListRemove
4198:FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4630              		.loc 1 4198 0
 4631 00a2 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 160


 4632 00a4 DB6A     		ldr	r3, [r3, #44]
 4633 00a6 0122     		movs	r2, #1
 4634 00a8 9A40     		lsls	r2, r2, r3
 4635 00aa 114B     		ldr	r3, .L338
 4636 00ac 1B68     		ldr	r3, [r3]
 4637 00ae 1343     		orrs	r3, r3, r2
 4638 00b0 0F4A     		ldr	r2, .L338
 4639 00b2 1360     		str	r3, [r2]
 4640 00b4 BB69     		ldr	r3, [r7, #24]
 4641 00b6 DA6A     		ldr	r2, [r3, #44]
 4642 00b8 1346     		mov	r3, r2
 4643 00ba 9B00     		lsls	r3, r3, #2
 4644 00bc 1344     		add	r3, r3, r2
 4645 00be 9B00     		lsls	r3, r3, #2
 4646 00c0 0C4A     		ldr	r2, .L338+4
 4647 00c2 1A44     		add	r2, r2, r3
 4648 00c4 BB69     		ldr	r3, [r7, #24]
 4649 00c6 0433     		adds	r3, r3, #4
 4650 00c8 1946     		mov	r1, r3
 4651 00ca 1046     		mov	r0, r2
 4652 00cc FFF7FEFF 		bl	vListInsertEnd
4199:FreeRTOS/tasks.c **** 
4200:FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4201:FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4202:FreeRTOS/tasks.c **** 
4203:FreeRTOS/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4204:FreeRTOS/tasks.c **** 				{
4205:FreeRTOS/tasks.c **** 					/* If a task is blocked waiting for a notification then
4206:FreeRTOS/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4207:FreeRTOS/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4208:FreeRTOS/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4209:FreeRTOS/tasks.c **** 					because it will automatically get reset to a new value when
4210:FreeRTOS/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4211:FreeRTOS/tasks.c **** 					tickless idling is used it might be more important to enter
4212:FreeRTOS/tasks.c **** 					sleep mode at the earliest possible time - so reset
4213:FreeRTOS/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4214:FreeRTOS/tasks.c **** 					earliest possible time. */
4215:FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
4216:FreeRTOS/tasks.c **** 				}
4217:FreeRTOS/tasks.c **** 				#endif
4218:FreeRTOS/tasks.c **** 
4219:FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 4653              		.loc 1 4219 0
 4654 00d0 BB69     		ldr	r3, [r7, #24]
 4655 00d2 DA6A     		ldr	r2, [r3, #44]
 4656 00d4 084B     		ldr	r3, .L338+8
 4657 00d6 1B68     		ldr	r3, [r3]
 4658 00d8 DB6A     		ldr	r3, [r3, #44]
 4659 00da 9A42     		cmp	r2, r3
 4660 00dc 01D9     		bls	.L335
4220:FreeRTOS/tasks.c **** 				{
4221:FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4222:FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4223:FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 4661              		.loc 1 4223 0
 4662 00de FFF7FEFF 		bl	vPortYield
 4663              	.L335:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 161


4224:FreeRTOS/tasks.c **** 				}
4225:FreeRTOS/tasks.c **** 				else
4226:FreeRTOS/tasks.c **** 				{
4227:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4228:FreeRTOS/tasks.c **** 				}
4229:FreeRTOS/tasks.c **** 			}
4230:FreeRTOS/tasks.c **** 			else
4231:FreeRTOS/tasks.c **** 			{
4232:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4233:FreeRTOS/tasks.c **** 			}
4234:FreeRTOS/tasks.c **** 		}
4235:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 4664              		.loc 1 4235 0
 4665 00e2 FFF7FEFF 		bl	vPortExitCritical
4236:FreeRTOS/tasks.c **** 
4237:FreeRTOS/tasks.c **** 		return xReturn;
 4666              		.loc 1 4237 0
 4667 00e6 FB69     		ldr	r3, [r7, #28]
4238:FreeRTOS/tasks.c **** 	}
 4668              		.loc 1 4238 0
 4669 00e8 1846     		mov	r0, r3
 4670 00ea 2037     		adds	r7, r7, #32
 4671              		.cfi_def_cfa_offset 8
 4672 00ec BD46     		mov	sp, r7
 4673              		.cfi_def_cfa_register 13
 4674              		@ sp needed
 4675 00ee 80BD     		pop	{r7, pc}
 4676              	.L339:
 4677              		.align	2
 4678              	.L338:
 4679 00f0 E0000000 		.word	uxTopReadyPriority
 4680 00f4 04000000 		.word	pxReadyTasksLists
 4681 00f8 00000000 		.word	pxCurrentTCB
 4682              		.cfi_endproc
 4683              	.LFE109:
 4684              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 4685              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4686              		.align	2
 4687              		.global	xTaskGenericNotifyFromISR
 4688              		.thumb
 4689              		.thumb_func
 4690              		.type	xTaskGenericNotifyFromISR, %function
 4691              	xTaskGenericNotifyFromISR:
 4692              	.LFB110:
4239:FreeRTOS/tasks.c **** 
4240:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4241:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4242:FreeRTOS/tasks.c **** 
4243:FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4244:FreeRTOS/tasks.c **** 
4245:FreeRTOS/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4246:FreeRTOS/tasks.c **** 	{
 4693              		.loc 1 4246 0
 4694              		.cfi_startproc
 4695              		@ args = 4, pretend = 0, frame = 32
 4696              		@ frame_needed = 1, uses_anonymous_args = 0
 4697 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 162


 4698              		.cfi_def_cfa_offset 8
 4699              		.cfi_offset 7, -8
 4700              		.cfi_offset 14, -4
 4701 0002 88B0     		sub	sp, sp, #32
 4702              		.cfi_def_cfa_offset 40
 4703 0004 00AF     		add	r7, sp, #0
 4704              		.cfi_def_cfa_register 7
 4705 0006 F860     		str	r0, [r7, #12]
 4706 0008 B960     		str	r1, [r7, #8]
 4707 000a 3B60     		str	r3, [r7]
 4708 000c 1346     		mov	r3, r2
 4709 000e FB71     		strb	r3, [r7, #7]
4247:FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4248:FreeRTOS/tasks.c **** 	eNotifyValue eOriginalNotifyState;
4249:FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4710              		.loc 1 4249 0
 4711 0010 0123     		movs	r3, #1
 4712 0012 FB61     		str	r3, [r7, #28]
4250:FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4251:FreeRTOS/tasks.c **** 
4252:FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4253:FreeRTOS/tasks.c **** 
4254:FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4255:FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4256:FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4257:FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4258:FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4259:FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4260:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4261:FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4262:FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4263:FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4264:FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4265:FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4266:FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4267:FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4268:FreeRTOS/tasks.c **** 		provided on the following link:
4269:FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4270:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4271:FreeRTOS/tasks.c **** 
4272:FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4713              		.loc 1 4272 0
 4714 0014 FB68     		ldr	r3, [r7, #12]
 4715 0016 BB61     		str	r3, [r7, #24]
4273:FreeRTOS/tasks.c **** 
4274:FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 4716              		.loc 1 4274 0
 4717 0018 FFF7FEFF 		bl	ulPortSetInterruptMask
 4718 001c 7861     		str	r0, [r7, #20]
4275:FreeRTOS/tasks.c **** 		{
4276:FreeRTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 4719              		.loc 1 4276 0
 4720 001e 3B68     		ldr	r3, [r7]
 4721 0020 002B     		cmp	r3, #0
 4722 0022 03D0     		beq	.L341
4277:FreeRTOS/tasks.c **** 			{
4278:FreeRTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 163


 4723              		.loc 1 4278 0
 4724 0024 BB69     		ldr	r3, [r7, #24]
 4725 0026 9A6C     		ldr	r2, [r3, #72]
 4726 0028 3B68     		ldr	r3, [r7]
 4727 002a 1A60     		str	r2, [r3]
 4728              	.L341:
4279:FreeRTOS/tasks.c **** 			}
4280:FreeRTOS/tasks.c **** 
4281:FreeRTOS/tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
 4729              		.loc 1 4281 0
 4730 002c BB69     		ldr	r3, [r7, #24]
 4731 002e 93F84C30 		ldrb	r3, [r3, #76]
 4732 0032 FB74     		strb	r3, [r7, #19]
4282:FreeRTOS/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 4733              		.loc 1 4282 0
 4734 0034 BB69     		ldr	r3, [r7, #24]
 4735 0036 0222     		movs	r2, #2
 4736 0038 83F84C20 		strb	r2, [r3, #76]
4283:FreeRTOS/tasks.c **** 
4284:FreeRTOS/tasks.c **** 			switch( eAction )
 4737              		.loc 1 4284 0
 4738 003c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4739 003e 042B     		cmp	r3, #4
 4740 0040 27D8     		bhi	.L342
 4741 0042 01A2     		adr	r2, .L344
 4742 0044 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4743              		.p2align 2
 4744              	.L344:
 4745 0048 93000000 		.word	.L342+1
 4746 004c 5D000000 		.word	.L345+1
 4747 0050 6B000000 		.word	.L346+1
 4748 0054 77000000 		.word	.L347+1
 4749 0058 7F000000 		.word	.L348+1
 4750              		.p2align 1
 4751              	.L345:
4285:FreeRTOS/tasks.c **** 			{
4286:FreeRTOS/tasks.c **** 				case eSetBits	:
4287:FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 4752              		.loc 1 4287 0
 4753 005c BB69     		ldr	r3, [r7, #24]
 4754 005e 9A6C     		ldr	r2, [r3, #72]
 4755 0060 BB68     		ldr	r3, [r7, #8]
 4756 0062 1A43     		orrs	r2, r2, r3
 4757 0064 BB69     		ldr	r3, [r7, #24]
 4758 0066 9A64     		str	r2, [r3, #72]
4288:FreeRTOS/tasks.c **** 					break;
 4759              		.loc 1 4288 0
 4760 0068 13E0     		b	.L342
 4761              	.L346:
4289:FreeRTOS/tasks.c **** 
4290:FreeRTOS/tasks.c **** 				case eIncrement	:
4291:FreeRTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 4762              		.loc 1 4291 0
 4763 006a BB69     		ldr	r3, [r7, #24]
 4764 006c 9B6C     		ldr	r3, [r3, #72]
 4765 006e 5A1C     		adds	r2, r3, #1
 4766 0070 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 164


 4767 0072 9A64     		str	r2, [r3, #72]
4292:FreeRTOS/tasks.c **** 					break;
 4768              		.loc 1 4292 0
 4769 0074 0DE0     		b	.L342
 4770              	.L347:
4293:FreeRTOS/tasks.c **** 
4294:FreeRTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4295:FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 4771              		.loc 1 4295 0
 4772 0076 BB69     		ldr	r3, [r7, #24]
 4773 0078 BA68     		ldr	r2, [r7, #8]
 4774 007a 9A64     		str	r2, [r3, #72]
4296:FreeRTOS/tasks.c **** 					break;
 4775              		.loc 1 4296 0
 4776 007c 09E0     		b	.L342
 4777              	.L348:
4297:FreeRTOS/tasks.c **** 
4298:FreeRTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4299:FreeRTOS/tasks.c **** 					if( eOriginalNotifyState != eNotified )
 4778              		.loc 1 4299 0
 4779 007e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 4780 0080 022B     		cmp	r3, #2
 4781 0082 03D0     		beq	.L349
4300:FreeRTOS/tasks.c **** 					{
4301:FreeRTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 4782              		.loc 1 4301 0
 4783 0084 BB69     		ldr	r3, [r7, #24]
 4784 0086 BA68     		ldr	r2, [r7, #8]
 4785 0088 9A64     		str	r2, [r3, #72]
4302:FreeRTOS/tasks.c **** 					}
4303:FreeRTOS/tasks.c **** 					else
4304:FreeRTOS/tasks.c **** 					{
4305:FreeRTOS/tasks.c **** 						/* The value could not be written to the task. */
4306:FreeRTOS/tasks.c **** 						xReturn = pdFAIL;
4307:FreeRTOS/tasks.c **** 					}
4308:FreeRTOS/tasks.c **** 					break;
 4786              		.loc 1 4308 0
 4787 008a 01E0     		b	.L356
 4788              	.L349:
4306:FreeRTOS/tasks.c **** 					}
 4789              		.loc 1 4306 0
 4790 008c 0023     		movs	r3, #0
 4791 008e FB61     		str	r3, [r7, #28]
 4792              	.L356:
 4793              		.loc 1 4308 0
 4794 0090 00BF     		nop
 4795              	.L342:
4309:FreeRTOS/tasks.c **** 
4310:FreeRTOS/tasks.c **** 				case eNoAction :
4311:FreeRTOS/tasks.c **** 					/* The task is being notified without its notify value being
4312:FreeRTOS/tasks.c **** 					updated. */
4313:FreeRTOS/tasks.c **** 					break;
4314:FreeRTOS/tasks.c **** 			}
4315:FreeRTOS/tasks.c **** 
4316:FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4317:FreeRTOS/tasks.c **** 
4318:FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 165


4319:FreeRTOS/tasks.c **** 			notification then unblock it now. */
4320:FreeRTOS/tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 4796              		.loc 1 4320 0
 4797 0092 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 4798 0094 012B     		cmp	r3, #1
 4799 0096 33D1     		bne	.L351
4321:FreeRTOS/tasks.c **** 			{
4322:FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4323:FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4324:FreeRTOS/tasks.c **** 
4325:FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4800              		.loc 1 4325 0
 4801 0098 1D4B     		ldr	r3, .L357
 4802 009a 1B68     		ldr	r3, [r3]
 4803 009c 002B     		cmp	r3, #0
 4804 009e 1CD1     		bne	.L352
4326:FreeRTOS/tasks.c **** 				{
4327:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 4805              		.loc 1 4327 0
 4806 00a0 BB69     		ldr	r3, [r7, #24]
 4807 00a2 0433     		adds	r3, r3, #4
 4808 00a4 1846     		mov	r0, r3
 4809 00a6 FFF7FEFF 		bl	uxListRemove
4328:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4810              		.loc 1 4328 0
 4811 00aa BB69     		ldr	r3, [r7, #24]
 4812 00ac DB6A     		ldr	r3, [r3, #44]
 4813 00ae 0122     		movs	r2, #1
 4814 00b0 9A40     		lsls	r2, r2, r3
 4815 00b2 184B     		ldr	r3, .L357+4
 4816 00b4 1B68     		ldr	r3, [r3]
 4817 00b6 1343     		orrs	r3, r3, r2
 4818 00b8 164A     		ldr	r2, .L357+4
 4819 00ba 1360     		str	r3, [r2]
 4820 00bc BB69     		ldr	r3, [r7, #24]
 4821 00be DA6A     		ldr	r2, [r3, #44]
 4822 00c0 1346     		mov	r3, r2
 4823 00c2 9B00     		lsls	r3, r3, #2
 4824 00c4 1344     		add	r3, r3, r2
 4825 00c6 9B00     		lsls	r3, r3, #2
 4826 00c8 134A     		ldr	r2, .L357+8
 4827 00ca 1A44     		add	r2, r2, r3
 4828 00cc BB69     		ldr	r3, [r7, #24]
 4829 00ce 0433     		adds	r3, r3, #4
 4830 00d0 1946     		mov	r1, r3
 4831 00d2 1046     		mov	r0, r2
 4832 00d4 FFF7FEFF 		bl	vListInsertEnd
 4833 00d8 05E0     		b	.L353
 4834              	.L352:
4329:FreeRTOS/tasks.c **** 				}
4330:FreeRTOS/tasks.c **** 				else
4331:FreeRTOS/tasks.c **** 				{
4332:FreeRTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4333:FreeRTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4334:FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 4835              		.loc 1 4334 0
 4836 00da BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 166


 4837 00dc 1833     		adds	r3, r3, #24
 4838 00de 1946     		mov	r1, r3
 4839 00e0 0E48     		ldr	r0, .L357+12
 4840 00e2 FFF7FEFF 		bl	vListInsertEnd
 4841              	.L353:
4335:FreeRTOS/tasks.c **** 				}
4336:FreeRTOS/tasks.c **** 
4337:FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 4842              		.loc 1 4337 0
 4843 00e6 BB69     		ldr	r3, [r7, #24]
 4844 00e8 DA6A     		ldr	r2, [r3, #44]
 4845 00ea 0D4B     		ldr	r3, .L357+16
 4846 00ec 1B68     		ldr	r3, [r3]
 4847 00ee DB6A     		ldr	r3, [r3, #44]
 4848 00f0 9A42     		cmp	r2, r3
 4849 00f2 05D9     		bls	.L351
4338:FreeRTOS/tasks.c **** 				{
4339:FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4340:FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4341:FreeRTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 4850              		.loc 1 4341 0
 4851 00f4 BB6A     		ldr	r3, [r7, #40]
 4852 00f6 002B     		cmp	r3, #0
 4853 00f8 02D0     		beq	.L351
4342:FreeRTOS/tasks.c **** 					{
4343:FreeRTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 4854              		.loc 1 4343 0
 4855 00fa BB6A     		ldr	r3, [r7, #40]
 4856 00fc 0122     		movs	r2, #1
 4857 00fe 1A60     		str	r2, [r3]
 4858              	.L351:
4344:FreeRTOS/tasks.c **** 					}
4345:FreeRTOS/tasks.c **** 				}
4346:FreeRTOS/tasks.c **** 				else
4347:FreeRTOS/tasks.c **** 				{
4348:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4349:FreeRTOS/tasks.c **** 				}
4350:FreeRTOS/tasks.c **** 			}
4351:FreeRTOS/tasks.c **** 		}
4352:FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 4859              		.loc 1 4352 0
 4860 0100 7869     		ldr	r0, [r7, #20]
 4861 0102 FFF7FEFF 		bl	vPortClearInterruptMask
4353:FreeRTOS/tasks.c **** 
4354:FreeRTOS/tasks.c **** 		return xReturn;
 4862              		.loc 1 4354 0
 4863 0106 FB69     		ldr	r3, [r7, #28]
4355:FreeRTOS/tasks.c **** 	}
 4864              		.loc 1 4355 0
 4865 0108 1846     		mov	r0, r3
 4866 010a 2037     		adds	r7, r7, #32
 4867              		.cfi_def_cfa_offset 8
 4868 010c BD46     		mov	sp, r7
 4869              		.cfi_def_cfa_register 13
 4870              		@ sp needed
 4871 010e 80BD     		pop	{r7, pc}
 4872              	.L358:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 167


 4873              		.align	2
 4874              	.L357:
 4875 0110 FC000000 		.word	uxSchedulerSuspended
 4876 0114 E0000000 		.word	uxTopReadyPriority
 4877 0118 04000000 		.word	pxReadyTasksLists
 4878 011c 98000000 		.word	xPendingReadyList
 4879 0120 00000000 		.word	pxCurrentTCB
 4880              		.cfi_endproc
 4881              	.LFE110:
 4882              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 4883              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4884              		.align	2
 4885              		.global	vTaskNotifyGiveFromISR
 4886              		.thumb
 4887              		.thumb_func
 4888              		.type	vTaskNotifyGiveFromISR, %function
 4889              	vTaskNotifyGiveFromISR:
 4890              	.LFB111:
4356:FreeRTOS/tasks.c **** 
4357:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4358:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4359:FreeRTOS/tasks.c **** 
4360:FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4361:FreeRTOS/tasks.c **** 
4362:FreeRTOS/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4363:FreeRTOS/tasks.c **** 	{
 4891              		.loc 1 4363 0
 4892              		.cfi_startproc
 4893              		@ args = 0, pretend = 0, frame = 24
 4894              		@ frame_needed = 1, uses_anonymous_args = 0
 4895 0000 80B5     		push	{r7, lr}
 4896              		.cfi_def_cfa_offset 8
 4897              		.cfi_offset 7, -8
 4898              		.cfi_offset 14, -4
 4899 0002 86B0     		sub	sp, sp, #24
 4900              		.cfi_def_cfa_offset 32
 4901 0004 00AF     		add	r7, sp, #0
 4902              		.cfi_def_cfa_register 7
 4903 0006 7860     		str	r0, [r7, #4]
 4904 0008 3960     		str	r1, [r7]
4364:FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4365:FreeRTOS/tasks.c **** 	eNotifyValue eOriginalNotifyState;
4366:FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4367:FreeRTOS/tasks.c **** 
4368:FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4369:FreeRTOS/tasks.c **** 
4370:FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4371:FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4372:FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4373:FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4374:FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4375:FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4376:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4377:FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4378:FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4379:FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4380:FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 168


4381:FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4382:FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4383:FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4384:FreeRTOS/tasks.c **** 		provided on the following link:
4385:FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4386:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4387:FreeRTOS/tasks.c **** 
4388:FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4905              		.loc 1 4388 0
 4906 000a 7B68     		ldr	r3, [r7, #4]
 4907 000c 7B61     		str	r3, [r7, #20]
4389:FreeRTOS/tasks.c **** 
4390:FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 4908              		.loc 1 4390 0
 4909 000e FFF7FEFF 		bl	ulPortSetInterruptMask
 4910 0012 3861     		str	r0, [r7, #16]
4391:FreeRTOS/tasks.c **** 		{
4392:FreeRTOS/tasks.c **** 			eOriginalNotifyState = pxTCB->eNotifyState;
 4911              		.loc 1 4392 0
 4912 0014 7B69     		ldr	r3, [r7, #20]
 4913 0016 93F84C30 		ldrb	r3, [r3, #76]
 4914 001a FB73     		strb	r3, [r7, #15]
4393:FreeRTOS/tasks.c **** 			pxTCB->eNotifyState = eNotified;
 4915              		.loc 1 4393 0
 4916 001c 7B69     		ldr	r3, [r7, #20]
 4917 001e 0222     		movs	r2, #2
 4918 0020 83F84C20 		strb	r2, [r3, #76]
4394:FreeRTOS/tasks.c **** 
4395:FreeRTOS/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4396:FreeRTOS/tasks.c **** 			semaphore. */
4397:FreeRTOS/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 4919              		.loc 1 4397 0
 4920 0024 7B69     		ldr	r3, [r7, #20]
 4921 0026 9B6C     		ldr	r3, [r3, #72]
 4922 0028 5A1C     		adds	r2, r3, #1
 4923 002a 7B69     		ldr	r3, [r7, #20]
 4924 002c 9A64     		str	r2, [r3, #72]
4398:FreeRTOS/tasks.c **** 
4399:FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4400:FreeRTOS/tasks.c **** 
4401:FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4402:FreeRTOS/tasks.c **** 			notification then unblock it now. */
4403:FreeRTOS/tasks.c **** 			if( eOriginalNotifyState == eWaitingNotification )
 4925              		.loc 1 4403 0
 4926 002e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4927 0030 012B     		cmp	r3, #1
 4928 0032 33D1     		bne	.L360
4404:FreeRTOS/tasks.c **** 			{
4405:FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4406:FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4407:FreeRTOS/tasks.c **** 
4408:FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4929              		.loc 1 4408 0
 4930 0034 1D4B     		ldr	r3, .L364
 4931 0036 1B68     		ldr	r3, [r3]
 4932 0038 002B     		cmp	r3, #0
 4933 003a 1CD1     		bne	.L361
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 169


4409:FreeRTOS/tasks.c **** 				{
4410:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 4934              		.loc 1 4410 0
 4935 003c 7B69     		ldr	r3, [r7, #20]
 4936 003e 0433     		adds	r3, r3, #4
 4937 0040 1846     		mov	r0, r3
 4938 0042 FFF7FEFF 		bl	uxListRemove
4411:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4939              		.loc 1 4411 0
 4940 0046 7B69     		ldr	r3, [r7, #20]
 4941 0048 DB6A     		ldr	r3, [r3, #44]
 4942 004a 0122     		movs	r2, #1
 4943 004c 9A40     		lsls	r2, r2, r3
 4944 004e 184B     		ldr	r3, .L364+4
 4945 0050 1B68     		ldr	r3, [r3]
 4946 0052 1343     		orrs	r3, r3, r2
 4947 0054 164A     		ldr	r2, .L364+4
 4948 0056 1360     		str	r3, [r2]
 4949 0058 7B69     		ldr	r3, [r7, #20]
 4950 005a DA6A     		ldr	r2, [r3, #44]
 4951 005c 1346     		mov	r3, r2
 4952 005e 9B00     		lsls	r3, r3, #2
 4953 0060 1344     		add	r3, r3, r2
 4954 0062 9B00     		lsls	r3, r3, #2
 4955 0064 134A     		ldr	r2, .L364+8
 4956 0066 1A44     		add	r2, r2, r3
 4957 0068 7B69     		ldr	r3, [r7, #20]
 4958 006a 0433     		adds	r3, r3, #4
 4959 006c 1946     		mov	r1, r3
 4960 006e 1046     		mov	r0, r2
 4961 0070 FFF7FEFF 		bl	vListInsertEnd
 4962 0074 05E0     		b	.L362
 4963              	.L361:
4412:FreeRTOS/tasks.c **** 				}
4413:FreeRTOS/tasks.c **** 				else
4414:FreeRTOS/tasks.c **** 				{
4415:FreeRTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4416:FreeRTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4417:FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 4964              		.loc 1 4417 0
 4965 0076 7B69     		ldr	r3, [r7, #20]
 4966 0078 1833     		adds	r3, r3, #24
 4967 007a 1946     		mov	r1, r3
 4968 007c 0E48     		ldr	r0, .L364+12
 4969 007e FFF7FEFF 		bl	vListInsertEnd
 4970              	.L362:
4418:FreeRTOS/tasks.c **** 				}
4419:FreeRTOS/tasks.c **** 
4420:FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 4971              		.loc 1 4420 0
 4972 0082 7B69     		ldr	r3, [r7, #20]
 4973 0084 DA6A     		ldr	r2, [r3, #44]
 4974 0086 0D4B     		ldr	r3, .L364+16
 4975 0088 1B68     		ldr	r3, [r3]
 4976 008a DB6A     		ldr	r3, [r3, #44]
 4977 008c 9A42     		cmp	r2, r3
 4978 008e 05D9     		bls	.L360
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 170


4421:FreeRTOS/tasks.c **** 				{
4422:FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4423:FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4424:FreeRTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 4979              		.loc 1 4424 0
 4980 0090 3B68     		ldr	r3, [r7]
 4981 0092 002B     		cmp	r3, #0
 4982 0094 02D0     		beq	.L360
4425:FreeRTOS/tasks.c **** 					{
4426:FreeRTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 4983              		.loc 1 4426 0
 4984 0096 3B68     		ldr	r3, [r7]
 4985 0098 0122     		movs	r2, #1
 4986 009a 1A60     		str	r2, [r3]
 4987              	.L360:
4427:FreeRTOS/tasks.c **** 					}
4428:FreeRTOS/tasks.c **** 				}
4429:FreeRTOS/tasks.c **** 				else
4430:FreeRTOS/tasks.c **** 				{
4431:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:FreeRTOS/tasks.c **** 				}
4433:FreeRTOS/tasks.c **** 			}
4434:FreeRTOS/tasks.c **** 		}
4435:FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 4988              		.loc 1 4435 0
 4989 009c 3869     		ldr	r0, [r7, #16]
 4990 009e FFF7FEFF 		bl	vPortClearInterruptMask
4436:FreeRTOS/tasks.c **** 	}
 4991              		.loc 1 4436 0
 4992 00a2 00BF     		nop
 4993 00a4 1837     		adds	r7, r7, #24
 4994              		.cfi_def_cfa_offset 8
 4995 00a6 BD46     		mov	sp, r7
 4996              		.cfi_def_cfa_register 13
 4997              		@ sp needed
 4998 00a8 80BD     		pop	{r7, pc}
 4999              	.L365:
 5000 00aa 00BF     		.align	2
 5001              	.L364:
 5002 00ac FC000000 		.word	uxSchedulerSuspended
 5003 00b0 E0000000 		.word	uxTopReadyPriority
 5004 00b4 04000000 		.word	pxReadyTasksLists
 5005 00b8 98000000 		.word	xPendingReadyList
 5006 00bc 00000000 		.word	pxCurrentTCB
 5007              		.cfi_endproc
 5008              	.LFE111:
 5009              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 5010              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5011              		.align	2
 5012              		.global	xTaskNotifyStateClear
 5013              		.thumb
 5014              		.thumb_func
 5015              		.type	xTaskNotifyStateClear, %function
 5016              	xTaskNotifyStateClear:
 5017              	.LFB112:
4437:FreeRTOS/tasks.c **** 
4438:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 171


4439:FreeRTOS/tasks.c **** 
4440:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4441:FreeRTOS/tasks.c **** 
4442:FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4443:FreeRTOS/tasks.c **** 
4444:FreeRTOS/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4445:FreeRTOS/tasks.c **** 	{
 5018              		.loc 1 4445 0
 5019              		.cfi_startproc
 5020              		@ args = 0, pretend = 0, frame = 16
 5021              		@ frame_needed = 1, uses_anonymous_args = 0
 5022 0000 80B5     		push	{r7, lr}
 5023              		.cfi_def_cfa_offset 8
 5024              		.cfi_offset 7, -8
 5025              		.cfi_offset 14, -4
 5026 0002 84B0     		sub	sp, sp, #16
 5027              		.cfi_def_cfa_offset 24
 5028 0004 00AF     		add	r7, sp, #0
 5029              		.cfi_def_cfa_register 7
 5030 0006 7860     		str	r0, [r7, #4]
4446:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
4447:FreeRTOS/tasks.c **** 	BaseType_t xReturn;
4448:FreeRTOS/tasks.c **** 
4449:FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTask;
 5031              		.loc 1 4449 0
 5032 0008 7B68     		ldr	r3, [r7, #4]
 5033 000a BB60     		str	r3, [r7, #8]
4450:FreeRTOS/tasks.c **** 
4451:FreeRTOS/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4452:FreeRTOS/tasks.c **** 		its notification state cleared. */
4453:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( pxTCB );
 5034              		.loc 1 4453 0
 5035 000c BB68     		ldr	r3, [r7, #8]
 5036 000e 002B     		cmp	r3, #0
 5037 0010 02D1     		bne	.L367
 5038              		.loc 1 4453 0 is_stmt 0 discriminator 1
 5039 0012 0E4B     		ldr	r3, .L372
 5040 0014 1B68     		ldr	r3, [r3]
 5041 0016 00E0     		b	.L368
 5042              	.L367:
 5043              		.loc 1 4453 0 discriminator 2
 5044 0018 BB68     		ldr	r3, [r7, #8]
 5045              	.L368:
 5046              		.loc 1 4453 0 discriminator 4
 5047 001a BB60     		str	r3, [r7, #8]
4454:FreeRTOS/tasks.c **** 
4455:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 5048              		.loc 1 4455 0 is_stmt 1 discriminator 4
 5049 001c FFF7FEFF 		bl	vPortEnterCritical
4456:FreeRTOS/tasks.c **** 		{
4457:FreeRTOS/tasks.c **** 			if( pxTCB->eNotifyState == eNotified )
 5050              		.loc 1 4457 0 discriminator 4
 5051 0020 BB68     		ldr	r3, [r7, #8]
 5052 0022 93F84C30 		ldrb	r3, [r3, #76]
 5053 0026 DBB2     		uxtb	r3, r3
 5054 0028 022B     		cmp	r3, #2
 5055 002a 06D1     		bne	.L369
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 172


4458:FreeRTOS/tasks.c **** 			{
4459:FreeRTOS/tasks.c **** 				pxTCB->eNotifyState = eNotWaitingNotification;
 5056              		.loc 1 4459 0
 5057 002c BB68     		ldr	r3, [r7, #8]
 5058 002e 0022     		movs	r2, #0
 5059 0030 83F84C20 		strb	r2, [r3, #76]
4460:FreeRTOS/tasks.c **** 				xReturn = pdPASS;
 5060              		.loc 1 4460 0
 5061 0034 0123     		movs	r3, #1
 5062 0036 FB60     		str	r3, [r7, #12]
 5063 0038 01E0     		b	.L370
 5064              	.L369:
4461:FreeRTOS/tasks.c **** 			}
4462:FreeRTOS/tasks.c **** 			else
4463:FreeRTOS/tasks.c **** 			{
4464:FreeRTOS/tasks.c **** 				xReturn = pdFAIL;
 5065              		.loc 1 4464 0
 5066 003a 0023     		movs	r3, #0
 5067 003c FB60     		str	r3, [r7, #12]
 5068              	.L370:
4465:FreeRTOS/tasks.c **** 			}
4466:FreeRTOS/tasks.c **** 		}
4467:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 5069              		.loc 1 4467 0
 5070 003e FFF7FEFF 		bl	vPortExitCritical
4468:FreeRTOS/tasks.c **** 
4469:FreeRTOS/tasks.c **** 		return xReturn;
 5071              		.loc 1 4469 0
 5072 0042 FB68     		ldr	r3, [r7, #12]
4470:FreeRTOS/tasks.c **** 	}
 5073              		.loc 1 4470 0
 5074 0044 1846     		mov	r0, r3
 5075 0046 1037     		adds	r7, r7, #16
 5076              		.cfi_def_cfa_offset 8
 5077 0048 BD46     		mov	sp, r7
 5078              		.cfi_def_cfa_register 13
 5079              		@ sp needed
 5080 004a 80BD     		pop	{r7, pc}
 5081              	.L373:
 5082              		.align	2
 5083              	.L372:
 5084 004c 00000000 		.word	pxCurrentTCB
 5085              		.cfi_endproc
 5086              	.LFE112:
 5087              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 5088              		.text
 5089              	.Letext0:
 5090              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 5091              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 5092              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 5093              		.file 6 "FreeRTOS\\projdefs.h"
 5094              		.file 7 "FreeRTOS\\list.h"
 5095              		.file 8 "FreeRTOS\\task.h"
 5096              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 5097              		.section	.debug_info,"",%progbits
 5098              	.Ldebug_info0:
 5099 0000 4D140000 		.4byte	0x144d
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 173


 5100 0004 0400     		.2byte	0x4
 5101 0006 00000000 		.4byte	.Ldebug_abbrev0
 5102 000a 04       		.byte	0x4
 5103 000b 01       		.uleb128 0x1
 5104 000c 5F010000 		.4byte	.LASF210
 5105 0010 0C       		.byte	0xc
 5106 0011 1B000000 		.4byte	.LASF211
 5107 0015 C8090000 		.4byte	.LASF212
 5108 0019 00000000 		.4byte	.Ldebug_ranges0+0
 5109 001d 00000000 		.4byte	0
 5110 0021 00000000 		.4byte	.Ldebug_line0
 5111 0025 02       		.uleb128 0x2
 5112 0026 5E040000 		.4byte	.LASF4
 5113 002a 03       		.byte	0x3
 5114 002b D8       		.byte	0xd8
 5115 002c 30000000 		.4byte	0x30
 5116 0030 03       		.uleb128 0x3
 5117 0031 04       		.byte	0x4
 5118 0032 07       		.byte	0x7
 5119 0033 D0000000 		.4byte	.LASF0
 5120 0037 04       		.uleb128 0x4
 5121 0038 04       		.byte	0x4
 5122 0039 05       		.byte	0x5
 5123 003a 696E7400 		.ascii	"int\000"
 5124 003e 03       		.uleb128 0x3
 5125 003f 08       		.byte	0x8
 5126 0040 05       		.byte	0x5
 5127 0041 9C060000 		.4byte	.LASF1
 5128 0045 03       		.uleb128 0x3
 5129 0046 08       		.byte	0x8
 5130 0047 04       		.byte	0x4
 5131 0048 62080000 		.4byte	.LASF2
 5132 004c 03       		.uleb128 0x3
 5133 004d 01       		.byte	0x1
 5134 004e 06       		.byte	0x6
 5135 004f 9F0C0000 		.4byte	.LASF3
 5136 0053 02       		.uleb128 0x2
 5137 0054 330A0000 		.4byte	.LASF5
 5138 0058 04       		.byte	0x4
 5139 0059 1D       		.byte	0x1d
 5140 005a 5E000000 		.4byte	0x5e
 5141 005e 03       		.uleb128 0x3
 5142 005f 01       		.byte	0x1
 5143 0060 08       		.byte	0x8
 5144 0061 140B0000 		.4byte	.LASF6
 5145 0065 03       		.uleb128 0x3
 5146 0066 02       		.byte	0x2
 5147 0067 05       		.byte	0x5
 5148 0068 E1080000 		.4byte	.LASF7
 5149 006c 02       		.uleb128 0x2
 5150 006d F1030000 		.4byte	.LASF8
 5151 0071 04       		.byte	0x4
 5152 0072 2B       		.byte	0x2b
 5153 0073 77000000 		.4byte	0x77
 5154 0077 03       		.uleb128 0x3
 5155 0078 02       		.byte	0x2
 5156 0079 07       		.byte	0x7
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 174


 5157 007a AB0C0000 		.4byte	.LASF9
 5158 007e 02       		.uleb128 0x2
 5159 007f 2E010000 		.4byte	.LASF10
 5160 0083 04       		.byte	0x4
 5161 0084 3F       		.byte	0x3f
 5162 0085 89000000 		.4byte	0x89
 5163 0089 03       		.uleb128 0x3
 5164 008a 04       		.byte	0x4
 5165 008b 05       		.byte	0x5
 5166 008c 03090000 		.4byte	.LASF11
 5167 0090 02       		.uleb128 0x2
 5168 0091 630B0000 		.4byte	.LASF12
 5169 0095 04       		.byte	0x4
 5170 0096 41       		.byte	0x41
 5171 0097 9B000000 		.4byte	0x9b
 5172 009b 03       		.uleb128 0x3
 5173 009c 04       		.byte	0x4
 5174 009d 07       		.byte	0x7
 5175 009e A30A0000 		.4byte	.LASF13
 5176 00a2 03       		.uleb128 0x3
 5177 00a3 08       		.byte	0x8
 5178 00a4 07       		.byte	0x7
 5179 00a5 60030000 		.4byte	.LASF14
 5180 00a9 03       		.uleb128 0x3
 5181 00aa 04       		.byte	0x4
 5182 00ab 07       		.byte	0x7
 5183 00ac 7B0A0000 		.4byte	.LASF15
 5184 00b0 05       		.uleb128 0x5
 5185 00b1 04       		.byte	0x4
 5186 00b2 03       		.uleb128 0x3
 5187 00b3 01       		.byte	0x1
 5188 00b4 08       		.byte	0x8
 5189 00b5 A7050000 		.4byte	.LASF16
 5190 00b9 06       		.uleb128 0x6
 5191 00ba 04       		.byte	0x4
 5192 00bb BF000000 		.4byte	0xbf
 5193 00bf 07       		.uleb128 0x7
 5194 00c0 B2000000 		.4byte	0xb2
 5195 00c4 02       		.uleb128 0x2
 5196 00c5 3C060000 		.4byte	.LASF17
 5197 00c9 05       		.byte	0x5
 5198 00ca 18       		.byte	0x18
 5199 00cb 53000000 		.4byte	0x53
 5200 00cf 02       		.uleb128 0x2
 5201 00d0 7D080000 		.4byte	.LASF18
 5202 00d4 05       		.byte	0x5
 5203 00d5 24       		.byte	0x24
 5204 00d6 6C000000 		.4byte	0x6c
 5205 00da 02       		.uleb128 0x2
 5206 00db C30A0000 		.4byte	.LASF19
 5207 00df 05       		.byte	0x5
 5208 00e0 2C       		.byte	0x2c
 5209 00e1 7E000000 		.4byte	0x7e
 5210 00e5 02       		.uleb128 0x2
 5211 00e6 EA020000 		.4byte	.LASF20
 5212 00ea 05       		.byte	0x5
 5213 00eb 30       		.byte	0x30
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 175


 5214 00ec 90000000 		.4byte	0x90
 5215 00f0 03       		.uleb128 0x3
 5216 00f1 04       		.byte	0x4
 5217 00f2 04       		.byte	0x4
 5218 00f3 15030000 		.4byte	.LASF21
 5219 00f7 03       		.uleb128 0x3
 5220 00f8 08       		.byte	0x8
 5221 00f9 04       		.byte	0x4
 5222 00fa E60C0000 		.4byte	.LASF22
 5223 00fe 08       		.uleb128 0x8
 5224 00ff E5000000 		.4byte	0xe5
 5225 0103 02       		.uleb128 0x2
 5226 0104 2D070000 		.4byte	.LASF23
 5227 0108 06       		.byte	0x6
 5228 0109 4D       		.byte	0x4d
 5229 010a 0E010000 		.4byte	0x10e
 5230 010e 06       		.uleb128 0x6
 5231 010f 04       		.byte	0x4
 5232 0110 14010000 		.4byte	0x114
 5233 0114 09       		.uleb128 0x9
 5234 0115 1F010000 		.4byte	0x11f
 5235 0119 0A       		.uleb128 0xa
 5236 011a B0000000 		.4byte	0xb0
 5237 011e 00       		.byte	0
 5238 011f 02       		.uleb128 0x2
 5239 0120 18010000 		.4byte	.LASF24
 5240 0124 02       		.byte	0x2
 5241 0125 61       		.byte	0x61
 5242 0126 E5000000 		.4byte	0xe5
 5243 012a 02       		.uleb128 0x2
 5244 012b DB060000 		.4byte	.LASF25
 5245 012f 02       		.byte	0x2
 5246 0130 62       		.byte	0x62
 5247 0131 89000000 		.4byte	0x89
 5248 0135 02       		.uleb128 0x2
 5249 0136 E1050000 		.4byte	.LASF26
 5250 013a 02       		.byte	0x2
 5251 013b 63       		.byte	0x63
 5252 013c 9B000000 		.4byte	0x9b
 5253 0140 02       		.uleb128 0x2
 5254 0141 20080000 		.4byte	.LASF27
 5255 0145 02       		.byte	0x2
 5256 0146 69       		.byte	0x69
 5257 0147 E5000000 		.4byte	0xe5
 5258 014b 06       		.uleb128 0x6
 5259 014c 04       		.byte	0x4
 5260 014d C4000000 		.4byte	0xc4
 5261 0151 0B       		.uleb128 0xb
 5262 0152 38010000 		.4byte	.LASF34
 5263 0156 14       		.byte	0x14
 5264 0157 07       		.byte	0x7
 5265 0158 B5       		.byte	0xb5
 5266 0159 9A010000 		.4byte	0x19a
 5267 015d 0C       		.uleb128 0xc
 5268 015e F8080000 		.4byte	.LASF28
 5269 0162 07       		.byte	0x7
 5270 0163 B8       		.byte	0xb8
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 176


 5271 0164 40010000 		.4byte	0x140
 5272 0168 00       		.byte	0
 5273 0169 0C       		.uleb128 0xc
 5274 016a 3C070000 		.4byte	.LASF29
 5275 016e 07       		.byte	0x7
 5276 016f B9       		.byte	0xb9
 5277 0170 9A010000 		.4byte	0x19a
 5278 0174 04       		.byte	0x4
 5279 0175 0C       		.uleb128 0xc
 5280 0176 CD030000 		.4byte	.LASF30
 5281 017a 07       		.byte	0x7
 5282 017b BA       		.byte	0xba
 5283 017c 9A010000 		.4byte	0x19a
 5284 0180 08       		.byte	0x8
 5285 0181 0C       		.uleb128 0xc
 5286 0182 E10B0000 		.4byte	.LASF31
 5287 0186 07       		.byte	0x7
 5288 0187 BB       		.byte	0xbb
 5289 0188 B0000000 		.4byte	0xb0
 5290 018c 0C       		.byte	0xc
 5291 018d 0C       		.uleb128 0xc
 5292 018e C8080000 		.4byte	.LASF32
 5293 0192 07       		.byte	0x7
 5294 0193 BC       		.byte	0xbc
 5295 0194 B0000000 		.4byte	0xb0
 5296 0198 10       		.byte	0x10
 5297 0199 00       		.byte	0
 5298 019a 06       		.uleb128 0x6
 5299 019b 04       		.byte	0x4
 5300 019c 51010000 		.4byte	0x151
 5301 01a0 02       		.uleb128 0x2
 5302 01a1 AC050000 		.4byte	.LASF33
 5303 01a5 07       		.byte	0x7
 5304 01a6 BF       		.byte	0xbf
 5305 01a7 51010000 		.4byte	0x151
 5306 01ab 0B       		.uleb128 0xb
 5307 01ac 70040000 		.4byte	.LASF35
 5308 01b0 0C       		.byte	0xc
 5309 01b1 07       		.byte	0x7
 5310 01b2 C1       		.byte	0xc1
 5311 01b3 DC010000 		.4byte	0x1dc
 5312 01b7 0C       		.uleb128 0xc
 5313 01b8 F8080000 		.4byte	.LASF28
 5314 01bc 07       		.byte	0x7
 5315 01bd C4       		.byte	0xc4
 5316 01be 40010000 		.4byte	0x140
 5317 01c2 00       		.byte	0
 5318 01c3 0C       		.uleb128 0xc
 5319 01c4 3C070000 		.4byte	.LASF29
 5320 01c8 07       		.byte	0x7
 5321 01c9 C5       		.byte	0xc5
 5322 01ca 9A010000 		.4byte	0x19a
 5323 01ce 04       		.byte	0x4
 5324 01cf 0C       		.uleb128 0xc
 5325 01d0 CD030000 		.4byte	.LASF30
 5326 01d4 07       		.byte	0x7
 5327 01d5 C6       		.byte	0xc6
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 177


 5328 01d6 9A010000 		.4byte	0x19a
 5329 01da 08       		.byte	0x8
 5330 01db 00       		.byte	0
 5331 01dc 02       		.uleb128 0x2
 5332 01dd 2D060000 		.4byte	.LASF36
 5333 01e1 07       		.byte	0x7
 5334 01e2 C8       		.byte	0xc8
 5335 01e3 AB010000 		.4byte	0x1ab
 5336 01e7 0B       		.uleb128 0xb
 5337 01e8 9C040000 		.4byte	.LASF37
 5338 01ec 14       		.byte	0x14
 5339 01ed 07       		.byte	0x7
 5340 01ee CD       		.byte	0xcd
 5341 01ef 18020000 		.4byte	0x218
 5342 01f3 0C       		.uleb128 0xc
 5343 01f4 0B000000 		.4byte	.LASF38
 5344 01f8 07       		.byte	0x7
 5345 01f9 D0       		.byte	0xd0
 5346 01fa 35010000 		.4byte	0x135
 5347 01fe 00       		.byte	0
 5348 01ff 0C       		.uleb128 0xc
 5349 0200 FB000000 		.4byte	.LASF39
 5350 0204 07       		.byte	0x7
 5351 0205 D1       		.byte	0xd1
 5352 0206 18020000 		.4byte	0x218
 5353 020a 04       		.byte	0x4
 5354 020b 0C       		.uleb128 0xc
 5355 020c 06060000 		.4byte	.LASF40
 5356 0210 07       		.byte	0x7
 5357 0211 D2       		.byte	0xd2
 5358 0212 DC010000 		.4byte	0x1dc
 5359 0216 08       		.byte	0x8
 5360 0217 00       		.byte	0
 5361 0218 06       		.uleb128 0x6
 5362 0219 04       		.byte	0x4
 5363 021a A0010000 		.4byte	0x1a0
 5364 021e 02       		.uleb128 0x2
 5365 021f 19080000 		.4byte	.LASF41
 5366 0223 07       		.byte	0x7
 5367 0224 D4       		.byte	0xd4
 5368 0225 E7010000 		.4byte	0x1e7
 5369 0229 02       		.uleb128 0x2
 5370 022a C1070000 		.4byte	.LASF42
 5371 022e 08       		.byte	0x8
 5372 022f 67       		.byte	0x67
 5373 0230 B0000000 		.4byte	0xb0
 5374 0234 0D       		.uleb128 0xd
 5375 0235 01       		.byte	0x1
 5376 0236 5E000000 		.4byte	0x5e
 5377 023a 08       		.byte	0x8
 5378 023b 71       		.byte	0x71
 5379 023c 5F020000 		.4byte	0x25f
 5380 0240 0E       		.uleb128 0xe
 5381 0241 E60A0000 		.4byte	.LASF43
 5382 0245 00       		.byte	0
 5383 0246 0E       		.uleb128 0xe
 5384 0247 44060000 		.4byte	.LASF44
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 178


 5385 024b 01       		.byte	0x1
 5386 024c 0E       		.uleb128 0xe
 5387 024d F60B0000 		.4byte	.LASF45
 5388 0251 02       		.byte	0x2
 5389 0252 0E       		.uleb128 0xe
 5390 0253 4F000000 		.4byte	.LASF46
 5391 0257 03       		.byte	0x3
 5392 0258 0E       		.uleb128 0xe
 5393 0259 AA060000 		.4byte	.LASF47
 5394 025d 04       		.byte	0x4
 5395 025e 00       		.byte	0
 5396 025f 02       		.uleb128 0x2
 5397 0260 01080000 		.4byte	.LASF48
 5398 0264 08       		.byte	0x8
 5399 0265 77       		.byte	0x77
 5400 0266 34020000 		.4byte	0x234
 5401 026a 0D       		.uleb128 0xd
 5402 026b 01       		.byte	0x1
 5403 026c 5E000000 		.4byte	0x5e
 5404 0270 08       		.byte	0x8
 5405 0271 7B       		.byte	0x7b
 5406 0272 95020000 		.4byte	0x295
 5407 0276 0E       		.uleb128 0xe
 5408 0277 B3000000 		.4byte	.LASF49
 5409 027b 00       		.byte	0
 5410 027c 0E       		.uleb128 0xe
 5411 027d 3F080000 		.4byte	.LASF50
 5412 0281 01       		.byte	0x1
 5413 0282 0E       		.uleb128 0xe
 5414 0283 65040000 		.4byte	.LASF51
 5415 0287 02       		.byte	0x2
 5416 0288 0E       		.uleb128 0xe
 5417 0289 49030000 		.4byte	.LASF52
 5418 028d 03       		.byte	0x3
 5419 028e 0E       		.uleb128 0xe
 5420 028f B7050000 		.4byte	.LASF53
 5421 0293 04       		.byte	0x4
 5422 0294 00       		.byte	0
 5423 0295 02       		.uleb128 0x2
 5424 0296 50040000 		.4byte	.LASF54
 5425 029a 08       		.byte	0x8
 5426 029b 81       		.byte	0x81
 5427 029c 6A020000 		.4byte	0x26a
 5428 02a0 0B       		.uleb128 0xb
 5429 02a1 24010000 		.4byte	.LASF55
 5430 02a5 08       		.byte	0x8
 5431 02a6 08       		.byte	0x8
 5432 02a7 86       		.byte	0x86
 5433 02a8 C5020000 		.4byte	0x2c5
 5434 02ac 0C       		.uleb128 0xc
 5435 02ad 5C020000 		.4byte	.LASF56
 5436 02b1 08       		.byte	0x8
 5437 02b2 88       		.byte	0x88
 5438 02b3 2A010000 		.4byte	0x12a
 5439 02b7 00       		.byte	0
 5440 02b8 0C       		.uleb128 0xc
 5441 02b9 0F070000 		.4byte	.LASF57
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 179


 5442 02bd 08       		.byte	0x8
 5443 02be 89       		.byte	0x89
 5444 02bf 40010000 		.4byte	0x140
 5445 02c3 04       		.byte	0x4
 5446 02c4 00       		.byte	0
 5447 02c5 02       		.uleb128 0x2
 5448 02c6 AA070000 		.4byte	.LASF58
 5449 02ca 08       		.byte	0x8
 5450 02cb 8A       		.byte	0x8a
 5451 02cc A0020000 		.4byte	0x2a0
 5452 02d0 0B       		.uleb128 0xb
 5453 02d1 6E080000 		.4byte	.LASF59
 5454 02d5 0C       		.byte	0xc
 5455 02d6 08       		.byte	0x8
 5456 02d7 8F       		.byte	0x8f
 5457 02d8 01030000 		.4byte	0x301
 5458 02dc 0C       		.uleb128 0xc
 5459 02dd F80A0000 		.4byte	.LASF60
 5460 02e1 08       		.byte	0x8
 5461 02e2 91       		.byte	0x91
 5462 02e3 B0000000 		.4byte	0xb0
 5463 02e7 00       		.byte	0
 5464 02e8 0C       		.uleb128 0xc
 5465 02e9 CB060000 		.4byte	.LASF61
 5466 02ed 08       		.byte	0x8
 5467 02ee 92       		.byte	0x92
 5468 02ef E5000000 		.4byte	0xe5
 5469 02f3 04       		.byte	0x4
 5470 02f4 0C       		.uleb128 0xc
 5471 02f5 7C020000 		.4byte	.LASF62
 5472 02f9 08       		.byte	0x8
 5473 02fa 93       		.byte	0x93
 5474 02fb E5000000 		.4byte	0xe5
 5475 02ff 08       		.byte	0x8
 5476 0300 00       		.byte	0
 5477 0301 02       		.uleb128 0x2
 5478 0302 6D060000 		.4byte	.LASF63
 5479 0306 08       		.byte	0x8
 5480 0307 94       		.byte	0x94
 5481 0308 D0020000 		.4byte	0x2d0
 5482 030c 07       		.uleb128 0x7
 5483 030d B9000000 		.4byte	0xb9
 5484 0311 06       		.uleb128 0x6
 5485 0312 04       		.byte	0x4
 5486 0313 1F010000 		.4byte	0x11f
 5487 0317 0D       		.uleb128 0xd
 5488 0318 01       		.byte	0x1
 5489 0319 5E000000 		.4byte	0x5e
 5490 031d 01       		.byte	0x1
 5491 031e 7B       		.byte	0x7b
 5492 031f 36030000 		.4byte	0x336
 5493 0323 0E       		.uleb128 0xe
 5494 0324 3D0A0000 		.4byte	.LASF64
 5495 0328 00       		.byte	0
 5496 0329 0E       		.uleb128 0xe
 5497 032a 60070000 		.4byte	.LASF65
 5498 032e 01       		.byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 180


 5499 032f 0E       		.uleb128 0xe
 5500 0330 55010000 		.4byte	.LASF66
 5501 0334 02       		.byte	0x2
 5502 0335 00       		.byte	0
 5503 0336 02       		.uleb128 0x2
 5504 0337 0C080000 		.4byte	.LASF67
 5505 033b 01       		.byte	0x1
 5506 033c 7F       		.byte	0x7f
 5507 033d 17030000 		.4byte	0x317
 5508 0341 0B       		.uleb128 0xb
 5509 0342 5A000000 		.4byte	.LASF68
 5510 0346 50       		.byte	0x50
 5511 0347 01       		.byte	0x1
 5512 0348 86       		.byte	0x86
 5513 0349 C6030000 		.4byte	0x3c6
 5514 034d 0C       		.uleb128 0xc
 5515 034e 110D0000 		.4byte	.LASF69
 5516 0352 01       		.byte	0x1
 5517 0353 88       		.byte	0x88
 5518 0354 C6030000 		.4byte	0x3c6
 5519 0358 00       		.byte	0
 5520 0359 0C       		.uleb128 0xc
 5521 035a 6B020000 		.4byte	.LASF70
 5522 035e 01       		.byte	0x1
 5523 035f 8F       		.byte	0x8f
 5524 0360 A0010000 		.4byte	0x1a0
 5525 0364 04       		.byte	0x4
 5526 0365 0C       		.uleb128 0xc
 5527 0366 A90B0000 		.4byte	.LASF71
 5528 036a 01       		.byte	0x1
 5529 036b 90       		.byte	0x90
 5530 036c A0010000 		.4byte	0x1a0
 5531 0370 18       		.byte	0x18
 5532 0371 0C       		.uleb128 0xc
 5533 0372 2C000000 		.4byte	.LASF72
 5534 0376 01       		.byte	0x1
 5535 0377 91       		.byte	0x91
 5536 0378 35010000 		.4byte	0x135
 5537 037c 2C       		.byte	0x2c
 5538 037d 0C       		.uleb128 0xc
 5539 037e 86090000 		.4byte	.LASF73
 5540 0382 01       		.byte	0x1
 5541 0383 92       		.byte	0x92
 5542 0384 11030000 		.4byte	0x311
 5543 0388 30       		.byte	0x30
 5544 0389 0C       		.uleb128 0xc
 5545 038a 00000000 		.4byte	.LASF74
 5546 038e 01       		.byte	0x1
 5547 038f 93       		.byte	0x93
 5548 0390 D1030000 		.4byte	0x3d1
 5549 0394 34       		.byte	0x34
 5550 0395 0C       		.uleb128 0xc
 5551 0396 8A0B0000 		.4byte	.LASF75
 5552 039a 01       		.byte	0x1
 5553 039b A3       		.byte	0xa3
 5554 039c 35010000 		.4byte	0x135
 5555 03a0 40       		.byte	0x40
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 181


 5556 03a1 0C       		.uleb128 0xc
 5557 03a2 68050000 		.4byte	.LASF76
 5558 03a6 01       		.byte	0x1
 5559 03a7 A4       		.byte	0xa4
 5560 03a8 35010000 		.4byte	0x135
 5561 03ac 44       		.byte	0x44
 5562 03ad 0C       		.uleb128 0xc
 5563 03ae 58050000 		.4byte	.LASF77
 5564 03b2 01       		.byte	0x1
 5565 03b3 BF       		.byte	0xbf
 5566 03b4 FE000000 		.4byte	0xfe
 5567 03b8 48       		.byte	0x48
 5568 03b9 0C       		.uleb128 0xc
 5569 03ba BF020000 		.4byte	.LASF78
 5570 03be 01       		.byte	0x1
 5571 03bf C0       		.byte	0xc0
 5572 03c0 E1030000 		.4byte	0x3e1
 5573 03c4 4C       		.byte	0x4c
 5574 03c5 00       		.byte	0
 5575 03c6 06       		.uleb128 0x6
 5576 03c7 04       		.byte	0x4
 5577 03c8 CC030000 		.4byte	0x3cc
 5578 03cc 08       		.uleb128 0x8
 5579 03cd 1F010000 		.4byte	0x11f
 5580 03d1 0F       		.uleb128 0xf
 5581 03d2 B2000000 		.4byte	0xb2
 5582 03d6 E1030000 		.4byte	0x3e1
 5583 03da 10       		.uleb128 0x10
 5584 03db A9000000 		.4byte	0xa9
 5585 03df 0B       		.byte	0xb
 5586 03e0 00       		.byte	0
 5587 03e1 08       		.uleb128 0x8
 5588 03e2 36030000 		.4byte	0x336
 5589 03e6 02       		.uleb128 0x2
 5590 03e7 CC020000 		.4byte	.LASF79
 5591 03eb 01       		.byte	0x1
 5592 03ec C3       		.byte	0xc3
 5593 03ed 41030000 		.4byte	0x341
 5594 03f1 02       		.uleb128 0x2
 5595 03f2 CE0B0000 		.4byte	.LASF80
 5596 03f6 01       		.byte	0x1
 5597 03f7 C7       		.byte	0xc7
 5598 03f8 E6030000 		.4byte	0x3e6
 5599 03fc 11       		.uleb128 0x11
 5600 03fd B3060000 		.4byte	.LASF213
 5601 0401 02       		.byte	0x2
 5602 0402 A5       		.byte	0xa5
 5603 0403 C4000000 		.4byte	0xc4
 5604 0407 03       		.byte	0x3
 5605 0408 23040000 		.4byte	0x423
 5606 040c 12       		.uleb128 0x12
 5607 040d 2F020000 		.4byte	.LASF214
 5608 0411 02       		.byte	0x2
 5609 0412 A5       		.byte	0xa5
 5610 0413 E5000000 		.4byte	0xe5
 5611 0417 13       		.uleb128 0x13
 5612 0418 550A0000 		.4byte	.LASF215
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 182


 5613 041c 02       		.byte	0x2
 5614 041d A7       		.byte	0xa7
 5615 041e C4000000 		.4byte	0xc4
 5616 0422 00       		.byte	0
 5617 0423 14       		.uleb128 0x14
 5618 0424 92080000 		.4byte	.LASF102
 5619 0428 01       		.byte	0x1
 5620 0429 2702     		.2byte	0x227
 5621 042b 2A010000 		.4byte	0x12a
 5622 042f 00000000 		.4byte	.LFB64
 5623 0433 34010000 		.4byte	.LFE64-.LFB64
 5624 0437 01       		.uleb128 0x1
 5625 0438 9C       		.byte	0x9c
 5626 0439 E3040000 		.4byte	0x4e3
 5627 043d 15       		.uleb128 0x15
 5628 043e 62060000 		.4byte	.LASF81
 5629 0442 01       		.byte	0x1
 5630 0443 2702     		.2byte	0x227
 5631 0445 03010000 		.4byte	0x103
 5632 0449 02       		.uleb128 0x2
 5633 044a 91       		.byte	0x91
 5634 044b 64       		.sleb128 -28
 5635 044c 15       		.uleb128 0x15
 5636 044d E9040000 		.4byte	.LASF82
 5637 0451 01       		.byte	0x1
 5638 0452 2702     		.2byte	0x227
 5639 0454 0C030000 		.4byte	0x30c
 5640 0458 02       		.uleb128 0x2
 5641 0459 91       		.byte	0x91
 5642 045a 60       		.sleb128 -32
 5643 045b 15       		.uleb128 0x15
 5644 045c 2A030000 		.4byte	.LASF83
 5645 0460 01       		.byte	0x1
 5646 0461 2702     		.2byte	0x227
 5647 0463 E3040000 		.4byte	0x4e3
 5648 0467 02       		.uleb128 0x2
 5649 0468 91       		.byte	0x91
 5650 0469 5E       		.sleb128 -34
 5651 046a 15       		.uleb128 0x15
 5652 046b EB080000 		.4byte	.LASF84
 5653 046f 01       		.byte	0x1
 5654 0470 2702     		.2byte	0x227
 5655 0472 E8040000 		.4byte	0x4e8
 5656 0476 02       		.uleb128 0x2
 5657 0477 91       		.byte	0x91
 5658 0478 58       		.sleb128 -40
 5659 0479 15       		.uleb128 0x15
 5660 047a 2C000000 		.4byte	.LASF72
 5661 047e 01       		.byte	0x1
 5662 047f 2702     		.2byte	0x227
 5663 0481 35010000 		.4byte	0x135
 5664 0485 02       		.uleb128 0x2
 5665 0486 91       		.byte	0x91
 5666 0487 00       		.sleb128 0
 5667 0488 15       		.uleb128 0x15
 5668 0489 510D0000 		.4byte	.LASF85
 5669 048d 01       		.byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 183


 5670 048e 2702     		.2byte	0x227
 5671 0490 F3040000 		.4byte	0x4f3
 5672 0494 02       		.uleb128 0x2
 5673 0495 91       		.byte	0x91
 5674 0496 04       		.sleb128 4
 5675 0497 15       		.uleb128 0x15
 5676 0498 020D0000 		.4byte	.LASF86
 5677 049c 01       		.byte	0x1
 5678 049d 2702     		.2byte	0x227
 5679 049f F8040000 		.4byte	0x4f8
 5680 04a3 02       		.uleb128 0x2
 5681 04a4 91       		.byte	0x91
 5682 04a5 08       		.sleb128 8
 5683 04a6 15       		.uleb128 0x15
 5684 04a7 510C0000 		.4byte	.LASF87
 5685 04ab 01       		.byte	0x1
 5686 04ac 2702     		.2byte	0x227
 5687 04ae 08050000 		.4byte	0x508
 5688 04b2 02       		.uleb128 0x2
 5689 04b3 91       		.byte	0x91
 5690 04b4 0C       		.sleb128 12
 5691 04b5 16       		.uleb128 0x16
 5692 04b6 730A0000 		.4byte	.LASF88
 5693 04ba 01       		.byte	0x1
 5694 04bb 2902     		.2byte	0x229
 5695 04bd 2A010000 		.4byte	0x12a
 5696 04c1 02       		.uleb128 0x2
 5697 04c2 91       		.byte	0x91
 5698 04c3 74       		.sleb128 -12
 5699 04c4 16       		.uleb128 0x16
 5700 04c5 59060000 		.4byte	.LASF89
 5701 04c9 01       		.byte	0x1
 5702 04ca 2A02     		.2byte	0x22a
 5703 04cc 0D050000 		.4byte	0x50d
 5704 04d0 02       		.uleb128 0x2
 5705 04d1 91       		.byte	0x91
 5706 04d2 70       		.sleb128 -16
 5707 04d3 16       		.uleb128 0x16
 5708 04d4 110D0000 		.4byte	.LASF69
 5709 04d8 01       		.byte	0x1
 5710 04d9 2B02     		.2byte	0x22b
 5711 04db 11030000 		.4byte	0x311
 5712 04df 02       		.uleb128 0x2
 5713 04e0 91       		.byte	0x91
 5714 04e1 6C       		.sleb128 -20
 5715 04e2 00       		.byte	0
 5716 04e3 07       		.uleb128 0x7
 5717 04e4 CF000000 		.4byte	0xcf
 5718 04e8 07       		.uleb128 0x7
 5719 04e9 B0000000 		.4byte	0xb0
 5720 04ed 06       		.uleb128 0x6
 5721 04ee 04       		.byte	0x4
 5722 04ef 29020000 		.4byte	0x229
 5723 04f3 07       		.uleb128 0x7
 5724 04f4 ED040000 		.4byte	0x4ed
 5725 04f8 07       		.uleb128 0x7
 5726 04f9 11030000 		.4byte	0x311
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 184


 5727 04fd 06       		.uleb128 0x6
 5728 04fe 04       		.byte	0x4
 5729 04ff 03050000 		.4byte	0x503
 5730 0503 07       		.uleb128 0x7
 5731 0504 01030000 		.4byte	0x301
 5732 0508 07       		.uleb128 0x7
 5733 0509 FD040000 		.4byte	0x4fd
 5734 050d 06       		.uleb128 0x6
 5735 050e 04       		.byte	0x4
 5736 050f F1030000 		.4byte	0x3f1
 5737 0513 17       		.uleb128 0x17
 5738 0514 86080000 		.4byte	.LASF92
 5739 0518 01       		.byte	0x1
 5740 0519 E802     		.2byte	0x2e8
 5741 051b 00000000 		.4byte	.LFB65
 5742 051f D8000000 		.4byte	.LFE65-.LFB65
 5743 0523 01       		.uleb128 0x1
 5744 0524 9C       		.byte	0x9c
 5745 0525 48050000 		.4byte	0x548
 5746 0529 15       		.uleb128 0x15
 5747 052a 8E090000 		.4byte	.LASF90
 5748 052e 01       		.byte	0x1
 5749 052f E802     		.2byte	0x2e8
 5750 0531 29020000 		.4byte	0x229
 5751 0535 02       		.uleb128 0x2
 5752 0536 91       		.byte	0x91
 5753 0537 6C       		.sleb128 -20
 5754 0538 16       		.uleb128 0x16
 5755 0539 E00C0000 		.4byte	.LASF91
 5756 053d 01       		.byte	0x1
 5757 053e EA02     		.2byte	0x2ea
 5758 0540 0D050000 		.4byte	0x50d
 5759 0544 02       		.uleb128 0x2
 5760 0545 91       		.byte	0x91
 5761 0546 74       		.sleb128 -12
 5762 0547 00       		.byte	0
 5763 0548 17       		.uleb128 0x17
 5764 0549 990B0000 		.4byte	.LASF93
 5765 054d 01       		.byte	0x1
 5766 054e 3A03     		.2byte	0x33a
 5767 0550 00000000 		.4byte	.LFB66
 5768 0554 BC000000 		.4byte	.LFE66-.LFB66
 5769 0558 01       		.uleb128 0x1
 5770 0559 9C       		.byte	0x9c
 5771 055a C3050000 		.4byte	0x5c3
 5772 055e 15       		.uleb128 0x15
 5773 055f 200A0000 		.4byte	.LASF94
 5774 0563 01       		.byte	0x1
 5775 0564 3A03     		.2byte	0x33a
 5776 0566 C9050000 		.4byte	0x5c9
 5777 056a 02       		.uleb128 0x2
 5778 056b 91       		.byte	0x91
 5779 056c 64       		.sleb128 -28
 5780 056d 15       		.uleb128 0x15
 5781 056e 900C0000 		.4byte	.LASF95
 5782 0572 01       		.byte	0x1
 5783 0573 3A03     		.2byte	0x33a
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 185


 5784 0575 CE050000 		.4byte	0x5ce
 5785 0579 02       		.uleb128 0x2
 5786 057a 91       		.byte	0x91
 5787 057b 60       		.sleb128 -32
 5788 057c 16       		.uleb128 0x16
 5789 057d BE0C0000 		.4byte	.LASF96
 5790 0581 01       		.byte	0x1
 5791 0582 3C03     		.2byte	0x33c
 5792 0584 40010000 		.4byte	0x140
 5793 0588 02       		.uleb128 0x2
 5794 0589 91       		.byte	0x91
 5795 058a 6C       		.sleb128 -20
 5796 058b 16       		.uleb128 0x16
 5797 058c 0C0C0000 		.4byte	.LASF97
 5798 0590 01       		.byte	0x1
 5799 0591 3D03     		.2byte	0x33d
 5800 0593 2A010000 		.4byte	0x12a
 5801 0597 02       		.uleb128 0x2
 5802 0598 91       		.byte	0x91
 5803 0599 68       		.sleb128 -24
 5804 059a 16       		.uleb128 0x16
 5805 059b ED050000 		.4byte	.LASF98
 5806 059f 01       		.byte	0x1
 5807 05a0 3D03     		.2byte	0x33d
 5808 05a2 2A010000 		.4byte	0x12a
 5809 05a6 02       		.uleb128 0x2
 5810 05a7 91       		.byte	0x91
 5811 05a8 74       		.sleb128 -12
 5812 05a9 18       		.uleb128 0x18
 5813 05aa 12000000 		.4byte	.LBB7
 5814 05ae 84000000 		.4byte	.LBE7-.LBB7
 5815 05b2 16       		.uleb128 0x16
 5816 05b3 C6040000 		.4byte	.LASF99
 5817 05b7 01       		.byte	0x1
 5818 05b8 4703     		.2byte	0x347
 5819 05ba CE050000 		.4byte	0x5ce
 5820 05be 02       		.uleb128 0x2
 5821 05bf 91       		.byte	0x91
 5822 05c0 70       		.sleb128 -16
 5823 05c1 00       		.byte	0
 5824 05c2 00       		.byte	0
 5825 05c3 06       		.uleb128 0x6
 5826 05c4 04       		.byte	0x4
 5827 05c5 40010000 		.4byte	0x140
 5828 05c9 07       		.uleb128 0x7
 5829 05ca C3050000 		.4byte	0x5c3
 5830 05ce 07       		.uleb128 0x7
 5831 05cf 40010000 		.4byte	0x140
 5832 05d3 17       		.uleb128 0x17
 5833 05d4 2F050000 		.4byte	.LASF100
 5834 05d8 01       		.byte	0x1
 5835 05d9 9A03     		.2byte	0x39a
 5836 05db 00000000 		.4byte	.LFB67
 5837 05df 74000000 		.4byte	.LFE67-.LFB67
 5838 05e3 01       		.uleb128 0x1
 5839 05e4 9C       		.byte	0x9c
 5840 05e5 17060000 		.4byte	0x617
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 186


 5841 05e9 15       		.uleb128 0x15
 5842 05ea 060B0000 		.4byte	.LASF101
 5843 05ee 01       		.byte	0x1
 5844 05ef 9A03     		.2byte	0x39a
 5845 05f1 CE050000 		.4byte	0x5ce
 5846 05f5 02       		.uleb128 0x2
 5847 05f6 91       		.byte	0x91
 5848 05f7 6C       		.sleb128 -20
 5849 05f8 16       		.uleb128 0x16
 5850 05f9 BE0C0000 		.4byte	.LASF96
 5851 05fd 01       		.byte	0x1
 5852 05fe 9C03     		.2byte	0x39c
 5853 0600 40010000 		.4byte	0x140
 5854 0604 02       		.uleb128 0x2
 5855 0605 91       		.byte	0x91
 5856 0606 70       		.sleb128 -16
 5857 0607 16       		.uleb128 0x16
 5858 0608 0C0C0000 		.4byte	.LASF97
 5859 060c 01       		.byte	0x1
 5860 060d 9D03     		.2byte	0x39d
 5861 060f 2A010000 		.4byte	0x12a
 5862 0613 02       		.uleb128 0x2
 5863 0614 91       		.byte	0x91
 5864 0615 74       		.sleb128 -12
 5865 0616 00       		.byte	0
 5866 0617 14       		.uleb128 0x14
 5867 0618 4B060000 		.4byte	.LASF103
 5868 061c 01       		.byte	0x1
 5869 061d DC03     		.2byte	0x3dc
 5870 061f 5F020000 		.4byte	0x25f
 5871 0623 00000000 		.4byte	.LFB68
 5872 0627 90000000 		.4byte	.LFE68-.LFB68
 5873 062b 01       		.uleb128 0x1
 5874 062c 9C       		.byte	0x9c
 5875 062d 6E060000 		.4byte	0x66e
 5876 0631 15       		.uleb128 0x15
 5877 0632 39080000 		.4byte	.LASF104
 5878 0636 01       		.byte	0x1
 5879 0637 DC03     		.2byte	0x3dc
 5880 0639 29020000 		.4byte	0x229
 5881 063d 02       		.uleb128 0x2
 5882 063e 91       		.byte	0x91
 5883 063f 64       		.sleb128 -28
 5884 0640 16       		.uleb128 0x16
 5885 0641 89020000 		.4byte	.LASF105
 5886 0645 01       		.byte	0x1
 5887 0646 DE03     		.2byte	0x3de
 5888 0648 5F020000 		.4byte	0x25f
 5889 064c 02       		.uleb128 0x2
 5890 064d 91       		.byte	0x91
 5891 064e 77       		.sleb128 -9
 5892 064f 16       		.uleb128 0x16
 5893 0650 43000000 		.4byte	.LASF106
 5894 0654 01       		.byte	0x1
 5895 0655 DF03     		.2byte	0x3df
 5896 0657 6E060000 		.4byte	0x66e
 5897 065b 02       		.uleb128 0x2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 187


 5898 065c 91       		.byte	0x91
 5899 065d 6C       		.sleb128 -20
 5900 065e 16       		.uleb128 0x16
 5901 065f E00C0000 		.4byte	.LASF91
 5902 0663 01       		.byte	0x1
 5903 0664 E003     		.2byte	0x3e0
 5904 0666 7F060000 		.4byte	0x67f
 5905 066a 02       		.uleb128 0x2
 5906 066b 91       		.byte	0x91
 5907 066c 70       		.sleb128 -16
 5908 066d 00       		.byte	0
 5909 066e 06       		.uleb128 0x6
 5910 066f 04       		.byte	0x4
 5911 0670 1E020000 		.4byte	0x21e
 5912 0674 06       		.uleb128 0x6
 5913 0675 04       		.byte	0x4
 5914 0676 7A060000 		.4byte	0x67a
 5915 067a 07       		.uleb128 0x7
 5916 067b F1030000 		.4byte	0x3f1
 5917 067f 07       		.uleb128 0x7
 5918 0680 74060000 		.4byte	0x674
 5919 0684 14       		.uleb128 0x14
 5920 0685 B4040000 		.4byte	.LASF107
 5921 0689 01       		.byte	0x1
 5922 068a 2204     		.2byte	0x422
 5923 068c 35010000 		.4byte	0x135
 5924 0690 00000000 		.4byte	.LFB69
 5925 0694 34000000 		.4byte	.LFE69-.LFB69
 5926 0698 01       		.uleb128 0x1
 5927 0699 9C       		.byte	0x9c
 5928 069a CC060000 		.4byte	0x6cc
 5929 069e 15       		.uleb128 0x15
 5930 069f 39080000 		.4byte	.LASF104
 5931 06a3 01       		.byte	0x1
 5932 06a4 2204     		.2byte	0x422
 5933 06a6 29020000 		.4byte	0x229
 5934 06aa 02       		.uleb128 0x2
 5935 06ab 91       		.byte	0x91
 5936 06ac 6C       		.sleb128 -20
 5937 06ad 16       		.uleb128 0x16
 5938 06ae E00C0000 		.4byte	.LASF91
 5939 06b2 01       		.byte	0x1
 5940 06b3 2404     		.2byte	0x424
 5941 06b5 0D050000 		.4byte	0x50d
 5942 06b9 02       		.uleb128 0x2
 5943 06ba 91       		.byte	0x91
 5944 06bb 74       		.sleb128 -12
 5945 06bc 16       		.uleb128 0x16
 5946 06bd B6020000 		.4byte	.LASF108
 5947 06c1 01       		.byte	0x1
 5948 06c2 2504     		.2byte	0x425
 5949 06c4 35010000 		.4byte	0x135
 5950 06c8 02       		.uleb128 0x2
 5951 06c9 91       		.byte	0x91
 5952 06ca 70       		.sleb128 -16
 5953 06cb 00       		.byte	0
 5954 06cc 14       		.uleb128 0x14
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 188


 5955 06cd 7F070000 		.4byte	.LASF109
 5956 06d1 01       		.byte	0x1
 5957 06d2 3804     		.2byte	0x438
 5958 06d4 35010000 		.4byte	0x135
 5959 06d8 00000000 		.4byte	.LFB70
 5960 06dc 38000000 		.4byte	.LFE70-.LFB70
 5961 06e0 01       		.uleb128 0x1
 5962 06e1 9C       		.byte	0x9c
 5963 06e2 23070000 		.4byte	0x723
 5964 06e6 15       		.uleb128 0x15
 5965 06e7 39080000 		.4byte	.LASF104
 5966 06eb 01       		.byte	0x1
 5967 06ec 3804     		.2byte	0x438
 5968 06ee 29020000 		.4byte	0x229
 5969 06f2 02       		.uleb128 0x2
 5970 06f3 91       		.byte	0x91
 5971 06f4 64       		.sleb128 -28
 5972 06f5 16       		.uleb128 0x16
 5973 06f6 E00C0000 		.4byte	.LASF91
 5974 06fa 01       		.byte	0x1
 5975 06fb 3A04     		.2byte	0x43a
 5976 06fd 0D050000 		.4byte	0x50d
 5977 0701 02       		.uleb128 0x2
 5978 0702 91       		.byte	0x91
 5979 0703 70       		.sleb128 -16
 5980 0704 16       		.uleb128 0x16
 5981 0705 B6020000 		.4byte	.LASF108
 5982 0709 01       		.byte	0x1
 5983 070a 3B04     		.2byte	0x43b
 5984 070c 35010000 		.4byte	0x135
 5985 0710 02       		.uleb128 0x2
 5986 0711 91       		.byte	0x91
 5987 0712 6C       		.sleb128 -20
 5988 0713 16       		.uleb128 0x16
 5989 0714 90030000 		.4byte	.LASF110
 5990 0718 01       		.byte	0x1
 5991 0719 3B04     		.2byte	0x43b
 5992 071b 35010000 		.4byte	0x135
 5993 071f 02       		.uleb128 0x2
 5994 0720 91       		.byte	0x91
 5995 0721 74       		.sleb128 -12
 5996 0722 00       		.byte	0
 5997 0723 17       		.uleb128 0x17
 5998 0724 F0070000 		.4byte	.LASF111
 5999 0728 01       		.byte	0x1
 6000 0729 6004     		.2byte	0x460
 6001 072b 00000000 		.4byte	.LFB71
 6002 072f 30010000 		.4byte	.LFE71-.LFB71
 6003 0733 01       		.uleb128 0x1
 6004 0734 9C       		.byte	0x9c
 6005 0735 94070000 		.4byte	0x794
 6006 0739 15       		.uleb128 0x15
 6007 073a 39080000 		.4byte	.LASF104
 6008 073e 01       		.byte	0x1
 6009 073f 6004     		.2byte	0x460
 6010 0741 29020000 		.4byte	0x229
 6011 0745 02       		.uleb128 0x2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 189


 6012 0746 91       		.byte	0x91
 6013 0747 64       		.sleb128 -28
 6014 0748 15       		.uleb128 0x15
 6015 0749 1F070000 		.4byte	.LASF112
 6016 074d 01       		.byte	0x1
 6017 074e 6004     		.2byte	0x460
 6018 0750 35010000 		.4byte	0x135
 6019 0754 02       		.uleb128 0x2
 6020 0755 91       		.byte	0x91
 6021 0756 60       		.sleb128 -32
 6022 0757 16       		.uleb128 0x16
 6023 0758 E00C0000 		.4byte	.LASF91
 6024 075c 01       		.byte	0x1
 6025 075d 6204     		.2byte	0x462
 6026 075f 0D050000 		.4byte	0x50d
 6027 0763 02       		.uleb128 0x2
 6028 0764 91       		.byte	0x91
 6029 0765 70       		.sleb128 -16
 6030 0766 16       		.uleb128 0x16
 6031 0767 880D0000 		.4byte	.LASF113
 6032 076b 01       		.byte	0x1
 6033 076c 6304     		.2byte	0x463
 6034 076e 35010000 		.4byte	0x135
 6035 0772 02       		.uleb128 0x2
 6036 0773 91       		.byte	0x91
 6037 0774 6C       		.sleb128 -20
 6038 0775 16       		.uleb128 0x16
 6039 0776 B80B0000 		.4byte	.LASF114
 6040 077a 01       		.byte	0x1
 6041 077b 6304     		.2byte	0x463
 6042 077d 35010000 		.4byte	0x135
 6043 0781 02       		.uleb128 0x2
 6044 0782 91       		.byte	0x91
 6045 0783 68       		.sleb128 -24
 6046 0784 16       		.uleb128 0x16
 6047 0785 F3020000 		.4byte	.LASF115
 6048 0789 01       		.byte	0x1
 6049 078a 6404     		.2byte	0x464
 6050 078c 2A010000 		.4byte	0x12a
 6051 0790 02       		.uleb128 0x2
 6052 0791 91       		.byte	0x91
 6053 0792 74       		.sleb128 -12
 6054 0793 00       		.byte	0
 6055 0794 17       		.uleb128 0x17
 6056 0795 FF0B0000 		.4byte	.LASF116
 6057 0799 01       		.byte	0x1
 6058 079a 0405     		.2byte	0x504
 6059 079c 00000000 		.4byte	.LFB72
 6060 07a0 E0000000 		.4byte	.LFE72-.LFB72
 6061 07a4 01       		.uleb128 0x1
 6062 07a5 9C       		.byte	0x9c
 6063 07a6 C9070000 		.4byte	0x7c9
 6064 07aa 15       		.uleb128 0x15
 6065 07ab A4090000 		.4byte	.LASF117
 6066 07af 01       		.byte	0x1
 6067 07b0 0405     		.2byte	0x504
 6068 07b2 29020000 		.4byte	0x229
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 190


 6069 07b6 02       		.uleb128 0x2
 6070 07b7 91       		.byte	0x91
 6071 07b8 6C       		.sleb128 -20
 6072 07b9 16       		.uleb128 0x16
 6073 07ba E00C0000 		.4byte	.LASF91
 6074 07be 01       		.byte	0x1
 6075 07bf 0605     		.2byte	0x506
 6076 07c1 0D050000 		.4byte	0x50d
 6077 07c5 02       		.uleb128 0x2
 6078 07c6 91       		.byte	0x91
 6079 07c7 74       		.sleb128 -12
 6080 07c8 00       		.byte	0
 6081 07c9 19       		.uleb128 0x19
 6082 07ca 51090000 		.4byte	.LASF156
 6083 07ce 01       		.byte	0x1
 6084 07cf 5D05     		.2byte	0x55d
 6085 07d1 2A010000 		.4byte	0x12a
 6086 07d5 00000000 		.4byte	.LFB73
 6087 07d9 58000000 		.4byte	.LFE73-.LFB73
 6088 07dd 01       		.uleb128 0x1
 6089 07de 9C       		.byte	0x9c
 6090 07df 11080000 		.4byte	0x811
 6091 07e3 15       		.uleb128 0x15
 6092 07e4 39080000 		.4byte	.LASF104
 6093 07e8 01       		.byte	0x1
 6094 07e9 5D05     		.2byte	0x55d
 6095 07eb 11080000 		.4byte	0x811
 6096 07ef 02       		.uleb128 0x2
 6097 07f0 91       		.byte	0x91
 6098 07f1 6C       		.sleb128 -20
 6099 07f2 16       		.uleb128 0x16
 6100 07f3 730A0000 		.4byte	.LASF88
 6101 07f7 01       		.byte	0x1
 6102 07f8 5F05     		.2byte	0x55f
 6103 07fa 2A010000 		.4byte	0x12a
 6104 07fe 02       		.uleb128 0x2
 6105 07ff 91       		.byte	0x91
 6106 0800 74       		.sleb128 -12
 6107 0801 16       		.uleb128 0x16
 6108 0802 E00C0000 		.4byte	.LASF91
 6109 0806 01       		.byte	0x1
 6110 0807 6005     		.2byte	0x560
 6111 0809 7F060000 		.4byte	0x67f
 6112 080d 02       		.uleb128 0x2
 6113 080e 91       		.byte	0x91
 6114 080f 70       		.sleb128 -16
 6115 0810 00       		.byte	0
 6116 0811 07       		.uleb128 0x7
 6117 0812 29020000 		.4byte	0x229
 6118 0816 17       		.uleb128 0x17
 6119 0817 1E0D0000 		.4byte	.LASF118
 6120 081b 01       		.byte	0x1
 6121 081c 8B05     		.2byte	0x58b
 6122 081e 00000000 		.4byte	.LFB74
 6123 0822 90000000 		.4byte	.LFE74-.LFB74
 6124 0826 01       		.uleb128 0x1
 6125 0827 9C       		.byte	0x9c
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 191


 6126 0828 4B080000 		.4byte	0x84b
 6127 082c 15       		.uleb128 0x15
 6128 082d A8020000 		.4byte	.LASF119
 6129 0831 01       		.byte	0x1
 6130 0832 8B05     		.2byte	0x58b
 6131 0834 29020000 		.4byte	0x229
 6132 0838 02       		.uleb128 0x2
 6133 0839 91       		.byte	0x91
 6134 083a 6C       		.sleb128 -20
 6135 083b 16       		.uleb128 0x16
 6136 083c E00C0000 		.4byte	.LASF91
 6137 0840 01       		.byte	0x1
 6138 0841 8D05     		.2byte	0x58d
 6139 0843 4B080000 		.4byte	0x84b
 6140 0847 02       		.uleb128 0x2
 6141 0848 91       		.byte	0x91
 6142 0849 74       		.sleb128 -12
 6143 084a 00       		.byte	0
 6144 084b 07       		.uleb128 0x7
 6145 084c 0D050000 		.4byte	0x50d
 6146 0850 14       		.uleb128 0x14
 6147 0851 FC030000 		.4byte	.LASF120
 6148 0855 01       		.byte	0x1
 6149 0856 C105     		.2byte	0x5c1
 6150 0858 2A010000 		.4byte	0x12a
 6151 085c 00000000 		.4byte	.LFB75
 6152 0860 A8000000 		.4byte	.LFE75-.LFB75
 6153 0864 01       		.uleb128 0x1
 6154 0865 9C       		.byte	0x9c
 6155 0866 A7080000 		.4byte	0x8a7
 6156 086a 15       		.uleb128 0x15
 6157 086b A8020000 		.4byte	.LASF119
 6158 086f 01       		.byte	0x1
 6159 0870 C105     		.2byte	0x5c1
 6160 0872 29020000 		.4byte	0x229
 6161 0876 02       		.uleb128 0x2
 6162 0877 91       		.byte	0x91
 6163 0878 64       		.sleb128 -28
 6164 0879 16       		.uleb128 0x16
 6165 087a F3020000 		.4byte	.LASF115
 6166 087e 01       		.byte	0x1
 6167 087f C305     		.2byte	0x5c3
 6168 0881 2A010000 		.4byte	0x12a
 6169 0885 02       		.uleb128 0x2
 6170 0886 91       		.byte	0x91
 6171 0887 74       		.sleb128 -12
 6172 0888 16       		.uleb128 0x16
 6173 0889 E00C0000 		.4byte	.LASF91
 6174 088d 01       		.byte	0x1
 6175 088e C405     		.2byte	0x5c4
 6176 0890 4B080000 		.4byte	0x84b
 6177 0894 02       		.uleb128 0x2
 6178 0895 91       		.byte	0x91
 6179 0896 70       		.sleb128 -16
 6180 0897 16       		.uleb128 0x16
 6181 0898 D3020000 		.4byte	.LASF121
 6182 089c 01       		.byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 192


 6183 089d C505     		.2byte	0x5c5
 6184 089f 35010000 		.4byte	0x135
 6185 08a3 02       		.uleb128 0x2
 6186 08a4 91       		.byte	0x91
 6187 08a5 6C       		.sleb128 -20
 6188 08a6 00       		.byte	0
 6189 08a7 17       		.uleb128 0x17
 6190 08a8 D20A0000 		.4byte	.LASF122
 6191 08ac 01       		.byte	0x1
 6192 08ad 0706     		.2byte	0x607
 6193 08af 00000000 		.4byte	.LFB76
 6194 08b3 64000000 		.4byte	.LFE76-.LFB76
 6195 08b7 01       		.uleb128 0x1
 6196 08b8 9C       		.byte	0x9c
 6197 08b9 CD080000 		.4byte	0x8cd
 6198 08bd 16       		.uleb128 0x16
 6199 08be 730A0000 		.4byte	.LASF88
 6200 08c2 01       		.byte	0x1
 6201 08c3 0906     		.2byte	0x609
 6202 08c5 2A010000 		.4byte	0x12a
 6203 08c9 02       		.uleb128 0x2
 6204 08ca 91       		.byte	0x91
 6205 08cb 74       		.sleb128 -12
 6206 08cc 00       		.byte	0
 6207 08cd 1A       		.uleb128 0x1a
 6208 08ce A2040000 		.4byte	.LASF123
 6209 08d2 01       		.byte	0x1
 6210 08d3 5606     		.2byte	0x656
 6211 08d5 00000000 		.4byte	.LFB77
 6212 08d9 1C000000 		.4byte	.LFE77-.LFB77
 6213 08dd 01       		.uleb128 0x1
 6214 08de 9C       		.byte	0x9c
 6215 08df 1B       		.uleb128 0x1b
 6216 08e0 0F040000 		.4byte	.LASF124
 6217 08e4 01       		.byte	0x1
 6218 08e5 6106     		.2byte	0x661
 6219 08e7 00000000 		.4byte	.LFB78
 6220 08eb 1C000000 		.4byte	.LFE78-.LFB78
 6221 08ef 01       		.uleb128 0x1
 6222 08f0 9C       		.byte	0x9c
 6223 08f1 14       		.uleb128 0x14
 6224 08f2 19090000 		.4byte	.LASF125
 6225 08f6 01       		.byte	0x1
 6226 08f7 8706     		.2byte	0x687
 6227 08f9 2A010000 		.4byte	0x12a
 6228 08fd 00000000 		.4byte	.LFB79
 6229 0901 FC000000 		.4byte	.LFE79-.LFB79
 6230 0905 01       		.uleb128 0x1
 6231 0906 9C       		.byte	0x9c
 6232 0907 2A090000 		.4byte	0x92a
 6233 090b 16       		.uleb128 0x16
 6234 090c E00C0000 		.4byte	.LASF91
 6235 0910 01       		.byte	0x1
 6236 0911 8906     		.2byte	0x689
 6237 0913 0D050000 		.4byte	0x50d
 6238 0917 02       		.uleb128 0x2
 6239 0918 91       		.byte	0x91
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 193


 6240 0919 70       		.sleb128 -16
 6241 091a 16       		.uleb128 0x16
 6242 091b 0C0C0000 		.4byte	.LASF97
 6243 091f 01       		.byte	0x1
 6244 0920 8A06     		.2byte	0x68a
 6245 0922 2A010000 		.4byte	0x12a
 6246 0926 02       		.uleb128 0x2
 6247 0927 91       		.byte	0x91
 6248 0928 74       		.sleb128 -12
 6249 0929 00       		.byte	0
 6250 092a 1C       		.uleb128 0x1c
 6251 092b 98070000 		.4byte	.LASF126
 6252 092f 01       		.byte	0x1
 6253 0930 E406     		.2byte	0x6e4
 6254 0932 40010000 		.4byte	0x140
 6255 0936 00000000 		.4byte	.LFB80
 6256 093a 1C000000 		.4byte	.LFE80-.LFB80
 6257 093e 01       		.uleb128 0x1
 6258 093f 9C       		.byte	0x9c
 6259 0940 54090000 		.4byte	0x954
 6260 0944 16       		.uleb128 0x16
 6261 0945 CB0A0000 		.4byte	.LASF127
 6262 0949 01       		.byte	0x1
 6263 094a E606     		.2byte	0x6e6
 6264 094c 40010000 		.4byte	0x140
 6265 0950 02       		.uleb128 0x2
 6266 0951 91       		.byte	0x91
 6267 0952 74       		.sleb128 -12
 6268 0953 00       		.byte	0
 6269 0954 1C       		.uleb128 0x1c
 6270 0955 77030000 		.4byte	.LASF128
 6271 0959 01       		.byte	0x1
 6272 095a F306     		.2byte	0x6f3
 6273 095c 40010000 		.4byte	0x140
 6274 0960 00000000 		.4byte	.LFB81
 6275 0964 20000000 		.4byte	.LFE81-.LFB81
 6276 0968 01       		.uleb128 0x1
 6277 0969 9C       		.byte	0x9c
 6278 096a 8D090000 		.4byte	0x98d
 6279 096e 16       		.uleb128 0x16
 6280 096f 730A0000 		.4byte	.LASF88
 6281 0973 01       		.byte	0x1
 6282 0974 F506     		.2byte	0x6f5
 6283 0976 40010000 		.4byte	0x140
 6284 097a 02       		.uleb128 0x2
 6285 097b 91       		.byte	0x91
 6286 097c 70       		.sleb128 -16
 6287 097d 16       		.uleb128 0x16
 6288 097e D3020000 		.4byte	.LASF121
 6289 0982 01       		.byte	0x1
 6290 0983 F606     		.2byte	0x6f6
 6291 0985 35010000 		.4byte	0x135
 6292 0989 02       		.uleb128 0x2
 6293 098a 91       		.byte	0x91
 6294 098b 74       		.sleb128 -12
 6295 098c 00       		.byte	0
 6296 098d 1D       		.uleb128 0x1d
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 194


 6297 098e 82000000 		.4byte	.LASF170
 6298 0992 01       		.byte	0x1
 6299 0993 1207     		.2byte	0x712
 6300 0995 35010000 		.4byte	0x135
 6301 0999 00000000 		.4byte	.LFB82
 6302 099d 14000000 		.4byte	.LFE82-.LFB82
 6303 09a1 01       		.uleb128 0x1
 6304 09a2 9C       		.byte	0x9c
 6305 09a3 14       		.uleb128 0x14
 6306 09a4 1C020000 		.4byte	.LASF129
 6307 09a8 01       		.byte	0x1
 6308 09a9 9307     		.2byte	0x793
 6309 09ab 2A010000 		.4byte	0x12a
 6310 09af 00000000 		.4byte	.LFB83
 6311 09b3 5C010000 		.4byte	.LFE83-.LFB83
 6312 09b7 01       		.uleb128 0x1
 6313 09b8 9C       		.byte	0x9c
 6314 09b9 1D0A0000 		.4byte	0xa1d
 6315 09bd 16       		.uleb128 0x16
 6316 09be E00C0000 		.4byte	.LASF91
 6317 09c2 01       		.byte	0x1
 6318 09c3 9507     		.2byte	0x795
 6319 09c5 0D050000 		.4byte	0x50d
 6320 09c9 02       		.uleb128 0x2
 6321 09ca 91       		.byte	0x91
 6322 09cb 68       		.sleb128 -24
 6323 09cc 16       		.uleb128 0x16
 6324 09cd F8080000 		.4byte	.LASF28
 6325 09d1 01       		.byte	0x1
 6326 09d2 9607     		.2byte	0x796
 6327 09d4 40010000 		.4byte	0x140
 6328 09d8 02       		.uleb128 0x2
 6329 09d9 91       		.byte	0x91
 6330 09da 64       		.sleb128 -28
 6331 09db 16       		.uleb128 0x16
 6332 09dc 68090000 		.4byte	.LASF130
 6333 09e0 01       		.byte	0x1
 6334 09e1 9707     		.2byte	0x797
 6335 09e3 2A010000 		.4byte	0x12a
 6336 09e7 02       		.uleb128 0x2
 6337 09e8 91       		.byte	0x91
 6338 09e9 74       		.sleb128 -12
 6339 09ea 18       		.uleb128 0x18
 6340 09eb 1C000000 		.4byte	.LBB8
 6341 09ef D4000000 		.4byte	.LBE8-.LBB8
 6342 09f3 16       		.uleb128 0x16
 6343 09f4 C6040000 		.4byte	.LASF99
 6344 09f8 01       		.byte	0x1
 6345 09f9 A607     		.2byte	0x7a6
 6346 09fb CE050000 		.4byte	0x5ce
 6347 09ff 02       		.uleb128 0x2
 6348 0a00 91       		.byte	0x91
 6349 0a01 70       		.sleb128 -16
 6350 0a02 18       		.uleb128 0x18
 6351 0a03 28000000 		.4byte	.LBB9
 6352 0a07 22000000 		.4byte	.LBE9-.LBB9
 6353 0a0b 16       		.uleb128 0x16
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 195


 6354 0a0c 12050000 		.4byte	.LASF131
 6355 0a10 01       		.byte	0x1
 6356 0a11 AA07     		.2byte	0x7aa
 6357 0a13 6E060000 		.4byte	0x66e
 6358 0a17 02       		.uleb128 0x2
 6359 0a18 91       		.byte	0x91
 6360 0a19 6C       		.sleb128 -20
 6361 0a1a 00       		.byte	0
 6362 0a1b 00       		.byte	0
 6363 0a1c 00       		.byte	0
 6364 0a1d 17       		.uleb128 0x17
 6365 0a1e A5080000 		.4byte	.LASF132
 6366 0a22 01       		.byte	0x1
 6367 0a23 9B08     		.2byte	0x89b
 6368 0a25 00000000 		.4byte	.LFB84
 6369 0a29 D8000000 		.4byte	.LFE84-.LFB84
 6370 0a2d 01       		.uleb128 0x1
 6371 0a2e 9C       		.byte	0x9c
 6372 0a2f C10A0000 		.4byte	0xac1
 6373 0a33 1E       		.uleb128 0x1e
 6374 0a34 1C000000 		.4byte	.LBB10
 6375 0a38 4E000000 		.4byte	.LBE10-.LBB10
 6376 0a3c 5F0A0000 		.4byte	0xa5f
 6377 0a40 16       		.uleb128 0x16
 6378 0a41 EF0A0000 		.4byte	.LASF133
 6379 0a45 01       		.byte	0x1
 6380 0a46 C408     		.2byte	0x8c4
 6381 0a48 CC0A0000 		.4byte	0xacc
 6382 0a4c 02       		.uleb128 0x2
 6383 0a4d 91       		.byte	0x91
 6384 0a4e 74       		.sleb128 -12
 6385 0a4f 16       		.uleb128 0x16
 6386 0a50 E6060000 		.4byte	.LASF134
 6387 0a54 01       		.byte	0x1
 6388 0a55 C408     		.2byte	0x8c4
 6389 0a57 C70A0000 		.4byte	0xac7
 6390 0a5b 02       		.uleb128 0x2
 6391 0a5c 91       		.byte	0x91
 6392 0a5d 70       		.sleb128 -16
 6393 0a5e 00       		.byte	0
 6394 0a5f 18       		.uleb128 0x18
 6395 0a60 6A000000 		.4byte	.LBB11
 6396 0a64 50000000 		.4byte	.LBE11-.LBB11
 6397 0a68 16       		.uleb128 0x16
 6398 0a69 7C0B0000 		.4byte	.LASF135
 6399 0a6d 01       		.byte	0x1
 6400 0a6e C808     		.2byte	0x8c8
 6401 0a70 35010000 		.4byte	0x135
 6402 0a74 02       		.uleb128 0x2
 6403 0a75 91       		.byte	0x91
 6404 0a76 6C       		.sleb128 -20
 6405 0a77 1F       		.uleb128 0x1f
 6406 0a78 FC030000 		.4byte	0x3fc
 6407 0a7c 70000000 		.4byte	.LBB12
 6408 0a80 0A000000 		.4byte	.LBE12-.LBB12
 6409 0a84 01       		.byte	0x1
 6410 0a85 C808     		.2byte	0x8c8
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 196


 6411 0a87 A60A0000 		.4byte	0xaa6
 6412 0a8b 20       		.uleb128 0x20
 6413 0a8c 0C040000 		.4byte	0x40c
 6414 0a90 02       		.uleb128 0x2
 6415 0a91 91       		.byte	0x91
 6416 0a92 64       		.sleb128 -28
 6417 0a93 18       		.uleb128 0x18
 6418 0a94 70000000 		.4byte	.LBB13
 6419 0a98 0A000000 		.4byte	.LBE13-.LBB13
 6420 0a9c 21       		.uleb128 0x21
 6421 0a9d 17040000 		.4byte	0x417
 6422 0aa1 02       		.uleb128 0x2
 6423 0aa2 91       		.byte	0x91
 6424 0aa3 63       		.sleb128 -29
 6425 0aa4 00       		.byte	0
 6426 0aa5 00       		.byte	0
 6427 0aa6 18       		.uleb128 0x18
 6428 0aa7 80000000 		.4byte	.LBB14
 6429 0aab 3A000000 		.4byte	.LBE14-.LBB14
 6430 0aaf 16       		.uleb128 0x16
 6431 0ab0 37000000 		.4byte	.LASF136
 6432 0ab4 01       		.byte	0x1
 6433 0ab5 C808     		.2byte	0x8c8
 6434 0ab7 D10A0000 		.4byte	0xad1
 6435 0abb 02       		.uleb128 0x2
 6436 0abc 91       		.byte	0x91
 6437 0abd 68       		.sleb128 -24
 6438 0abe 00       		.byte	0
 6439 0abf 00       		.byte	0
 6440 0ac0 00       		.byte	0
 6441 0ac1 06       		.uleb128 0x6
 6442 0ac2 04       		.byte	0x4
 6443 0ac3 C70A0000 		.4byte	0xac7
 6444 0ac7 07       		.uleb128 0x7
 6445 0ac8 E5000000 		.4byte	0xe5
 6446 0acc 07       		.uleb128 0x7
 6447 0acd C10A0000 		.4byte	0xac1
 6448 0ad1 07       		.uleb128 0x7
 6449 0ad2 6E060000 		.4byte	0x66e
 6450 0ad6 17       		.uleb128 0x17
 6451 0ad7 19050000 		.4byte	.LASF137
 6452 0adb 01       		.byte	0x1
 6453 0adc D608     		.2byte	0x8d6
 6454 0ade 00000000 		.4byte	.LFB85
 6455 0ae2 84000000 		.4byte	.LFE85-.LFB85
 6456 0ae6 01       		.uleb128 0x1
 6457 0ae7 9C       		.byte	0x9c
 6458 0ae8 1A0B0000 		.4byte	0xb1a
 6459 0aec 15       		.uleb128 0x15
 6460 0aed DD000000 		.4byte	.LASF138
 6461 0af1 01       		.byte	0x1
 6462 0af2 D608     		.2byte	0x8d6
 6463 0af4 D10A0000 		.4byte	0xad1
 6464 0af8 02       		.uleb128 0x2
 6465 0af9 91       		.byte	0x91
 6466 0afa 6C       		.sleb128 -20
 6467 0afb 15       		.uleb128 0x15
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 197


 6468 0afc D40B0000 		.4byte	.LASF139
 6469 0b00 01       		.byte	0x1
 6470 0b01 D608     		.2byte	0x8d6
 6471 0b03 CE050000 		.4byte	0x5ce
 6472 0b07 02       		.uleb128 0x2
 6473 0b08 91       		.byte	0x91
 6474 0b09 68       		.sleb128 -24
 6475 0b0a 16       		.uleb128 0x16
 6476 0b0b BE0C0000 		.4byte	.LASF96
 6477 0b0f 01       		.byte	0x1
 6478 0b10 D808     		.2byte	0x8d8
 6479 0b12 40010000 		.4byte	0x140
 6480 0b16 02       		.uleb128 0x2
 6481 0b17 91       		.byte	0x91
 6482 0b18 74       		.sleb128 -12
 6483 0b19 00       		.byte	0
 6484 0b1a 17       		.uleb128 0x17
 6485 0b1b 220B0000 		.4byte	.LASF140
 6486 0b1f 01       		.byte	0x1
 6487 0b20 1109     		.2byte	0x911
 6488 0b22 00000000 		.4byte	.LFB86
 6489 0b26 90000000 		.4byte	.LFE86-.LFB86
 6490 0b2a 01       		.uleb128 0x1
 6491 0b2b 9C       		.byte	0x9c
 6492 0b2c 6D0B0000 		.4byte	0xb6d
 6493 0b30 15       		.uleb128 0x15
 6494 0b31 DD000000 		.4byte	.LASF138
 6495 0b35 01       		.byte	0x1
 6496 0b36 1109     		.2byte	0x911
 6497 0b38 6E060000 		.4byte	0x66e
 6498 0b3c 02       		.uleb128 0x2
 6499 0b3d 91       		.byte	0x91
 6500 0b3e 6C       		.sleb128 -20
 6501 0b3f 15       		.uleb128 0x15
 6502 0b40 F8080000 		.4byte	.LASF28
 6503 0b44 01       		.byte	0x1
 6504 0b45 1109     		.2byte	0x911
 6505 0b47 CE050000 		.4byte	0x5ce
 6506 0b4b 02       		.uleb128 0x2
 6507 0b4c 91       		.byte	0x91
 6508 0b4d 68       		.sleb128 -24
 6509 0b4e 15       		.uleb128 0x15
 6510 0b4f D40B0000 		.4byte	.LASF139
 6511 0b53 01       		.byte	0x1
 6512 0b54 1109     		.2byte	0x911
 6513 0b56 CE050000 		.4byte	0x5ce
 6514 0b5a 02       		.uleb128 0x2
 6515 0b5b 91       		.byte	0x91
 6516 0b5c 64       		.sleb128 -28
 6517 0b5d 16       		.uleb128 0x16
 6518 0b5e BE0C0000 		.4byte	.LASF96
 6519 0b62 01       		.byte	0x1
 6520 0b63 1309     		.2byte	0x913
 6521 0b65 40010000 		.4byte	0x140
 6522 0b69 02       		.uleb128 0x2
 6523 0b6a 91       		.byte	0x91
 6524 0b6b 74       		.sleb128 -12
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 198


 6525 0b6c 00       		.byte	0
 6526 0b6d 14       		.uleb128 0x14
 6527 0b6e 8E050000 		.4byte	.LASF141
 6528 0b72 01       		.byte	0x1
 6529 0b73 A109     		.2byte	0x9a1
 6530 0b75 2A010000 		.4byte	0x12a
 6531 0b79 00000000 		.4byte	.LFB87
 6532 0b7d A8000000 		.4byte	.LFE87-.LFB87
 6533 0b81 01       		.uleb128 0x1
 6534 0b82 9C       		.byte	0x9c
 6535 0b83 B50B0000 		.4byte	0xbb5
 6536 0b87 15       		.uleb128 0x15
 6537 0b88 DD000000 		.4byte	.LASF138
 6538 0b8c 01       		.byte	0x1
 6539 0b8d A109     		.2byte	0x9a1
 6540 0b8f C00B0000 		.4byte	0xbc0
 6541 0b93 02       		.uleb128 0x2
 6542 0b94 91       		.byte	0x91
 6543 0b95 6C       		.sleb128 -20
 6544 0b96 16       		.uleb128 0x16
 6545 0b97 1B030000 		.4byte	.LASF142
 6546 0b9b 01       		.byte	0x1
 6547 0b9c A309     		.2byte	0x9a3
 6548 0b9e 0D050000 		.4byte	0x50d
 6549 0ba2 02       		.uleb128 0x2
 6550 0ba3 91       		.byte	0x91
 6551 0ba4 70       		.sleb128 -16
 6552 0ba5 16       		.uleb128 0x16
 6553 0ba6 730A0000 		.4byte	.LASF88
 6554 0baa 01       		.byte	0x1
 6555 0bab A409     		.2byte	0x9a4
 6556 0bad 2A010000 		.4byte	0x12a
 6557 0bb1 02       		.uleb128 0x2
 6558 0bb2 91       		.byte	0x91
 6559 0bb3 74       		.sleb128 -12
 6560 0bb4 00       		.byte	0
 6561 0bb5 06       		.uleb128 0x6
 6562 0bb6 04       		.byte	0x4
 6563 0bb7 BB0B0000 		.4byte	0xbbb
 6564 0bbb 07       		.uleb128 0x7
 6565 0bbc 1E020000 		.4byte	0x21e
 6566 0bc0 07       		.uleb128 0x7
 6567 0bc1 B50B0000 		.4byte	0xbb5
 6568 0bc5 14       		.uleb128 0x14
 6569 0bc6 410B0000 		.4byte	.LASF143
 6570 0bca 01       		.byte	0x1
 6571 0bcb E509     		.2byte	0x9e5
 6572 0bcd 2A010000 		.4byte	0x12a
 6573 0bd1 00000000 		.4byte	.LFB88
 6574 0bd5 90000000 		.4byte	.LFE88-.LFB88
 6575 0bd9 01       		.uleb128 0x1
 6576 0bda 9C       		.byte	0x9c
 6577 0bdb 1C0C0000 		.4byte	0xc1c
 6578 0bdf 15       		.uleb128 0x15
 6579 0be0 410D0000 		.4byte	.LASF144
 6580 0be4 01       		.byte	0x1
 6581 0be5 E509     		.2byte	0x9e5
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 199


 6582 0be7 18020000 		.4byte	0x218
 6583 0beb 02       		.uleb128 0x2
 6584 0bec 91       		.byte	0x91
 6585 0bed 6C       		.sleb128 -20
 6586 0bee 15       		.uleb128 0x15
 6587 0bef F8080000 		.4byte	.LASF28
 6588 0bf3 01       		.byte	0x1
 6589 0bf4 E509     		.2byte	0x9e5
 6590 0bf6 CE050000 		.4byte	0x5ce
 6591 0bfa 02       		.uleb128 0x2
 6592 0bfb 91       		.byte	0x91
 6593 0bfc 68       		.sleb128 -24
 6594 0bfd 16       		.uleb128 0x16
 6595 0bfe 1B030000 		.4byte	.LASF142
 6596 0c02 01       		.byte	0x1
 6597 0c03 E709     		.2byte	0x9e7
 6598 0c05 0D050000 		.4byte	0x50d
 6599 0c09 02       		.uleb128 0x2
 6600 0c0a 91       		.byte	0x91
 6601 0c0b 70       		.sleb128 -16
 6602 0c0c 16       		.uleb128 0x16
 6603 0c0d 730A0000 		.4byte	.LASF88
 6604 0c11 01       		.byte	0x1
 6605 0c12 E809     		.2byte	0x9e8
 6606 0c14 2A010000 		.4byte	0x12a
 6607 0c18 02       		.uleb128 0x2
 6608 0c19 91       		.byte	0x91
 6609 0c1a 74       		.sleb128 -12
 6610 0c1b 00       		.byte	0
 6611 0c1c 22       		.uleb128 0x22
 6612 0c1d ED010000 		.4byte	.LASF145
 6613 0c21 01       		.byte	0x1
 6614 0c22 120A     		.2byte	0xa12
 6615 0c24 00000000 		.4byte	.LFB89
 6616 0c28 2C000000 		.4byte	.LFE89-.LFB89
 6617 0c2c 01       		.uleb128 0x1
 6618 0c2d 9C       		.byte	0x9c
 6619 0c2e 420C0000 		.4byte	0xc42
 6620 0c32 15       		.uleb128 0x15
 6621 0c33 75070000 		.4byte	.LASF146
 6622 0c37 01       		.byte	0x1
 6623 0c38 120A     		.2byte	0xa12
 6624 0c3a 480C0000 		.4byte	0xc48
 6625 0c3e 02       		.uleb128 0x2
 6626 0c3f 91       		.byte	0x91
 6627 0c40 74       		.sleb128 -12
 6628 0c41 00       		.byte	0
 6629 0c42 06       		.uleb128 0x6
 6630 0c43 04       		.byte	0x4
 6631 0c44 C5020000 		.4byte	0x2c5
 6632 0c48 07       		.uleb128 0x7
 6633 0c49 420C0000 		.4byte	0xc42
 6634 0c4d 14       		.uleb128 0x14
 6635 0c4e B3090000 		.4byte	.LASF147
 6636 0c52 01       		.byte	0x1
 6637 0c53 1A0A     		.2byte	0xa1a
 6638 0c55 2A010000 		.4byte	0x12a
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 200


 6639 0c59 00000000 		.4byte	.LFB90
 6640 0c5d 88000000 		.4byte	.LFE90-.LFB90
 6641 0c61 01       		.uleb128 0x1
 6642 0c62 9C       		.byte	0x9c
 6643 0c63 AE0C0000 		.4byte	0xcae
 6644 0c67 15       		.uleb128 0x15
 6645 0c68 75070000 		.4byte	.LASF146
 6646 0c6c 01       		.byte	0x1
 6647 0c6d 1A0A     		.2byte	0xa1a
 6648 0c6f 480C0000 		.4byte	0xc48
 6649 0c73 02       		.uleb128 0x2
 6650 0c74 91       		.byte	0x91
 6651 0c75 6C       		.sleb128 -20
 6652 0c76 15       		.uleb128 0x15
 6653 0c77 6E0B0000 		.4byte	.LASF148
 6654 0c7b 01       		.byte	0x1
 6655 0c7c 1A0A     		.2byte	0xa1a
 6656 0c7e C9050000 		.4byte	0x5c9
 6657 0c82 02       		.uleb128 0x2
 6658 0c83 91       		.byte	0x91
 6659 0c84 68       		.sleb128 -24
 6660 0c85 16       		.uleb128 0x16
 6661 0c86 730A0000 		.4byte	.LASF88
 6662 0c8a 01       		.byte	0x1
 6663 0c8b 1C0A     		.2byte	0xa1c
 6664 0c8d 2A010000 		.4byte	0x12a
 6665 0c91 02       		.uleb128 0x2
 6666 0c92 91       		.byte	0x91
 6667 0c93 74       		.sleb128 -12
 6668 0c94 18       		.uleb128 0x18
 6669 0c95 0E000000 		.4byte	.LBB15
 6670 0c99 64000000 		.4byte	.LBE15-.LBB15
 6671 0c9d 16       		.uleb128 0x16
 6672 0c9e C6040000 		.4byte	.LASF99
 6673 0ca2 01       		.byte	0x1
 6674 0ca3 240A     		.2byte	0xa24
 6675 0ca5 CE050000 		.4byte	0x5ce
 6676 0ca9 02       		.uleb128 0x2
 6677 0caa 91       		.byte	0x91
 6678 0cab 70       		.sleb128 -16
 6679 0cac 00       		.byte	0
 6680 0cad 00       		.byte	0
 6681 0cae 1B       		.uleb128 0x1b
 6682 0caf 840A0000 		.4byte	.LASF149
 6683 0cb3 01       		.byte	0x1
 6684 0cb4 4B0A     		.2byte	0xa4b
 6685 0cb6 00000000 		.4byte	.LFB91
 6686 0cba 18000000 		.4byte	.LFE91-.LFB91
 6687 0cbe 01       		.uleb128 0x1
 6688 0cbf 9C       		.byte	0x9c
 6689 0cc0 23       		.uleb128 0x23
 6690 0cc1 FA050000 		.4byte	.LASF150
 6691 0cc5 01       		.byte	0x1
 6692 0cc6 820A     		.2byte	0xa82
 6693 0cc8 00000000 		.4byte	.LFB92
 6694 0ccc 0E000000 		.4byte	.LFE92-.LFB92
 6695 0cd0 01       		.uleb128 0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 201


 6696 0cd1 9C       		.byte	0x9c
 6697 0cd2 E60C0000 		.4byte	0xce6
 6698 0cd6 15       		.uleb128 0x15
 6699 0cd7 EB080000 		.4byte	.LASF84
 6700 0cdb 01       		.byte	0x1
 6701 0cdc 820A     		.2byte	0xa82
 6702 0cde B0000000 		.4byte	0xb0
 6703 0ce2 02       		.uleb128 0x2
 6704 0ce3 91       		.byte	0x91
 6705 0ce4 74       		.sleb128 -12
 6706 0ce5 00       		.byte	0
 6707 0ce6 23       		.uleb128 0x23
 6708 0ce7 48080000 		.4byte	.LASF151
 6709 0ceb 01       		.byte	0x1
 6710 0cec 110B     		.2byte	0xb11
 6711 0cee 00000000 		.4byte	.LFB93
 6712 0cf2 A8000000 		.4byte	.LFE93-.LFB93
 6713 0cf6 01       		.uleb128 0x1
 6714 0cf7 9C       		.byte	0x9c
 6715 0cf8 550D0000 		.4byte	0xd55
 6716 0cfc 15       		.uleb128 0x15
 6717 0cfd E00C0000 		.4byte	.LASF91
 6718 0d01 01       		.byte	0x1
 6719 0d02 110B     		.2byte	0xb11
 6720 0d04 4B080000 		.4byte	0x84b
 6721 0d08 02       		.uleb128 0x2
 6722 0d09 91       		.byte	0x91
 6723 0d0a 6C       		.sleb128 -20
 6724 0d0b 15       		.uleb128 0x15
 6725 0d0c E9040000 		.4byte	.LASF82
 6726 0d10 01       		.byte	0x1
 6727 0d11 110B     		.2byte	0xb11
 6728 0d13 0C030000 		.4byte	0x30c
 6729 0d17 02       		.uleb128 0x2
 6730 0d18 91       		.byte	0x91
 6731 0d19 68       		.sleb128 -24
 6732 0d1a 15       		.uleb128 0x15
 6733 0d1b 2C000000 		.4byte	.LASF72
 6734 0d1f 01       		.byte	0x1
 6735 0d20 110B     		.2byte	0xb11
 6736 0d22 35010000 		.4byte	0x135
 6737 0d26 02       		.uleb128 0x2
 6738 0d27 91       		.byte	0x91
 6739 0d28 64       		.sleb128 -28
 6740 0d29 15       		.uleb128 0x15
 6741 0d2a 510C0000 		.4byte	.LASF87
 6742 0d2e 01       		.byte	0x1
 6743 0d2f 110B     		.2byte	0xb11
 6744 0d31 08050000 		.4byte	0x508
 6745 0d35 02       		.uleb128 0x2
 6746 0d36 91       		.byte	0x91
 6747 0d37 60       		.sleb128 -32
 6748 0d38 15       		.uleb128 0x15
 6749 0d39 2A030000 		.4byte	.LASF83
 6750 0d3d 01       		.byte	0x1
 6751 0d3e 110B     		.2byte	0xb11
 6752 0d40 E3040000 		.4byte	0x4e3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 202


 6753 0d44 02       		.uleb128 0x2
 6754 0d45 91       		.byte	0x91
 6755 0d46 00       		.sleb128 0
 6756 0d47 24       		.uleb128 0x24
 6757 0d48 7800     		.ascii	"x\000"
 6758 0d4a 01       		.byte	0x1
 6759 0d4b 130B     		.2byte	0xb13
 6760 0d4d 35010000 		.4byte	0x135
 6761 0d51 02       		.uleb128 0x2
 6762 0d52 91       		.byte	0x91
 6763 0d53 74       		.sleb128 -12
 6764 0d54 00       		.byte	0
 6765 0d55 23       		.uleb128 0x23
 6766 0d56 2A0D0000 		.4byte	.LASF152
 6767 0d5a 01       		.byte	0x1
 6768 0d5b B60B     		.2byte	0xbb6
 6769 0d5d 00000000 		.4byte	.LFB94
 6770 0d61 80000000 		.4byte	.LFE94-.LFB94
 6771 0d65 01       		.uleb128 0x1
 6772 0d66 9C       		.byte	0x9c
 6773 0d67 7B0D0000 		.4byte	0xd7b
 6774 0d6b 16       		.uleb128 0x16
 6775 0d6c 2C000000 		.4byte	.LASF72
 6776 0d70 01       		.byte	0x1
 6777 0d71 B80B     		.2byte	0xbb8
 6778 0d73 35010000 		.4byte	0x135
 6779 0d77 02       		.uleb128 0x2
 6780 0d78 91       		.byte	0x91
 6781 0d79 74       		.sleb128 -12
 6782 0d7a 00       		.byte	0
 6783 0d7b 23       		.uleb128 0x23
 6784 0d7c 5F0D0000 		.4byte	.LASF153
 6785 0d80 01       		.byte	0x1
 6786 0d81 D60B     		.2byte	0xbd6
 6787 0d83 00000000 		.4byte	.LFB95
 6788 0d87 78000000 		.4byte	.LFE95-.LFB95
 6789 0d8b 01       		.uleb128 0x1
 6790 0d8c 9C       		.byte	0x9c
 6791 0d8d C40D0000 		.4byte	0xdc4
 6792 0d91 18       		.uleb128 0x18
 6793 0d92 06000000 		.4byte	.LBB16
 6794 0d96 5C000000 		.4byte	.LBE16-.LBB16
 6795 0d9a 16       		.uleb128 0x16
 6796 0d9b 0F060000 		.4byte	.LASF154
 6797 0d9f 01       		.byte	0x1
 6798 0da0 DA0B     		.2byte	0xbda
 6799 0da2 2A010000 		.4byte	0x12a
 6800 0da6 02       		.uleb128 0x2
 6801 0da7 91       		.byte	0x91
 6802 0da8 74       		.sleb128 -12
 6803 0da9 18       		.uleb128 0x18
 6804 0daa 26000000 		.4byte	.LBB17
 6805 0dae 34000000 		.4byte	.LBE17-.LBB17
 6806 0db2 16       		.uleb128 0x16
 6807 0db3 E00C0000 		.4byte	.LASF91
 6808 0db7 01       		.byte	0x1
 6809 0db8 E80B     		.2byte	0xbe8
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 203


 6810 0dba 0D050000 		.4byte	0x50d
 6811 0dbe 02       		.uleb128 0x2
 6812 0dbf 91       		.byte	0x91
 6813 0dc0 70       		.sleb128 -16
 6814 0dc1 00       		.byte	0
 6815 0dc2 00       		.byte	0
 6816 0dc3 00       		.byte	0
 6817 0dc4 23       		.uleb128 0x23
 6818 0dc5 5A0C0000 		.4byte	.LASF155
 6819 0dc9 01       		.byte	0x1
 6820 0dca FF0B     		.2byte	0xbff
 6821 0dcc 00000000 		.4byte	.LFB96
 6822 0dd0 6C000000 		.4byte	.LFE96-.LFB96
 6823 0dd4 01       		.uleb128 0x1
 6824 0dd5 9C       		.byte	0x9c
 6825 0dd6 EA0D0000 		.4byte	0xdea
 6826 0dda 15       		.uleb128 0x15
 6827 0ddb BE0C0000 		.4byte	.LASF96
 6828 0ddf 01       		.byte	0x1
 6829 0de0 FF0B     		.2byte	0xbff
 6830 0de2 CE050000 		.4byte	0x5ce
 6831 0de6 02       		.uleb128 0x2
 6832 0de7 91       		.byte	0x91
 6833 0de8 74       		.sleb128 -12
 6834 0de9 00       		.byte	0
 6835 0dea 25       		.uleb128 0x25
 6836 0deb 91020000 		.4byte	.LASF157
 6837 0def 01       		.byte	0x1
 6838 0df0 1D0C     		.2byte	0xc1d
 6839 0df2 0D050000 		.4byte	0x50d
 6840 0df6 00000000 		.4byte	.LFB97
 6841 0dfa 6C000000 		.4byte	.LFE97-.LFB97
 6842 0dfe 01       		.uleb128 0x1
 6843 0dff 9C       		.byte	0x9c
 6844 0e00 4B0E0000 		.4byte	0xe4b
 6845 0e04 15       		.uleb128 0x15
 6846 0e05 2A030000 		.4byte	.LASF83
 6847 0e09 01       		.byte	0x1
 6848 0e0a 1D0C     		.2byte	0xc1d
 6849 0e0c E3040000 		.4byte	0x4e3
 6850 0e10 02       		.uleb128 0x2
 6851 0e11 91       		.byte	0x91
 6852 0e12 6E       		.sleb128 -18
 6853 0e13 15       		.uleb128 0x15
 6854 0e14 020D0000 		.4byte	.LASF86
 6855 0e18 01       		.byte	0x1
 6856 0e19 1D0C     		.2byte	0xc1d
 6857 0e1b F8040000 		.4byte	0x4f8
 6858 0e1f 02       		.uleb128 0x2
 6859 0e20 91       		.byte	0x91
 6860 0e21 68       		.sleb128 -24
 6861 0e22 16       		.uleb128 0x16
 6862 0e23 59060000 		.4byte	.LASF89
 6863 0e27 01       		.byte	0x1
 6864 0e28 1F0C     		.2byte	0xc1f
 6865 0e2a 0D050000 		.4byte	0x50d
 6866 0e2e 02       		.uleb128 0x2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 204


 6867 0e2f 91       		.byte	0x91
 6868 0e30 74       		.sleb128 -12
 6869 0e31 18       		.uleb128 0x18
 6870 0e32 0C000000 		.4byte	.LBB18
 6871 0e36 40000000 		.4byte	.LBE18-.LBB18
 6872 0e3a 16       		.uleb128 0x16
 6873 0e3b 86090000 		.4byte	.LASF73
 6874 0e3f 01       		.byte	0x1
 6875 0e40 3B0C     		.2byte	0xc3b
 6876 0e42 11030000 		.4byte	0x311
 6877 0e46 02       		.uleb128 0x2
 6878 0e47 91       		.byte	0x91
 6879 0e48 70       		.sleb128 -16
 6880 0e49 00       		.byte	0
 6881 0e4a 00       		.byte	0
 6882 0e4b 19       		.uleb128 0x19
 6883 0e4c 360C0000 		.4byte	.LASF158
 6884 0e50 01       		.byte	0x1
 6885 0e51 BF0C     		.2byte	0xcbf
 6886 0e53 CF000000 		.4byte	0xcf
 6887 0e57 00000000 		.4byte	.LFB98
 6888 0e5b 36000000 		.4byte	.LFE98-.LFB98
 6889 0e5f 01       		.uleb128 0x1
 6890 0e60 9C       		.byte	0x9c
 6891 0e61 840E0000 		.4byte	0xe84
 6892 0e65 15       		.uleb128 0x15
 6893 0e66 8F040000 		.4byte	.LASF159
 6894 0e6a 01       		.byte	0x1
 6895 0e6b BF0C     		.2byte	0xcbf
 6896 0e6d 840E0000 		.4byte	0xe84
 6897 0e71 02       		.uleb128 0x2
 6898 0e72 91       		.byte	0x91
 6899 0e73 6C       		.sleb128 -20
 6900 0e74 16       		.uleb128 0x16
 6901 0e75 F0040000 		.4byte	.LASF160
 6902 0e79 01       		.byte	0x1
 6903 0e7a C10C     		.2byte	0xcc1
 6904 0e7c E5000000 		.4byte	0xe5
 6905 0e80 02       		.uleb128 0x2
 6906 0e81 91       		.byte	0x91
 6907 0e82 74       		.sleb128 -12
 6908 0e83 00       		.byte	0
 6909 0e84 06       		.uleb128 0x6
 6910 0e85 04       		.byte	0x4
 6911 0e86 8A0E0000 		.4byte	0xe8a
 6912 0e8a 07       		.uleb128 0x7
 6913 0e8b C4000000 		.4byte	0xc4
 6914 0e8f 14       		.uleb128 0x14
 6915 0e90 1F040000 		.4byte	.LASF161
 6916 0e94 01       		.byte	0x1
 6917 0e95 D30C     		.2byte	0xcd3
 6918 0e97 35010000 		.4byte	0x135
 6919 0e9b 00000000 		.4byte	.LFB99
 6920 0e9f 38000000 		.4byte	.LFE99-.LFB99
 6921 0ea3 01       		.uleb128 0x1
 6922 0ea4 9C       		.byte	0x9c
 6923 0ea5 E60E0000 		.4byte	0xee6
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 205


 6924 0ea9 15       		.uleb128 0x15
 6925 0eaa 39080000 		.4byte	.LASF104
 6926 0eae 01       		.byte	0x1
 6927 0eaf D30C     		.2byte	0xcd3
 6928 0eb1 29020000 		.4byte	0x229
 6929 0eb5 02       		.uleb128 0x2
 6930 0eb6 91       		.byte	0x91
 6931 0eb7 64       		.sleb128 -28
 6932 0eb8 16       		.uleb128 0x16
 6933 0eb9 E00C0000 		.4byte	.LASF91
 6934 0ebd 01       		.byte	0x1
 6935 0ebe D50C     		.2byte	0xcd5
 6936 0ec0 0D050000 		.4byte	0x50d
 6937 0ec4 02       		.uleb128 0x2
 6938 0ec5 91       		.byte	0x91
 6939 0ec6 74       		.sleb128 -12
 6940 0ec7 16       		.uleb128 0x16
 6941 0ec8 B50A0000 		.4byte	.LASF162
 6942 0ecc 01       		.byte	0x1
 6943 0ecd D60C     		.2byte	0xcd6
 6944 0ecf 4B010000 		.4byte	0x14b
 6945 0ed3 02       		.uleb128 0x2
 6946 0ed4 91       		.byte	0x91
 6947 0ed5 70       		.sleb128 -16
 6948 0ed6 16       		.uleb128 0x16
 6949 0ed7 B6020000 		.4byte	.LASF108
 6950 0edb 01       		.byte	0x1
 6951 0edc D70C     		.2byte	0xcd7
 6952 0ede 35010000 		.4byte	0x135
 6953 0ee2 02       		.uleb128 0x2
 6954 0ee3 91       		.byte	0x91
 6955 0ee4 6C       		.sleb128 -20
 6956 0ee5 00       		.byte	0
 6957 0ee6 23       		.uleb128 0x23
 6958 0ee7 E90B0000 		.4byte	.LASF163
 6959 0eeb 01       		.byte	0x1
 6960 0eec EF0C     		.2byte	0xcef
 6961 0eee 00000000 		.4byte	.LFB100
 6962 0ef2 20000000 		.4byte	.LFE100-.LFB100
 6963 0ef6 01       		.uleb128 0x1
 6964 0ef7 9C       		.byte	0x9c
 6965 0ef8 0C0F0000 		.4byte	0xf0c
 6966 0efc 15       		.uleb128 0x15
 6967 0efd E00C0000 		.4byte	.LASF91
 6968 0f01 01       		.byte	0x1
 6969 0f02 EF0C     		.2byte	0xcef
 6970 0f04 0D050000 		.4byte	0x50d
 6971 0f08 02       		.uleb128 0x2
 6972 0f09 91       		.byte	0x91
 6973 0f0a 74       		.sleb128 -12
 6974 0f0b 00       		.byte	0
 6975 0f0c 26       		.uleb128 0x26
 6976 0f0d F3060000 		.4byte	.LASF164
 6977 0f11 01       		.byte	0x1
 6978 0f12 130D     		.2byte	0xd13
 6979 0f14 00000000 		.4byte	.LFB101
 6980 0f18 48000000 		.4byte	.LFE101-.LFB101
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 206


 6981 0f1c 01       		.uleb128 0x1
 6982 0f1d 9C       		.byte	0x9c
 6983 0f1e 320F0000 		.4byte	0xf32
 6984 0f22 16       		.uleb128 0x16
 6985 0f23 E00C0000 		.4byte	.LASF91
 6986 0f27 01       		.byte	0x1
 6987 0f28 150D     		.2byte	0xd15
 6988 0f2a 0D050000 		.4byte	0x50d
 6989 0f2e 02       		.uleb128 0x2
 6990 0f2f 91       		.byte	0x91
 6991 0f30 74       		.sleb128 -12
 6992 0f31 00       		.byte	0
 6993 0f32 1C       		.uleb128 0x1c
 6994 0f33 1C0C0000 		.4byte	.LASF165
 6995 0f37 01       		.byte	0x1
 6996 0f38 2D0D     		.2byte	0xd2d
 6997 0f3a 29020000 		.4byte	0x229
 6998 0f3e 00000000 		.4byte	.LFB102
 6999 0f42 1C000000 		.4byte	.LFE102-.LFB102
 7000 0f46 01       		.uleb128 0x1
 7001 0f47 9C       		.byte	0x9c
 7002 0f48 5C0F0000 		.4byte	0xf5c
 7003 0f4c 16       		.uleb128 0x16
 7004 0f4d 730A0000 		.4byte	.LASF88
 7005 0f51 01       		.byte	0x1
 7006 0f52 2F0D     		.2byte	0xd2f
 7007 0f54 29020000 		.4byte	0x229
 7008 0f58 02       		.uleb128 0x2
 7009 0f59 91       		.byte	0x91
 7010 0f5a 74       		.sleb128 -12
 7011 0f5b 00       		.byte	0
 7012 0f5c 17       		.uleb128 0x17
 7013 0f5d 03010000 		.4byte	.LASF166
 7014 0f61 01       		.byte	0x1
 7015 0f62 5A0D     		.2byte	0xd5a
 7016 0f64 00000000 		.4byte	.LFB103
 7017 0f68 EC000000 		.4byte	.LFE103-.LFB103
 7018 0f6c 01       		.uleb128 0x1
 7019 0f6d 9C       		.byte	0x9c
 7020 0f6e 910F0000 		.4byte	0xf91
 7021 0f72 15       		.uleb128 0x15
 7022 0f73 78090000 		.4byte	.LASF167
 7023 0f77 01       		.byte	0x1
 7024 0f78 5A0D     		.2byte	0xd5a
 7025 0f7a 11080000 		.4byte	0x811
 7026 0f7e 02       		.uleb128 0x2
 7027 0f7f 91       		.byte	0x91
 7028 0f80 6C       		.sleb128 -20
 7029 0f81 16       		.uleb128 0x16
 7030 0f82 E00C0000 		.4byte	.LASF91
 7031 0f86 01       		.byte	0x1
 7032 0f87 5C0D     		.2byte	0xd5c
 7033 0f89 4B080000 		.4byte	0x84b
 7034 0f8d 02       		.uleb128 0x2
 7035 0f8e 91       		.byte	0x91
 7036 0f8f 74       		.sleb128 -12
 7037 0f90 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 207


 7038 0f91 14       		.uleb128 0x14
 7039 0f92 76050000 		.4byte	.LASF168
 7040 0f96 01       		.byte	0x1
 7041 0f97 9C0D     		.2byte	0xd9c
 7042 0f99 2A010000 		.4byte	0x12a
 7043 0f9d 00000000 		.4byte	.LFB104
 7044 0fa1 C8000000 		.4byte	.LFE104-.LFB104
 7045 0fa5 01       		.uleb128 0x1
 7046 0fa6 9C       		.byte	0x9c
 7047 0fa7 D90F0000 		.4byte	0xfd9
 7048 0fab 15       		.uleb128 0x15
 7049 0fac 78090000 		.4byte	.LASF167
 7050 0fb0 01       		.byte	0x1
 7051 0fb1 9C0D     		.2byte	0xd9c
 7052 0fb3 11080000 		.4byte	0x811
 7053 0fb7 02       		.uleb128 0x2
 7054 0fb8 91       		.byte	0x91
 7055 0fb9 6C       		.sleb128 -20
 7056 0fba 16       		.uleb128 0x16
 7057 0fbb E00C0000 		.4byte	.LASF91
 7058 0fbf 01       		.byte	0x1
 7059 0fc0 9E0D     		.2byte	0xd9e
 7060 0fc2 4B080000 		.4byte	0x84b
 7061 0fc6 02       		.uleb128 0x2
 7062 0fc7 91       		.byte	0x91
 7063 0fc8 70       		.sleb128 -16
 7064 0fc9 16       		.uleb128 0x16
 7065 0fca 730A0000 		.4byte	.LASF88
 7066 0fce 01       		.byte	0x1
 7067 0fcf 9F0D     		.2byte	0xd9f
 7068 0fd1 2A010000 		.4byte	0x12a
 7069 0fd5 02       		.uleb128 0x2
 7070 0fd6 91       		.byte	0x91
 7071 0fd7 74       		.sleb128 -12
 7072 0fd8 00       		.byte	0
 7073 0fd9 1C       		.uleb128 0x1c
 7074 0fda D6070000 		.4byte	.LASF169
 7075 0fde 01       		.byte	0x1
 7076 0fdf 1C0F     		.2byte	0xf1c
 7077 0fe1 40010000 		.4byte	0x140
 7078 0fe5 00000000 		.4byte	.LFB105
 7079 0fe9 30000000 		.4byte	.LFE105-.LFB105
 7080 0fed 01       		.uleb128 0x1
 7081 0fee 9C       		.byte	0x9c
 7082 0fef 03100000 		.4byte	0x1003
 7083 0ff3 16       		.uleb128 0x16
 7084 0ff4 B6020000 		.4byte	.LASF108
 7085 0ff8 01       		.byte	0x1
 7086 0ff9 1E0F     		.2byte	0xf1e
 7087 0ffb 40010000 		.4byte	0x140
 7088 0fff 02       		.uleb128 0x2
 7089 1000 91       		.byte	0x91
 7090 1001 74       		.sleb128 -12
 7091 1002 00       		.byte	0
 7092 1003 1D       		.uleb128 0x1d
 7093 1004 3A050000 		.4byte	.LASF171
 7094 1008 01       		.byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 208


 7095 1009 2C0F     		.2byte	0xf2c
 7096 100b B0000000 		.4byte	0xb0
 7097 100f 00000000 		.4byte	.LFB106
 7098 1013 28000000 		.4byte	.LFE106-.LFB106
 7099 1017 01       		.uleb128 0x1
 7100 1018 9C       		.byte	0x9c
 7101 1019 14       		.uleb128 0x14
 7102 101a 1C060000 		.4byte	.LASF172
 7103 101e 01       		.byte	0x1
 7104 101f 3D0F     		.2byte	0xf3d
 7105 1021 E5000000 		.4byte	0xe5
 7106 1025 00000000 		.4byte	.LFB107
 7107 1029 D8000000 		.4byte	.LFE107-.LFB107
 7108 102d 01       		.uleb128 0x1
 7109 102e 9C       		.byte	0x9c
 7110 102f 70100000 		.4byte	0x1070
 7111 1033 15       		.uleb128 0x15
 7112 1034 37030000 		.4byte	.LASF173
 7113 1038 01       		.byte	0x1
 7114 1039 3D0F     		.2byte	0xf3d
 7115 103b 2A010000 		.4byte	0x12a
 7116 103f 02       		.uleb128 0x2
 7117 1040 91       		.byte	0x91
 7118 1041 6C       		.sleb128 -20
 7119 1042 15       		.uleb128 0x15
 7120 1043 D40B0000 		.4byte	.LASF139
 7121 1047 01       		.byte	0x1
 7122 1048 3D0F     		.2byte	0xf3d
 7123 104a 40010000 		.4byte	0x140
 7124 104e 02       		.uleb128 0x2
 7125 104f 91       		.byte	0x91
 7126 1050 68       		.sleb128 -24
 7127 1051 16       		.uleb128 0x16
 7128 1052 BE0C0000 		.4byte	.LASF96
 7129 1056 01       		.byte	0x1
 7130 1057 3F0F     		.2byte	0xf3f
 7131 1059 40010000 		.4byte	0x140
 7132 105d 02       		.uleb128 0x2
 7133 105e 91       		.byte	0x91
 7134 105f 74       		.sleb128 -12
 7135 1060 16       		.uleb128 0x16
 7136 1061 7F0D0000 		.4byte	.LASF174
 7137 1065 01       		.byte	0x1
 7138 1066 400F     		.2byte	0xf40
 7139 1068 E5000000 		.4byte	0xe5
 7140 106c 02       		.uleb128 0x2
 7141 106d 91       		.byte	0x91
 7142 106e 70       		.sleb128 -16
 7143 106f 00       		.byte	0
 7144 1070 14       		.uleb128 0x14
 7145 1071 D1050000 		.4byte	.LASF175
 7146 1075 01       		.byte	0x1
 7147 1076 AE0F     		.2byte	0xfae
 7148 1078 2A010000 		.4byte	0x12a
 7149 107c 00000000 		.4byte	.LFB108
 7150 1080 FC000000 		.4byte	.LFE108-.LFB108
 7151 1084 01       		.uleb128 0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 209


 7152 1085 9C       		.byte	0x9c
 7153 1086 E5100000 		.4byte	0x10e5
 7154 108a 15       		.uleb128 0x15
 7155 108b A6030000 		.4byte	.LASF176
 7156 108f 01       		.byte	0x1
 7157 1090 AE0F     		.2byte	0xfae
 7158 1092 E5000000 		.4byte	0xe5
 7159 1096 02       		.uleb128 0x2
 7160 1097 91       		.byte	0x91
 7161 1098 6C       		.sleb128 -20
 7162 1099 15       		.uleb128 0x15
 7163 109a 6E000000 		.4byte	.LASF177
 7164 109e 01       		.byte	0x1
 7165 109f AE0F     		.2byte	0xfae
 7166 10a1 E5000000 		.4byte	0xe5
 7167 10a5 02       		.uleb128 0x2
 7168 10a6 91       		.byte	0x91
 7169 10a7 68       		.sleb128 -24
 7170 10a8 15       		.uleb128 0x15
 7171 10a9 5E0A0000 		.4byte	.LASF178
 7172 10ad 01       		.byte	0x1
 7173 10ae AE0F     		.2byte	0xfae
 7174 10b0 E5100000 		.4byte	0x10e5
 7175 10b4 02       		.uleb128 0x2
 7176 10b5 91       		.byte	0x91
 7177 10b6 64       		.sleb128 -28
 7178 10b7 15       		.uleb128 0x15
 7179 10b8 D40B0000 		.4byte	.LASF139
 7180 10bc 01       		.byte	0x1
 7181 10bd AE0F     		.2byte	0xfae
 7182 10bf 40010000 		.4byte	0x140
 7183 10c3 02       		.uleb128 0x2
 7184 10c4 91       		.byte	0x91
 7185 10c5 60       		.sleb128 -32
 7186 10c6 16       		.uleb128 0x16
 7187 10c7 BE0C0000 		.4byte	.LASF96
 7188 10cb 01       		.byte	0x1
 7189 10cc B00F     		.2byte	0xfb0
 7190 10ce 40010000 		.4byte	0x140
 7191 10d2 02       		.uleb128 0x2
 7192 10d3 91       		.byte	0x91
 7193 10d4 70       		.sleb128 -16
 7194 10d5 16       		.uleb128 0x16
 7195 10d6 730A0000 		.4byte	.LASF88
 7196 10da 01       		.byte	0x1
 7197 10db B10F     		.2byte	0xfb1
 7198 10dd 2A010000 		.4byte	0x12a
 7199 10e1 02       		.uleb128 0x2
 7200 10e2 91       		.byte	0x91
 7201 10e3 74       		.sleb128 -12
 7202 10e4 00       		.byte	0
 7203 10e5 06       		.uleb128 0x6
 7204 10e6 04       		.byte	0x4
 7205 10e7 E5000000 		.4byte	0xe5
 7206 10eb 14       		.uleb128 0x14
 7207 10ec 02030000 		.4byte	.LASF179
 7208 10f0 01       		.byte	0x1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 210


 7209 10f1 2B10     		.2byte	0x102b
 7210 10f3 2A010000 		.4byte	0x12a
 7211 10f7 00000000 		.4byte	.LFB109
 7212 10fb FC000000 		.4byte	.LFE109-.LFB109
 7213 10ff 01       		.uleb128 0x1
 7214 1100 9C       		.byte	0x9c
 7215 1101 6F110000 		.4byte	0x116f
 7216 1105 15       		.uleb128 0x15
 7217 1106 2B080000 		.4byte	.LASF180
 7218 110a 01       		.byte	0x1
 7219 110b 2B10     		.2byte	0x102b
 7220 110d 29020000 		.4byte	0x229
 7221 1111 02       		.uleb128 0x2
 7222 1112 91       		.byte	0x91
 7223 1113 64       		.sleb128 -28
 7224 1114 15       		.uleb128 0x15
 7225 1115 9C090000 		.4byte	.LASF181
 7226 1119 01       		.byte	0x1
 7227 111a 2B10     		.2byte	0x102b
 7228 111c E5000000 		.4byte	0xe5
 7229 1120 02       		.uleb128 0x2
 7230 1121 91       		.byte	0x91
 7231 1122 60       		.sleb128 -32
 7232 1123 15       		.uleb128 0x15
 7233 1124 CE070000 		.4byte	.LASF182
 7234 1128 01       		.byte	0x1
 7235 1129 2B10     		.2byte	0x102b
 7236 112b 95020000 		.4byte	0x295
 7237 112f 02       		.uleb128 0x2
 7238 1130 91       		.byte	0x91
 7239 1131 5F       		.sleb128 -33
 7240 1132 15       		.uleb128 0x15
 7241 1133 43070000 		.4byte	.LASF183
 7242 1137 01       		.byte	0x1
 7243 1138 2B10     		.2byte	0x102b
 7244 113a E5100000 		.4byte	0x10e5
 7245 113e 02       		.uleb128 0x2
 7246 113f 91       		.byte	0x91
 7247 1140 58       		.sleb128 -40
 7248 1141 16       		.uleb128 0x16
 7249 1142 E00C0000 		.4byte	.LASF91
 7250 1146 01       		.byte	0x1
 7251 1147 2D10     		.2byte	0x102d
 7252 1149 0D050000 		.4byte	0x50d
 7253 114d 02       		.uleb128 0x2
 7254 114e 91       		.byte	0x91
 7255 114f 70       		.sleb128 -16
 7256 1150 16       		.uleb128 0x16
 7257 1151 3B040000 		.4byte	.LASF184
 7258 1155 01       		.byte	0x1
 7259 1156 2E10     		.2byte	0x102e
 7260 1158 36030000 		.4byte	0x336
 7261 115c 02       		.uleb128 0x2
 7262 115d 91       		.byte	0x91
 7263 115e 6F       		.sleb128 -17
 7264 115f 16       		.uleb128 0x16
 7265 1160 730A0000 		.4byte	.LASF88
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 211


 7266 1164 01       		.byte	0x1
 7267 1165 2F10     		.2byte	0x102f
 7268 1167 2A010000 		.4byte	0x12a
 7269 116b 02       		.uleb128 0x2
 7270 116c 91       		.byte	0x91
 7271 116d 74       		.sleb128 -12
 7272 116e 00       		.byte	0
 7273 116f 14       		.uleb128 0x14
 7274 1170 02020000 		.4byte	.LASF185
 7275 1174 01       		.byte	0x1
 7276 1175 9510     		.2byte	0x1095
 7277 1177 2A010000 		.4byte	0x12a
 7278 117b 00000000 		.4byte	.LFB110
 7279 117f 24010000 		.4byte	.LFE110-.LFB110
 7280 1183 01       		.uleb128 0x1
 7281 1184 9C       		.byte	0x9c
 7282 1185 11120000 		.4byte	0x1211
 7283 1189 15       		.uleb128 0x15
 7284 118a 2B080000 		.4byte	.LASF180
 7285 118e 01       		.byte	0x1
 7286 118f 9510     		.2byte	0x1095
 7287 1191 29020000 		.4byte	0x229
 7288 1195 02       		.uleb128 0x2
 7289 1196 91       		.byte	0x91
 7290 1197 64       		.sleb128 -28
 7291 1198 15       		.uleb128 0x15
 7292 1199 9C090000 		.4byte	.LASF181
 7293 119d 01       		.byte	0x1
 7294 119e 9510     		.2byte	0x1095
 7295 11a0 E5000000 		.4byte	0xe5
 7296 11a4 02       		.uleb128 0x2
 7297 11a5 91       		.byte	0x91
 7298 11a6 60       		.sleb128 -32
 7299 11a7 15       		.uleb128 0x15
 7300 11a8 CE070000 		.4byte	.LASF182
 7301 11ac 01       		.byte	0x1
 7302 11ad 9510     		.2byte	0x1095
 7303 11af 95020000 		.4byte	0x295
 7304 11b3 02       		.uleb128 0x2
 7305 11b4 91       		.byte	0x91
 7306 11b5 5F       		.sleb128 -33
 7307 11b6 15       		.uleb128 0x15
 7308 11b7 43070000 		.4byte	.LASF183
 7309 11bb 01       		.byte	0x1
 7310 11bc 9510     		.2byte	0x1095
 7311 11be E5100000 		.4byte	0x10e5
 7312 11c2 02       		.uleb128 0x2
 7313 11c3 91       		.byte	0x91
 7314 11c4 58       		.sleb128 -40
 7315 11c5 15       		.uleb128 0x15
 7316 11c6 99000000 		.4byte	.LASF186
 7317 11ca 01       		.byte	0x1
 7318 11cb 9510     		.2byte	0x1095
 7319 11cd 11120000 		.4byte	0x1211
 7320 11d1 02       		.uleb128 0x2
 7321 11d2 91       		.byte	0x91
 7322 11d3 00       		.sleb128 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 212


 7323 11d4 16       		.uleb128 0x16
 7324 11d5 E00C0000 		.4byte	.LASF91
 7325 11d9 01       		.byte	0x1
 7326 11da 9710     		.2byte	0x1097
 7327 11dc 0D050000 		.4byte	0x50d
 7328 11e0 02       		.uleb128 0x2
 7329 11e1 91       		.byte	0x91
 7330 11e2 70       		.sleb128 -16
 7331 11e3 16       		.uleb128 0x16
 7332 11e4 3B040000 		.4byte	.LASF184
 7333 11e8 01       		.byte	0x1
 7334 11e9 9810     		.2byte	0x1098
 7335 11eb 36030000 		.4byte	0x336
 7336 11ef 02       		.uleb128 0x2
 7337 11f0 91       		.byte	0x91
 7338 11f1 6B       		.sleb128 -21
 7339 11f2 16       		.uleb128 0x16
 7340 11f3 730A0000 		.4byte	.LASF88
 7341 11f7 01       		.byte	0x1
 7342 11f8 9910     		.2byte	0x1099
 7343 11fa 2A010000 		.4byte	0x12a
 7344 11fe 02       		.uleb128 0x2
 7345 11ff 91       		.byte	0x91
 7346 1200 74       		.sleb128 -12
 7347 1201 16       		.uleb128 0x16
 7348 1202 D3020000 		.4byte	.LASF121
 7349 1206 01       		.byte	0x1
 7350 1207 9A10     		.2byte	0x109a
 7351 1209 35010000 		.4byte	0x135
 7352 120d 02       		.uleb128 0x2
 7353 120e 91       		.byte	0x91
 7354 120f 6C       		.sleb128 -20
 7355 1210 00       		.byte	0
 7356 1211 06       		.uleb128 0x6
 7357 1212 04       		.byte	0x4
 7358 1213 2A010000 		.4byte	0x12a
 7359 1217 17       		.uleb128 0x17
 7360 1218 28090000 		.4byte	.LASF187
 7361 121c 01       		.byte	0x1
 7362 121d 0A11     		.2byte	0x110a
 7363 121f 00000000 		.4byte	.LFB111
 7364 1223 C0000000 		.4byte	.LFE111-.LFB111
 7365 1227 01       		.uleb128 0x1
 7366 1228 9C       		.byte	0x9c
 7367 1229 79120000 		.4byte	0x1279
 7368 122d 15       		.uleb128 0x15
 7369 122e 2B080000 		.4byte	.LASF180
 7370 1232 01       		.byte	0x1
 7371 1233 0A11     		.2byte	0x110a
 7372 1235 29020000 		.4byte	0x229
 7373 1239 02       		.uleb128 0x2
 7374 123a 91       		.byte	0x91
 7375 123b 64       		.sleb128 -28
 7376 123c 15       		.uleb128 0x15
 7377 123d 99000000 		.4byte	.LASF186
 7378 1241 01       		.byte	0x1
 7379 1242 0A11     		.2byte	0x110a
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 213


 7380 1244 11120000 		.4byte	0x1211
 7381 1248 02       		.uleb128 0x2
 7382 1249 91       		.byte	0x91
 7383 124a 60       		.sleb128 -32
 7384 124b 16       		.uleb128 0x16
 7385 124c E00C0000 		.4byte	.LASF91
 7386 1250 01       		.byte	0x1
 7387 1251 0C11     		.2byte	0x110c
 7388 1253 0D050000 		.4byte	0x50d
 7389 1257 02       		.uleb128 0x2
 7390 1258 91       		.byte	0x91
 7391 1259 74       		.sleb128 -12
 7392 125a 16       		.uleb128 0x16
 7393 125b 3B040000 		.4byte	.LASF184
 7394 125f 01       		.byte	0x1
 7395 1260 0D11     		.2byte	0x110d
 7396 1262 36030000 		.4byte	0x336
 7397 1266 02       		.uleb128 0x2
 7398 1267 91       		.byte	0x91
 7399 1268 6F       		.sleb128 -17
 7400 1269 16       		.uleb128 0x16
 7401 126a D3020000 		.4byte	.LASF121
 7402 126e 01       		.byte	0x1
 7403 126f 0E11     		.2byte	0x110e
 7404 1271 35010000 		.4byte	0x135
 7405 1275 02       		.uleb128 0x2
 7406 1276 91       		.byte	0x91
 7407 1277 70       		.sleb128 -16
 7408 1278 00       		.byte	0
 7409 1279 14       		.uleb128 0x14
 7410 127a CA0C0000 		.4byte	.LASF188
 7411 127e 01       		.byte	0x1
 7412 127f 5C11     		.2byte	0x115c
 7413 1281 2A010000 		.4byte	0x12a
 7414 1285 00000000 		.4byte	.LFB112
 7415 1289 50000000 		.4byte	.LFE112-.LFB112
 7416 128d 01       		.uleb128 0x1
 7417 128e 9C       		.byte	0x9c
 7418 128f C1120000 		.4byte	0x12c1
 7419 1293 15       		.uleb128 0x15
 7420 1294 39080000 		.4byte	.LASF104
 7421 1298 01       		.byte	0x1
 7422 1299 5C11     		.2byte	0x115c
 7423 129b 29020000 		.4byte	0x229
 7424 129f 02       		.uleb128 0x2
 7425 12a0 91       		.byte	0x91
 7426 12a1 6C       		.sleb128 -20
 7427 12a2 16       		.uleb128 0x16
 7428 12a3 E00C0000 		.4byte	.LASF91
 7429 12a7 01       		.byte	0x1
 7430 12a8 5E11     		.2byte	0x115e
 7431 12aa 0D050000 		.4byte	0x50d
 7432 12ae 02       		.uleb128 0x2
 7433 12af 91       		.byte	0x91
 7434 12b0 70       		.sleb128 -16
 7435 12b1 16       		.uleb128 0x16
 7436 12b2 730A0000 		.4byte	.LASF88
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 214


 7437 12b6 01       		.byte	0x1
 7438 12b7 5F11     		.2byte	0x115f
 7439 12b9 2A010000 		.4byte	0x12a
 7440 12bd 02       		.uleb128 0x2
 7441 12be 91       		.byte	0x91
 7442 12bf 74       		.sleb128 -12
 7443 12c0 00       		.byte	0
 7444 12c1 0F       		.uleb128 0xf
 7445 12c2 1E020000 		.4byte	0x21e
 7446 12c6 D1120000 		.4byte	0x12d1
 7447 12ca 10       		.uleb128 0x10
 7448 12cb A9000000 		.4byte	0xa9
 7449 12cf 04       		.byte	0x4
 7450 12d0 00       		.byte	0
 7451 12d1 27       		.uleb128 0x27
 7452 12d2 43010000 		.4byte	.LASF189
 7453 12d6 01       		.byte	0x1
 7454 12d7 D7       		.byte	0xd7
 7455 12d8 C1120000 		.4byte	0x12c1
 7456 12dc 05       		.uleb128 0x5
 7457 12dd 03       		.byte	0x3
 7458 12de 04000000 		.4byte	pxReadyTasksLists
 7459 12e2 27       		.uleb128 0x27
 7460 12e3 38020000 		.4byte	.LASF190
 7461 12e7 01       		.byte	0x1
 7462 12e8 D8       		.byte	0xd8
 7463 12e9 1E020000 		.4byte	0x21e
 7464 12ed 05       		.uleb128 0x5
 7465 12ee 03       		.byte	0x3
 7466 12ef 68000000 		.4byte	xDelayedTaskList1
 7467 12f3 27       		.uleb128 0x27
 7468 12f4 4A020000 		.4byte	.LASF191
 7469 12f8 01       		.byte	0x1
 7470 12f9 D9       		.byte	0xd9
 7471 12fa 1E020000 		.4byte	0x21e
 7472 12fe 05       		.uleb128 0x5
 7473 12ff 03       		.byte	0x3
 7474 1300 7C000000 		.4byte	xDelayedTaskList2
 7475 1304 27       		.uleb128 0x27
 7476 1305 3F090000 		.4byte	.LASF192
 7477 1309 01       		.byte	0x1
 7478 130a DA       		.byte	0xda
 7479 130b 15130000 		.4byte	0x1315
 7480 130f 05       		.uleb128 0x5
 7481 1310 03       		.byte	0x3
 7482 1311 90000000 		.4byte	pxDelayedTaskList
 7483 1315 08       		.uleb128 0x8
 7484 1316 6E060000 		.4byte	0x66e
 7485 131a 27       		.uleb128 0x27
 7486 131b F8040000 		.4byte	.LASF193
 7487 131f 01       		.byte	0x1
 7488 1320 DB       		.byte	0xdb
 7489 1321 15130000 		.4byte	0x1315
 7490 1325 05       		.uleb128 0x5
 7491 1326 03       		.byte	0x3
 7492 1327 94000000 		.4byte	pxOverflowDelayedTaskList
 7493 132b 27       		.uleb128 0x27
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 215


 7494 132c BB030000 		.4byte	.LASF194
 7495 1330 01       		.byte	0x1
 7496 1331 DC       		.byte	0xdc
 7497 1332 1E020000 		.4byte	0x21e
 7498 1336 05       		.uleb128 0x5
 7499 1337 03       		.byte	0x3
 7500 1338 98000000 		.4byte	xPendingReadyList
 7501 133c 27       		.uleb128 0x27
 7502 133d D8030000 		.4byte	.LASF195
 7503 1341 01       		.byte	0x1
 7504 1342 E0       		.byte	0xe0
 7505 1343 1E020000 		.4byte	0x21e
 7506 1347 05       		.uleb128 0x5
 7507 1348 03       		.byte	0x3
 7508 1349 AC000000 		.4byte	xTasksWaitingTermination
 7509 134d 27       		.uleb128 0x27
 7510 134e 80040000 		.4byte	.LASF196
 7511 1352 01       		.byte	0x1
 7512 1353 E1       		.byte	0xe1
 7513 1354 5E130000 		.4byte	0x135e
 7514 1358 05       		.uleb128 0x5
 7515 1359 03       		.byte	0x3
 7516 135a C0000000 		.4byte	uxTasksDeleted
 7517 135e 08       		.uleb128 0x8
 7518 135f 35010000 		.4byte	0x135
 7519 1363 27       		.uleb128 0x27
 7520 1364 D6040000 		.4byte	.LASF197
 7521 1368 01       		.byte	0x1
 7522 1369 E7       		.byte	0xe7
 7523 136a 1E020000 		.4byte	0x21e
 7524 136e 05       		.uleb128 0x5
 7525 136f 03       		.byte	0x3
 7526 1370 C4000000 		.4byte	xSuspendedTaskList
 7527 1374 27       		.uleb128 0x27
 7528 1375 790C0000 		.4byte	.LASF198
 7529 1379 01       		.byte	0x1
 7530 137a F2       		.byte	0xf2
 7531 137b 5E130000 		.4byte	0x135e
 7532 137f 05       		.uleb128 0x5
 7533 1380 03       		.byte	0x3
 7534 1381 D8000000 		.4byte	uxCurrentNumberOfTasks
 7535 1385 27       		.uleb128 0x27
 7536 1386 91060000 		.4byte	.LASF199
 7537 138a 01       		.byte	0x1
 7538 138b F3       		.byte	0xf3
 7539 138c 96130000 		.4byte	0x1396
 7540 1390 05       		.uleb128 0x5
 7541 1391 03       		.byte	0x3
 7542 1392 DC000000 		.4byte	xTickCount
 7543 1396 08       		.uleb128 0x8
 7544 1397 40010000 		.4byte	0x140
 7545 139b 27       		.uleb128 0x27
 7546 139c BD000000 		.4byte	.LASF200
 7547 13a0 01       		.byte	0x1
 7548 13a1 F4       		.byte	0xf4
 7549 13a2 5E130000 		.4byte	0x135e
 7550 13a6 05       		.uleb128 0x5
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 216


 7551 13a7 03       		.byte	0x3
 7552 13a8 E0000000 		.4byte	uxTopReadyPriority
 7553 13ac 27       		.uleb128 0x27
 7554 13ad E9000000 		.4byte	.LASF201
 7555 13b1 01       		.byte	0x1
 7556 13b2 F5       		.byte	0xf5
 7557 13b3 BD130000 		.4byte	0x13bd
 7558 13b7 05       		.uleb128 0x5
 7559 13b8 03       		.byte	0x3
 7560 13b9 E4000000 		.4byte	xSchedulerRunning
 7561 13bd 08       		.uleb128 0x8
 7562 13be 2A010000 		.4byte	0x12a
 7563 13c2 27       		.uleb128 0x27
 7564 13c3 950A0000 		.4byte	.LASF202
 7565 13c7 01       		.byte	0x1
 7566 13c8 F6       		.byte	0xf6
 7567 13c9 5E130000 		.4byte	0x135e
 7568 13cd 05       		.uleb128 0x5
 7569 13ce 03       		.byte	0x3
 7570 13cf E8000000 		.4byte	uxPendedTicks
 7571 13d3 27       		.uleb128 0x27
 7572 13d4 9E0D0000 		.4byte	.LASF203
 7573 13d8 01       		.byte	0x1
 7574 13d9 F7       		.byte	0xf7
 7575 13da BD130000 		.4byte	0x13bd
 7576 13de 05       		.uleb128 0x5
 7577 13df 03       		.byte	0x3
 7578 13e0 EC000000 		.4byte	xYieldPending
 7579 13e4 27       		.uleb128 0x27
 7580 13e5 B8080000 		.4byte	.LASF204
 7581 13e9 01       		.byte	0x1
 7582 13ea F8       		.byte	0xf8
 7583 13eb BD130000 		.4byte	0x13bd
 7584 13ef 05       		.uleb128 0x5
 7585 13f0 03       		.byte	0x3
 7586 13f1 F0000000 		.4byte	xNumOfOverflows
 7587 13f5 27       		.uleb128 0x27
 7588 13f6 B4070000 		.4byte	.LASF205
 7589 13fa 01       		.byte	0x1
 7590 13fb F9       		.byte	0xf9
 7591 13fc 35010000 		.4byte	0x135
 7592 1400 05       		.uleb128 0x5
 7593 1401 03       		.byte	0x3
 7594 1402 F4000000 		.4byte	uxTaskNumber
 7595 1406 27       		.uleb128 0x27
 7596 1407 7C060000 		.4byte	.LASF206
 7597 140b 01       		.byte	0x1
 7598 140c FA       		.byte	0xfa
 7599 140d 96130000 		.4byte	0x1396
 7600 1411 05       		.uleb128 0x5
 7601 1412 03       		.byte	0x3
 7602 1413 F8000000 		.4byte	xNextTaskUnblockTime
 7603 1417 16       		.uleb128 0x16
 7604 1418 ED0C0000 		.4byte	.LASF207
 7605 141c 01       		.byte	0x1
 7606 141d 0401     		.2byte	0x104
 7607 141f 5E130000 		.4byte	0x135e
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 217


 7608 1423 05       		.uleb128 0x5
 7609 1424 03       		.byte	0x3
 7610 1425 FC000000 		.4byte	uxSchedulerSuspended
 7611 1429 28       		.uleb128 0x28
 7612 142a 0C090000 		.4byte	.LASF208
 7613 142e 09       		.byte	0x9
 7614 142f 1207     		.2byte	0x712
 7615 1431 35140000 		.4byte	0x1435
 7616 1435 08       		.uleb128 0x8
 7617 1436 DA000000 		.4byte	0xda
 7618 143a 29       		.uleb128 0x29
 7619 143b D4080000 		.4byte	.LASF209
 7620 143f 01       		.byte	0x1
 7621 1440 D4       		.byte	0xd4
 7622 1441 4B140000 		.4byte	0x144b
 7623 1445 05       		.uleb128 0x5
 7624 1446 03       		.byte	0x3
 7625 1447 00000000 		.4byte	pxCurrentTCB
 7626 144b 08       		.uleb128 0x8
 7627 144c 0D050000 		.4byte	0x50d
 7628 1450 00       		.byte	0
 7629              		.section	.debug_abbrev,"",%progbits
 7630              	.Ldebug_abbrev0:
 7631 0000 01       		.uleb128 0x1
 7632 0001 11       		.uleb128 0x11
 7633 0002 01       		.byte	0x1
 7634 0003 25       		.uleb128 0x25
 7635 0004 0E       		.uleb128 0xe
 7636 0005 13       		.uleb128 0x13
 7637 0006 0B       		.uleb128 0xb
 7638 0007 03       		.uleb128 0x3
 7639 0008 0E       		.uleb128 0xe
 7640 0009 1B       		.uleb128 0x1b
 7641 000a 0E       		.uleb128 0xe
 7642 000b 55       		.uleb128 0x55
 7643 000c 17       		.uleb128 0x17
 7644 000d 11       		.uleb128 0x11
 7645 000e 01       		.uleb128 0x1
 7646 000f 10       		.uleb128 0x10
 7647 0010 17       		.uleb128 0x17
 7648 0011 00       		.byte	0
 7649 0012 00       		.byte	0
 7650 0013 02       		.uleb128 0x2
 7651 0014 16       		.uleb128 0x16
 7652 0015 00       		.byte	0
 7653 0016 03       		.uleb128 0x3
 7654 0017 0E       		.uleb128 0xe
 7655 0018 3A       		.uleb128 0x3a
 7656 0019 0B       		.uleb128 0xb
 7657 001a 3B       		.uleb128 0x3b
 7658 001b 0B       		.uleb128 0xb
 7659 001c 49       		.uleb128 0x49
 7660 001d 13       		.uleb128 0x13
 7661 001e 00       		.byte	0
 7662 001f 00       		.byte	0
 7663 0020 03       		.uleb128 0x3
 7664 0021 24       		.uleb128 0x24
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 218


 7665 0022 00       		.byte	0
 7666 0023 0B       		.uleb128 0xb
 7667 0024 0B       		.uleb128 0xb
 7668 0025 3E       		.uleb128 0x3e
 7669 0026 0B       		.uleb128 0xb
 7670 0027 03       		.uleb128 0x3
 7671 0028 0E       		.uleb128 0xe
 7672 0029 00       		.byte	0
 7673 002a 00       		.byte	0
 7674 002b 04       		.uleb128 0x4
 7675 002c 24       		.uleb128 0x24
 7676 002d 00       		.byte	0
 7677 002e 0B       		.uleb128 0xb
 7678 002f 0B       		.uleb128 0xb
 7679 0030 3E       		.uleb128 0x3e
 7680 0031 0B       		.uleb128 0xb
 7681 0032 03       		.uleb128 0x3
 7682 0033 08       		.uleb128 0x8
 7683 0034 00       		.byte	0
 7684 0035 00       		.byte	0
 7685 0036 05       		.uleb128 0x5
 7686 0037 0F       		.uleb128 0xf
 7687 0038 00       		.byte	0
 7688 0039 0B       		.uleb128 0xb
 7689 003a 0B       		.uleb128 0xb
 7690 003b 00       		.byte	0
 7691 003c 00       		.byte	0
 7692 003d 06       		.uleb128 0x6
 7693 003e 0F       		.uleb128 0xf
 7694 003f 00       		.byte	0
 7695 0040 0B       		.uleb128 0xb
 7696 0041 0B       		.uleb128 0xb
 7697 0042 49       		.uleb128 0x49
 7698 0043 13       		.uleb128 0x13
 7699 0044 00       		.byte	0
 7700 0045 00       		.byte	0
 7701 0046 07       		.uleb128 0x7
 7702 0047 26       		.uleb128 0x26
 7703 0048 00       		.byte	0
 7704 0049 49       		.uleb128 0x49
 7705 004a 13       		.uleb128 0x13
 7706 004b 00       		.byte	0
 7707 004c 00       		.byte	0
 7708 004d 08       		.uleb128 0x8
 7709 004e 35       		.uleb128 0x35
 7710 004f 00       		.byte	0
 7711 0050 49       		.uleb128 0x49
 7712 0051 13       		.uleb128 0x13
 7713 0052 00       		.byte	0
 7714 0053 00       		.byte	0
 7715 0054 09       		.uleb128 0x9
 7716 0055 15       		.uleb128 0x15
 7717 0056 01       		.byte	0x1
 7718 0057 27       		.uleb128 0x27
 7719 0058 19       		.uleb128 0x19
 7720 0059 01       		.uleb128 0x1
 7721 005a 13       		.uleb128 0x13
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 219


 7722 005b 00       		.byte	0
 7723 005c 00       		.byte	0
 7724 005d 0A       		.uleb128 0xa
 7725 005e 05       		.uleb128 0x5
 7726 005f 00       		.byte	0
 7727 0060 49       		.uleb128 0x49
 7728 0061 13       		.uleb128 0x13
 7729 0062 00       		.byte	0
 7730 0063 00       		.byte	0
 7731 0064 0B       		.uleb128 0xb
 7732 0065 13       		.uleb128 0x13
 7733 0066 01       		.byte	0x1
 7734 0067 03       		.uleb128 0x3
 7735 0068 0E       		.uleb128 0xe
 7736 0069 0B       		.uleb128 0xb
 7737 006a 0B       		.uleb128 0xb
 7738 006b 3A       		.uleb128 0x3a
 7739 006c 0B       		.uleb128 0xb
 7740 006d 3B       		.uleb128 0x3b
 7741 006e 0B       		.uleb128 0xb
 7742 006f 01       		.uleb128 0x1
 7743 0070 13       		.uleb128 0x13
 7744 0071 00       		.byte	0
 7745 0072 00       		.byte	0
 7746 0073 0C       		.uleb128 0xc
 7747 0074 0D       		.uleb128 0xd
 7748 0075 00       		.byte	0
 7749 0076 03       		.uleb128 0x3
 7750 0077 0E       		.uleb128 0xe
 7751 0078 3A       		.uleb128 0x3a
 7752 0079 0B       		.uleb128 0xb
 7753 007a 3B       		.uleb128 0x3b
 7754 007b 0B       		.uleb128 0xb
 7755 007c 49       		.uleb128 0x49
 7756 007d 13       		.uleb128 0x13
 7757 007e 38       		.uleb128 0x38
 7758 007f 0B       		.uleb128 0xb
 7759 0080 00       		.byte	0
 7760 0081 00       		.byte	0
 7761 0082 0D       		.uleb128 0xd
 7762 0083 04       		.uleb128 0x4
 7763 0084 01       		.byte	0x1
 7764 0085 0B       		.uleb128 0xb
 7765 0086 0B       		.uleb128 0xb
 7766 0087 49       		.uleb128 0x49
 7767 0088 13       		.uleb128 0x13
 7768 0089 3A       		.uleb128 0x3a
 7769 008a 0B       		.uleb128 0xb
 7770 008b 3B       		.uleb128 0x3b
 7771 008c 0B       		.uleb128 0xb
 7772 008d 01       		.uleb128 0x1
 7773 008e 13       		.uleb128 0x13
 7774 008f 00       		.byte	0
 7775 0090 00       		.byte	0
 7776 0091 0E       		.uleb128 0xe
 7777 0092 28       		.uleb128 0x28
 7778 0093 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 220


 7779 0094 03       		.uleb128 0x3
 7780 0095 0E       		.uleb128 0xe
 7781 0096 1C       		.uleb128 0x1c
 7782 0097 0B       		.uleb128 0xb
 7783 0098 00       		.byte	0
 7784 0099 00       		.byte	0
 7785 009a 0F       		.uleb128 0xf
 7786 009b 01       		.uleb128 0x1
 7787 009c 01       		.byte	0x1
 7788 009d 49       		.uleb128 0x49
 7789 009e 13       		.uleb128 0x13
 7790 009f 01       		.uleb128 0x1
 7791 00a0 13       		.uleb128 0x13
 7792 00a1 00       		.byte	0
 7793 00a2 00       		.byte	0
 7794 00a3 10       		.uleb128 0x10
 7795 00a4 21       		.uleb128 0x21
 7796 00a5 00       		.byte	0
 7797 00a6 49       		.uleb128 0x49
 7798 00a7 13       		.uleb128 0x13
 7799 00a8 2F       		.uleb128 0x2f
 7800 00a9 0B       		.uleb128 0xb
 7801 00aa 00       		.byte	0
 7802 00ab 00       		.byte	0
 7803 00ac 11       		.uleb128 0x11
 7804 00ad 2E       		.uleb128 0x2e
 7805 00ae 01       		.byte	0x1
 7806 00af 03       		.uleb128 0x3
 7807 00b0 0E       		.uleb128 0xe
 7808 00b1 3A       		.uleb128 0x3a
 7809 00b2 0B       		.uleb128 0xb
 7810 00b3 3B       		.uleb128 0x3b
 7811 00b4 0B       		.uleb128 0xb
 7812 00b5 27       		.uleb128 0x27
 7813 00b6 19       		.uleb128 0x19
 7814 00b7 49       		.uleb128 0x49
 7815 00b8 13       		.uleb128 0x13
 7816 00b9 20       		.uleb128 0x20
 7817 00ba 0B       		.uleb128 0xb
 7818 00bb 01       		.uleb128 0x1
 7819 00bc 13       		.uleb128 0x13
 7820 00bd 00       		.byte	0
 7821 00be 00       		.byte	0
 7822 00bf 12       		.uleb128 0x12
 7823 00c0 05       		.uleb128 0x5
 7824 00c1 00       		.byte	0
 7825 00c2 03       		.uleb128 0x3
 7826 00c3 0E       		.uleb128 0xe
 7827 00c4 3A       		.uleb128 0x3a
 7828 00c5 0B       		.uleb128 0xb
 7829 00c6 3B       		.uleb128 0x3b
 7830 00c7 0B       		.uleb128 0xb
 7831 00c8 49       		.uleb128 0x49
 7832 00c9 13       		.uleb128 0x13
 7833 00ca 00       		.byte	0
 7834 00cb 00       		.byte	0
 7835 00cc 13       		.uleb128 0x13
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 221


 7836 00cd 34       		.uleb128 0x34
 7837 00ce 00       		.byte	0
 7838 00cf 03       		.uleb128 0x3
 7839 00d0 0E       		.uleb128 0xe
 7840 00d1 3A       		.uleb128 0x3a
 7841 00d2 0B       		.uleb128 0xb
 7842 00d3 3B       		.uleb128 0x3b
 7843 00d4 0B       		.uleb128 0xb
 7844 00d5 49       		.uleb128 0x49
 7845 00d6 13       		.uleb128 0x13
 7846 00d7 00       		.byte	0
 7847 00d8 00       		.byte	0
 7848 00d9 14       		.uleb128 0x14
 7849 00da 2E       		.uleb128 0x2e
 7850 00db 01       		.byte	0x1
 7851 00dc 3F       		.uleb128 0x3f
 7852 00dd 19       		.uleb128 0x19
 7853 00de 03       		.uleb128 0x3
 7854 00df 0E       		.uleb128 0xe
 7855 00e0 3A       		.uleb128 0x3a
 7856 00e1 0B       		.uleb128 0xb
 7857 00e2 3B       		.uleb128 0x3b
 7858 00e3 05       		.uleb128 0x5
 7859 00e4 27       		.uleb128 0x27
 7860 00e5 19       		.uleb128 0x19
 7861 00e6 49       		.uleb128 0x49
 7862 00e7 13       		.uleb128 0x13
 7863 00e8 11       		.uleb128 0x11
 7864 00e9 01       		.uleb128 0x1
 7865 00ea 12       		.uleb128 0x12
 7866 00eb 06       		.uleb128 0x6
 7867 00ec 40       		.uleb128 0x40
 7868 00ed 18       		.uleb128 0x18
 7869 00ee 9642     		.uleb128 0x2116
 7870 00f0 19       		.uleb128 0x19
 7871 00f1 01       		.uleb128 0x1
 7872 00f2 13       		.uleb128 0x13
 7873 00f3 00       		.byte	0
 7874 00f4 00       		.byte	0
 7875 00f5 15       		.uleb128 0x15
 7876 00f6 05       		.uleb128 0x5
 7877 00f7 00       		.byte	0
 7878 00f8 03       		.uleb128 0x3
 7879 00f9 0E       		.uleb128 0xe
 7880 00fa 3A       		.uleb128 0x3a
 7881 00fb 0B       		.uleb128 0xb
 7882 00fc 3B       		.uleb128 0x3b
 7883 00fd 05       		.uleb128 0x5
 7884 00fe 49       		.uleb128 0x49
 7885 00ff 13       		.uleb128 0x13
 7886 0100 02       		.uleb128 0x2
 7887 0101 18       		.uleb128 0x18
 7888 0102 00       		.byte	0
 7889 0103 00       		.byte	0
 7890 0104 16       		.uleb128 0x16
 7891 0105 34       		.uleb128 0x34
 7892 0106 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 222


 7893 0107 03       		.uleb128 0x3
 7894 0108 0E       		.uleb128 0xe
 7895 0109 3A       		.uleb128 0x3a
 7896 010a 0B       		.uleb128 0xb
 7897 010b 3B       		.uleb128 0x3b
 7898 010c 05       		.uleb128 0x5
 7899 010d 49       		.uleb128 0x49
 7900 010e 13       		.uleb128 0x13
 7901 010f 02       		.uleb128 0x2
 7902 0110 18       		.uleb128 0x18
 7903 0111 00       		.byte	0
 7904 0112 00       		.byte	0
 7905 0113 17       		.uleb128 0x17
 7906 0114 2E       		.uleb128 0x2e
 7907 0115 01       		.byte	0x1
 7908 0116 3F       		.uleb128 0x3f
 7909 0117 19       		.uleb128 0x19
 7910 0118 03       		.uleb128 0x3
 7911 0119 0E       		.uleb128 0xe
 7912 011a 3A       		.uleb128 0x3a
 7913 011b 0B       		.uleb128 0xb
 7914 011c 3B       		.uleb128 0x3b
 7915 011d 05       		.uleb128 0x5
 7916 011e 27       		.uleb128 0x27
 7917 011f 19       		.uleb128 0x19
 7918 0120 11       		.uleb128 0x11
 7919 0121 01       		.uleb128 0x1
 7920 0122 12       		.uleb128 0x12
 7921 0123 06       		.uleb128 0x6
 7922 0124 40       		.uleb128 0x40
 7923 0125 18       		.uleb128 0x18
 7924 0126 9642     		.uleb128 0x2116
 7925 0128 19       		.uleb128 0x19
 7926 0129 01       		.uleb128 0x1
 7927 012a 13       		.uleb128 0x13
 7928 012b 00       		.byte	0
 7929 012c 00       		.byte	0
 7930 012d 18       		.uleb128 0x18
 7931 012e 0B       		.uleb128 0xb
 7932 012f 01       		.byte	0x1
 7933 0130 11       		.uleb128 0x11
 7934 0131 01       		.uleb128 0x1
 7935 0132 12       		.uleb128 0x12
 7936 0133 06       		.uleb128 0x6
 7937 0134 00       		.byte	0
 7938 0135 00       		.byte	0
 7939 0136 19       		.uleb128 0x19
 7940 0137 2E       		.uleb128 0x2e
 7941 0138 01       		.byte	0x1
 7942 0139 03       		.uleb128 0x3
 7943 013a 0E       		.uleb128 0xe
 7944 013b 3A       		.uleb128 0x3a
 7945 013c 0B       		.uleb128 0xb
 7946 013d 3B       		.uleb128 0x3b
 7947 013e 05       		.uleb128 0x5
 7948 013f 27       		.uleb128 0x27
 7949 0140 19       		.uleb128 0x19
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 223


 7950 0141 49       		.uleb128 0x49
 7951 0142 13       		.uleb128 0x13
 7952 0143 11       		.uleb128 0x11
 7953 0144 01       		.uleb128 0x1
 7954 0145 12       		.uleb128 0x12
 7955 0146 06       		.uleb128 0x6
 7956 0147 40       		.uleb128 0x40
 7957 0148 18       		.uleb128 0x18
 7958 0149 9742     		.uleb128 0x2117
 7959 014b 19       		.uleb128 0x19
 7960 014c 01       		.uleb128 0x1
 7961 014d 13       		.uleb128 0x13
 7962 014e 00       		.byte	0
 7963 014f 00       		.byte	0
 7964 0150 1A       		.uleb128 0x1a
 7965 0151 2E       		.uleb128 0x2e
 7966 0152 00       		.byte	0
 7967 0153 3F       		.uleb128 0x3f
 7968 0154 19       		.uleb128 0x19
 7969 0155 03       		.uleb128 0x3
 7970 0156 0E       		.uleb128 0xe
 7971 0157 3A       		.uleb128 0x3a
 7972 0158 0B       		.uleb128 0xb
 7973 0159 3B       		.uleb128 0x3b
 7974 015a 05       		.uleb128 0x5
 7975 015b 27       		.uleb128 0x27
 7976 015c 19       		.uleb128 0x19
 7977 015d 11       		.uleb128 0x11
 7978 015e 01       		.uleb128 0x1
 7979 015f 12       		.uleb128 0x12
 7980 0160 06       		.uleb128 0x6
 7981 0161 40       		.uleb128 0x40
 7982 0162 18       		.uleb128 0x18
 7983 0163 9642     		.uleb128 0x2116
 7984 0165 19       		.uleb128 0x19
 7985 0166 00       		.byte	0
 7986 0167 00       		.byte	0
 7987 0168 1B       		.uleb128 0x1b
 7988 0169 2E       		.uleb128 0x2e
 7989 016a 00       		.byte	0
 7990 016b 3F       		.uleb128 0x3f
 7991 016c 19       		.uleb128 0x19
 7992 016d 03       		.uleb128 0x3
 7993 016e 0E       		.uleb128 0xe
 7994 016f 3A       		.uleb128 0x3a
 7995 0170 0B       		.uleb128 0xb
 7996 0171 3B       		.uleb128 0x3b
 7997 0172 05       		.uleb128 0x5
 7998 0173 27       		.uleb128 0x27
 7999 0174 19       		.uleb128 0x19
 8000 0175 11       		.uleb128 0x11
 8001 0176 01       		.uleb128 0x1
 8002 0177 12       		.uleb128 0x12
 8003 0178 06       		.uleb128 0x6
 8004 0179 40       		.uleb128 0x40
 8005 017a 18       		.uleb128 0x18
 8006 017b 9742     		.uleb128 0x2117
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 224


 8007 017d 19       		.uleb128 0x19
 8008 017e 00       		.byte	0
 8009 017f 00       		.byte	0
 8010 0180 1C       		.uleb128 0x1c
 8011 0181 2E       		.uleb128 0x2e
 8012 0182 01       		.byte	0x1
 8013 0183 3F       		.uleb128 0x3f
 8014 0184 19       		.uleb128 0x19
 8015 0185 03       		.uleb128 0x3
 8016 0186 0E       		.uleb128 0xe
 8017 0187 3A       		.uleb128 0x3a
 8018 0188 0B       		.uleb128 0xb
 8019 0189 3B       		.uleb128 0x3b
 8020 018a 05       		.uleb128 0x5
 8021 018b 27       		.uleb128 0x27
 8022 018c 19       		.uleb128 0x19
 8023 018d 49       		.uleb128 0x49
 8024 018e 13       		.uleb128 0x13
 8025 018f 11       		.uleb128 0x11
 8026 0190 01       		.uleb128 0x1
 8027 0191 12       		.uleb128 0x12
 8028 0192 06       		.uleb128 0x6
 8029 0193 40       		.uleb128 0x40
 8030 0194 18       		.uleb128 0x18
 8031 0195 9742     		.uleb128 0x2117
 8032 0197 19       		.uleb128 0x19
 8033 0198 01       		.uleb128 0x1
 8034 0199 13       		.uleb128 0x13
 8035 019a 00       		.byte	0
 8036 019b 00       		.byte	0
 8037 019c 1D       		.uleb128 0x1d
 8038 019d 2E       		.uleb128 0x2e
 8039 019e 00       		.byte	0
 8040 019f 3F       		.uleb128 0x3f
 8041 01a0 19       		.uleb128 0x19
 8042 01a1 03       		.uleb128 0x3
 8043 01a2 0E       		.uleb128 0xe
 8044 01a3 3A       		.uleb128 0x3a
 8045 01a4 0B       		.uleb128 0xb
 8046 01a5 3B       		.uleb128 0x3b
 8047 01a6 05       		.uleb128 0x5
 8048 01a7 27       		.uleb128 0x27
 8049 01a8 19       		.uleb128 0x19
 8050 01a9 49       		.uleb128 0x49
 8051 01aa 13       		.uleb128 0x13
 8052 01ab 11       		.uleb128 0x11
 8053 01ac 01       		.uleb128 0x1
 8054 01ad 12       		.uleb128 0x12
 8055 01ae 06       		.uleb128 0x6
 8056 01af 40       		.uleb128 0x40
 8057 01b0 18       		.uleb128 0x18
 8058 01b1 9742     		.uleb128 0x2117
 8059 01b3 19       		.uleb128 0x19
 8060 01b4 00       		.byte	0
 8061 01b5 00       		.byte	0
 8062 01b6 1E       		.uleb128 0x1e
 8063 01b7 0B       		.uleb128 0xb
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 225


 8064 01b8 01       		.byte	0x1
 8065 01b9 11       		.uleb128 0x11
 8066 01ba 01       		.uleb128 0x1
 8067 01bb 12       		.uleb128 0x12
 8068 01bc 06       		.uleb128 0x6
 8069 01bd 01       		.uleb128 0x1
 8070 01be 13       		.uleb128 0x13
 8071 01bf 00       		.byte	0
 8072 01c0 00       		.byte	0
 8073 01c1 1F       		.uleb128 0x1f
 8074 01c2 1D       		.uleb128 0x1d
 8075 01c3 01       		.byte	0x1
 8076 01c4 31       		.uleb128 0x31
 8077 01c5 13       		.uleb128 0x13
 8078 01c6 11       		.uleb128 0x11
 8079 01c7 01       		.uleb128 0x1
 8080 01c8 12       		.uleb128 0x12
 8081 01c9 06       		.uleb128 0x6
 8082 01ca 58       		.uleb128 0x58
 8083 01cb 0B       		.uleb128 0xb
 8084 01cc 59       		.uleb128 0x59
 8085 01cd 05       		.uleb128 0x5
 8086 01ce 01       		.uleb128 0x1
 8087 01cf 13       		.uleb128 0x13
 8088 01d0 00       		.byte	0
 8089 01d1 00       		.byte	0
 8090 01d2 20       		.uleb128 0x20
 8091 01d3 05       		.uleb128 0x5
 8092 01d4 00       		.byte	0
 8093 01d5 31       		.uleb128 0x31
 8094 01d6 13       		.uleb128 0x13
 8095 01d7 02       		.uleb128 0x2
 8096 01d8 18       		.uleb128 0x18
 8097 01d9 00       		.byte	0
 8098 01da 00       		.byte	0
 8099 01db 21       		.uleb128 0x21
 8100 01dc 34       		.uleb128 0x34
 8101 01dd 00       		.byte	0
 8102 01de 31       		.uleb128 0x31
 8103 01df 13       		.uleb128 0x13
 8104 01e0 02       		.uleb128 0x2
 8105 01e1 18       		.uleb128 0x18
 8106 01e2 00       		.byte	0
 8107 01e3 00       		.byte	0
 8108 01e4 22       		.uleb128 0x22
 8109 01e5 2E       		.uleb128 0x2e
 8110 01e6 01       		.byte	0x1
 8111 01e7 3F       		.uleb128 0x3f
 8112 01e8 19       		.uleb128 0x19
 8113 01e9 03       		.uleb128 0x3
 8114 01ea 0E       		.uleb128 0xe
 8115 01eb 3A       		.uleb128 0x3a
 8116 01ec 0B       		.uleb128 0xb
 8117 01ed 3B       		.uleb128 0x3b
 8118 01ee 05       		.uleb128 0x5
 8119 01ef 27       		.uleb128 0x27
 8120 01f0 19       		.uleb128 0x19
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 226


 8121 01f1 11       		.uleb128 0x11
 8122 01f2 01       		.uleb128 0x1
 8123 01f3 12       		.uleb128 0x12
 8124 01f4 06       		.uleb128 0x6
 8125 01f5 40       		.uleb128 0x40
 8126 01f6 18       		.uleb128 0x18
 8127 01f7 9742     		.uleb128 0x2117
 8128 01f9 19       		.uleb128 0x19
 8129 01fa 01       		.uleb128 0x1
 8130 01fb 13       		.uleb128 0x13
 8131 01fc 00       		.byte	0
 8132 01fd 00       		.byte	0
 8133 01fe 23       		.uleb128 0x23
 8134 01ff 2E       		.uleb128 0x2e
 8135 0200 01       		.byte	0x1
 8136 0201 03       		.uleb128 0x3
 8137 0202 0E       		.uleb128 0xe
 8138 0203 3A       		.uleb128 0x3a
 8139 0204 0B       		.uleb128 0xb
 8140 0205 3B       		.uleb128 0x3b
 8141 0206 05       		.uleb128 0x5
 8142 0207 27       		.uleb128 0x27
 8143 0208 19       		.uleb128 0x19
 8144 0209 11       		.uleb128 0x11
 8145 020a 01       		.uleb128 0x1
 8146 020b 12       		.uleb128 0x12
 8147 020c 06       		.uleb128 0x6
 8148 020d 40       		.uleb128 0x40
 8149 020e 18       		.uleb128 0x18
 8150 020f 9642     		.uleb128 0x2116
 8151 0211 19       		.uleb128 0x19
 8152 0212 01       		.uleb128 0x1
 8153 0213 13       		.uleb128 0x13
 8154 0214 00       		.byte	0
 8155 0215 00       		.byte	0
 8156 0216 24       		.uleb128 0x24
 8157 0217 34       		.uleb128 0x34
 8158 0218 00       		.byte	0
 8159 0219 03       		.uleb128 0x3
 8160 021a 08       		.uleb128 0x8
 8161 021b 3A       		.uleb128 0x3a
 8162 021c 0B       		.uleb128 0xb
 8163 021d 3B       		.uleb128 0x3b
 8164 021e 05       		.uleb128 0x5
 8165 021f 49       		.uleb128 0x49
 8166 0220 13       		.uleb128 0x13
 8167 0221 02       		.uleb128 0x2
 8168 0222 18       		.uleb128 0x18
 8169 0223 00       		.byte	0
 8170 0224 00       		.byte	0
 8171 0225 25       		.uleb128 0x25
 8172 0226 2E       		.uleb128 0x2e
 8173 0227 01       		.byte	0x1
 8174 0228 03       		.uleb128 0x3
 8175 0229 0E       		.uleb128 0xe
 8176 022a 3A       		.uleb128 0x3a
 8177 022b 0B       		.uleb128 0xb
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 227


 8178 022c 3B       		.uleb128 0x3b
 8179 022d 05       		.uleb128 0x5
 8180 022e 27       		.uleb128 0x27
 8181 022f 19       		.uleb128 0x19
 8182 0230 49       		.uleb128 0x49
 8183 0231 13       		.uleb128 0x13
 8184 0232 11       		.uleb128 0x11
 8185 0233 01       		.uleb128 0x1
 8186 0234 12       		.uleb128 0x12
 8187 0235 06       		.uleb128 0x6
 8188 0236 40       		.uleb128 0x40
 8189 0237 18       		.uleb128 0x18
 8190 0238 9642     		.uleb128 0x2116
 8191 023a 19       		.uleb128 0x19
 8192 023b 01       		.uleb128 0x1
 8193 023c 13       		.uleb128 0x13
 8194 023d 00       		.byte	0
 8195 023e 00       		.byte	0
 8196 023f 26       		.uleb128 0x26
 8197 0240 2E       		.uleb128 0x2e
 8198 0241 01       		.byte	0x1
 8199 0242 03       		.uleb128 0x3
 8200 0243 0E       		.uleb128 0xe
 8201 0244 3A       		.uleb128 0x3a
 8202 0245 0B       		.uleb128 0xb
 8203 0246 3B       		.uleb128 0x3b
 8204 0247 05       		.uleb128 0x5
 8205 0248 27       		.uleb128 0x27
 8206 0249 19       		.uleb128 0x19
 8207 024a 11       		.uleb128 0x11
 8208 024b 01       		.uleb128 0x1
 8209 024c 12       		.uleb128 0x12
 8210 024d 06       		.uleb128 0x6
 8211 024e 40       		.uleb128 0x40
 8212 024f 18       		.uleb128 0x18
 8213 0250 9742     		.uleb128 0x2117
 8214 0252 19       		.uleb128 0x19
 8215 0253 01       		.uleb128 0x1
 8216 0254 13       		.uleb128 0x13
 8217 0255 00       		.byte	0
 8218 0256 00       		.byte	0
 8219 0257 27       		.uleb128 0x27
 8220 0258 34       		.uleb128 0x34
 8221 0259 00       		.byte	0
 8222 025a 03       		.uleb128 0x3
 8223 025b 0E       		.uleb128 0xe
 8224 025c 3A       		.uleb128 0x3a
 8225 025d 0B       		.uleb128 0xb
 8226 025e 3B       		.uleb128 0x3b
 8227 025f 0B       		.uleb128 0xb
 8228 0260 49       		.uleb128 0x49
 8229 0261 13       		.uleb128 0x13
 8230 0262 02       		.uleb128 0x2
 8231 0263 18       		.uleb128 0x18
 8232 0264 00       		.byte	0
 8233 0265 00       		.byte	0
 8234 0266 28       		.uleb128 0x28
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 228


 8235 0267 34       		.uleb128 0x34
 8236 0268 00       		.byte	0
 8237 0269 03       		.uleb128 0x3
 8238 026a 0E       		.uleb128 0xe
 8239 026b 3A       		.uleb128 0x3a
 8240 026c 0B       		.uleb128 0xb
 8241 026d 3B       		.uleb128 0x3b
 8242 026e 05       		.uleb128 0x5
 8243 026f 49       		.uleb128 0x49
 8244 0270 13       		.uleb128 0x13
 8245 0271 3F       		.uleb128 0x3f
 8246 0272 19       		.uleb128 0x19
 8247 0273 3C       		.uleb128 0x3c
 8248 0274 19       		.uleb128 0x19
 8249 0275 00       		.byte	0
 8250 0276 00       		.byte	0
 8251 0277 29       		.uleb128 0x29
 8252 0278 34       		.uleb128 0x34
 8253 0279 00       		.byte	0
 8254 027a 03       		.uleb128 0x3
 8255 027b 0E       		.uleb128 0xe
 8256 027c 3A       		.uleb128 0x3a
 8257 027d 0B       		.uleb128 0xb
 8258 027e 3B       		.uleb128 0x3b
 8259 027f 0B       		.uleb128 0xb
 8260 0280 49       		.uleb128 0x49
 8261 0281 13       		.uleb128 0x13
 8262 0282 3F       		.uleb128 0x3f
 8263 0283 19       		.uleb128 0x19
 8264 0284 02       		.uleb128 0x2
 8265 0285 18       		.uleb128 0x18
 8266 0286 00       		.byte	0
 8267 0287 00       		.byte	0
 8268 0288 00       		.byte	0
 8269              		.section	.debug_aranges,"",%progbits
 8270 0000 9C010000 		.4byte	0x19c
 8271 0004 0200     		.2byte	0x2
 8272 0006 00000000 		.4byte	.Ldebug_info0
 8273 000a 04       		.byte	0x4
 8274 000b 00       		.byte	0
 8275 000c 0000     		.2byte	0
 8276 000e 0000     		.2byte	0
 8277 0010 00000000 		.4byte	.LFB64
 8278 0014 34010000 		.4byte	.LFE64-.LFB64
 8279 0018 00000000 		.4byte	.LFB65
 8280 001c D8000000 		.4byte	.LFE65-.LFB65
 8281 0020 00000000 		.4byte	.LFB66
 8282 0024 BC000000 		.4byte	.LFE66-.LFB66
 8283 0028 00000000 		.4byte	.LFB67
 8284 002c 74000000 		.4byte	.LFE67-.LFB67
 8285 0030 00000000 		.4byte	.LFB68
 8286 0034 90000000 		.4byte	.LFE68-.LFB68
 8287 0038 00000000 		.4byte	.LFB69
 8288 003c 34000000 		.4byte	.LFE69-.LFB69
 8289 0040 00000000 		.4byte	.LFB70
 8290 0044 38000000 		.4byte	.LFE70-.LFB70
 8291 0048 00000000 		.4byte	.LFB71
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 229


 8292 004c 30010000 		.4byte	.LFE71-.LFB71
 8293 0050 00000000 		.4byte	.LFB72
 8294 0054 E0000000 		.4byte	.LFE72-.LFB72
 8295 0058 00000000 		.4byte	.LFB73
 8296 005c 58000000 		.4byte	.LFE73-.LFB73
 8297 0060 00000000 		.4byte	.LFB74
 8298 0064 90000000 		.4byte	.LFE74-.LFB74
 8299 0068 00000000 		.4byte	.LFB75
 8300 006c A8000000 		.4byte	.LFE75-.LFB75
 8301 0070 00000000 		.4byte	.LFB76
 8302 0074 64000000 		.4byte	.LFE76-.LFB76
 8303 0078 00000000 		.4byte	.LFB77
 8304 007c 1C000000 		.4byte	.LFE77-.LFB77
 8305 0080 00000000 		.4byte	.LFB78
 8306 0084 1C000000 		.4byte	.LFE78-.LFB78
 8307 0088 00000000 		.4byte	.LFB79
 8308 008c FC000000 		.4byte	.LFE79-.LFB79
 8309 0090 00000000 		.4byte	.LFB80
 8310 0094 1C000000 		.4byte	.LFE80-.LFB80
 8311 0098 00000000 		.4byte	.LFB81
 8312 009c 20000000 		.4byte	.LFE81-.LFB81
 8313 00a0 00000000 		.4byte	.LFB82
 8314 00a4 14000000 		.4byte	.LFE82-.LFB82
 8315 00a8 00000000 		.4byte	.LFB83
 8316 00ac 5C010000 		.4byte	.LFE83-.LFB83
 8317 00b0 00000000 		.4byte	.LFB84
 8318 00b4 D8000000 		.4byte	.LFE84-.LFB84
 8319 00b8 00000000 		.4byte	.LFB85
 8320 00bc 84000000 		.4byte	.LFE85-.LFB85
 8321 00c0 00000000 		.4byte	.LFB86
 8322 00c4 90000000 		.4byte	.LFE86-.LFB86
 8323 00c8 00000000 		.4byte	.LFB87
 8324 00cc A8000000 		.4byte	.LFE87-.LFB87
 8325 00d0 00000000 		.4byte	.LFB88
 8326 00d4 90000000 		.4byte	.LFE88-.LFB88
 8327 00d8 00000000 		.4byte	.LFB89
 8328 00dc 2C000000 		.4byte	.LFE89-.LFB89
 8329 00e0 00000000 		.4byte	.LFB90
 8330 00e4 88000000 		.4byte	.LFE90-.LFB90
 8331 00e8 00000000 		.4byte	.LFB91
 8332 00ec 18000000 		.4byte	.LFE91-.LFB91
 8333 00f0 00000000 		.4byte	.LFB92
 8334 00f4 0E000000 		.4byte	.LFE92-.LFB92
 8335 00f8 00000000 		.4byte	.LFB93
 8336 00fc A8000000 		.4byte	.LFE93-.LFB93
 8337 0100 00000000 		.4byte	.LFB94
 8338 0104 80000000 		.4byte	.LFE94-.LFB94
 8339 0108 00000000 		.4byte	.LFB95
 8340 010c 78000000 		.4byte	.LFE95-.LFB95
 8341 0110 00000000 		.4byte	.LFB96
 8342 0114 6C000000 		.4byte	.LFE96-.LFB96
 8343 0118 00000000 		.4byte	.LFB97
 8344 011c 6C000000 		.4byte	.LFE97-.LFB97
 8345 0120 00000000 		.4byte	.LFB98
 8346 0124 36000000 		.4byte	.LFE98-.LFB98
 8347 0128 00000000 		.4byte	.LFB99
 8348 012c 38000000 		.4byte	.LFE99-.LFB99
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 230


 8349 0130 00000000 		.4byte	.LFB100
 8350 0134 20000000 		.4byte	.LFE100-.LFB100
 8351 0138 00000000 		.4byte	.LFB101
 8352 013c 48000000 		.4byte	.LFE101-.LFB101
 8353 0140 00000000 		.4byte	.LFB102
 8354 0144 1C000000 		.4byte	.LFE102-.LFB102
 8355 0148 00000000 		.4byte	.LFB103
 8356 014c EC000000 		.4byte	.LFE103-.LFB103
 8357 0150 00000000 		.4byte	.LFB104
 8358 0154 C8000000 		.4byte	.LFE104-.LFB104
 8359 0158 00000000 		.4byte	.LFB105
 8360 015c 30000000 		.4byte	.LFE105-.LFB105
 8361 0160 00000000 		.4byte	.LFB106
 8362 0164 28000000 		.4byte	.LFE106-.LFB106
 8363 0168 00000000 		.4byte	.LFB107
 8364 016c D8000000 		.4byte	.LFE107-.LFB107
 8365 0170 00000000 		.4byte	.LFB108
 8366 0174 FC000000 		.4byte	.LFE108-.LFB108
 8367 0178 00000000 		.4byte	.LFB109
 8368 017c FC000000 		.4byte	.LFE109-.LFB109
 8369 0180 00000000 		.4byte	.LFB110
 8370 0184 24010000 		.4byte	.LFE110-.LFB110
 8371 0188 00000000 		.4byte	.LFB111
 8372 018c C0000000 		.4byte	.LFE111-.LFB111
 8373 0190 00000000 		.4byte	.LFB112
 8374 0194 50000000 		.4byte	.LFE112-.LFB112
 8375 0198 00000000 		.4byte	0
 8376 019c 00000000 		.4byte	0
 8377              		.section	.debug_ranges,"",%progbits
 8378              	.Ldebug_ranges0:
 8379 0000 00000000 		.4byte	.LFB64
 8380 0004 34010000 		.4byte	.LFE64
 8381 0008 00000000 		.4byte	.LFB65
 8382 000c D8000000 		.4byte	.LFE65
 8383 0010 00000000 		.4byte	.LFB66
 8384 0014 BC000000 		.4byte	.LFE66
 8385 0018 00000000 		.4byte	.LFB67
 8386 001c 74000000 		.4byte	.LFE67
 8387 0020 00000000 		.4byte	.LFB68
 8388 0024 90000000 		.4byte	.LFE68
 8389 0028 00000000 		.4byte	.LFB69
 8390 002c 34000000 		.4byte	.LFE69
 8391 0030 00000000 		.4byte	.LFB70
 8392 0034 38000000 		.4byte	.LFE70
 8393 0038 00000000 		.4byte	.LFB71
 8394 003c 30010000 		.4byte	.LFE71
 8395 0040 00000000 		.4byte	.LFB72
 8396 0044 E0000000 		.4byte	.LFE72
 8397 0048 00000000 		.4byte	.LFB73
 8398 004c 58000000 		.4byte	.LFE73
 8399 0050 00000000 		.4byte	.LFB74
 8400 0054 90000000 		.4byte	.LFE74
 8401 0058 00000000 		.4byte	.LFB75
 8402 005c A8000000 		.4byte	.LFE75
 8403 0060 00000000 		.4byte	.LFB76
 8404 0064 64000000 		.4byte	.LFE76
 8405 0068 00000000 		.4byte	.LFB77
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 231


 8406 006c 1C000000 		.4byte	.LFE77
 8407 0070 00000000 		.4byte	.LFB78
 8408 0074 1C000000 		.4byte	.LFE78
 8409 0078 00000000 		.4byte	.LFB79
 8410 007c FC000000 		.4byte	.LFE79
 8411 0080 00000000 		.4byte	.LFB80
 8412 0084 1C000000 		.4byte	.LFE80
 8413 0088 00000000 		.4byte	.LFB81
 8414 008c 20000000 		.4byte	.LFE81
 8415 0090 00000000 		.4byte	.LFB82
 8416 0094 14000000 		.4byte	.LFE82
 8417 0098 00000000 		.4byte	.LFB83
 8418 009c 5C010000 		.4byte	.LFE83
 8419 00a0 00000000 		.4byte	.LFB84
 8420 00a4 D8000000 		.4byte	.LFE84
 8421 00a8 00000000 		.4byte	.LFB85
 8422 00ac 84000000 		.4byte	.LFE85
 8423 00b0 00000000 		.4byte	.LFB86
 8424 00b4 90000000 		.4byte	.LFE86
 8425 00b8 00000000 		.4byte	.LFB87
 8426 00bc A8000000 		.4byte	.LFE87
 8427 00c0 00000000 		.4byte	.LFB88
 8428 00c4 90000000 		.4byte	.LFE88
 8429 00c8 00000000 		.4byte	.LFB89
 8430 00cc 2C000000 		.4byte	.LFE89
 8431 00d0 00000000 		.4byte	.LFB90
 8432 00d4 88000000 		.4byte	.LFE90
 8433 00d8 00000000 		.4byte	.LFB91
 8434 00dc 18000000 		.4byte	.LFE91
 8435 00e0 00000000 		.4byte	.LFB92
 8436 00e4 0E000000 		.4byte	.LFE92
 8437 00e8 00000000 		.4byte	.LFB93
 8438 00ec A8000000 		.4byte	.LFE93
 8439 00f0 00000000 		.4byte	.LFB94
 8440 00f4 80000000 		.4byte	.LFE94
 8441 00f8 00000000 		.4byte	.LFB95
 8442 00fc 78000000 		.4byte	.LFE95
 8443 0100 00000000 		.4byte	.LFB96
 8444 0104 6C000000 		.4byte	.LFE96
 8445 0108 00000000 		.4byte	.LFB97
 8446 010c 6C000000 		.4byte	.LFE97
 8447 0110 00000000 		.4byte	.LFB98
 8448 0114 36000000 		.4byte	.LFE98
 8449 0118 00000000 		.4byte	.LFB99
 8450 011c 38000000 		.4byte	.LFE99
 8451 0120 00000000 		.4byte	.LFB100
 8452 0124 20000000 		.4byte	.LFE100
 8453 0128 00000000 		.4byte	.LFB101
 8454 012c 48000000 		.4byte	.LFE101
 8455 0130 00000000 		.4byte	.LFB102
 8456 0134 1C000000 		.4byte	.LFE102
 8457 0138 00000000 		.4byte	.LFB103
 8458 013c EC000000 		.4byte	.LFE103
 8459 0140 00000000 		.4byte	.LFB104
 8460 0144 C8000000 		.4byte	.LFE104
 8461 0148 00000000 		.4byte	.LFB105
 8462 014c 30000000 		.4byte	.LFE105
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 232


 8463 0150 00000000 		.4byte	.LFB106
 8464 0154 28000000 		.4byte	.LFE106
 8465 0158 00000000 		.4byte	.LFB107
 8466 015c D8000000 		.4byte	.LFE107
 8467 0160 00000000 		.4byte	.LFB108
 8468 0164 FC000000 		.4byte	.LFE108
 8469 0168 00000000 		.4byte	.LFB109
 8470 016c FC000000 		.4byte	.LFE109
 8471 0170 00000000 		.4byte	.LFB110
 8472 0174 24010000 		.4byte	.LFE110
 8473 0178 00000000 		.4byte	.LFB111
 8474 017c C0000000 		.4byte	.LFE111
 8475 0180 00000000 		.4byte	.LFB112
 8476 0184 50000000 		.4byte	.LFE112
 8477 0188 00000000 		.4byte	0
 8478 018c 00000000 		.4byte	0
 8479              		.section	.debug_line,"",%progbits
 8480              	.Ldebug_line0:
 8481 0000 030A0000 		.section	.debug_str,"MS",%progbits,1
 8481      0200FC01 
 8481      00000201 
 8481      FB0E0D00 
 8481      01010101 
 8482              	.LASF74:
 8483 0000 70635461 		.ascii	"pcTaskName\000"
 8483      736B4E61 
 8483      6D6500
 8484              	.LASF38:
 8485 000b 75784E75 		.ascii	"uxNumberOfItems\000"
 8485      6D626572 
 8485      4F664974 
 8485      656D7300 
 8486              	.LASF211:
 8487 001b 46726565 		.ascii	"FreeRTOS\\tasks.c\000"
 8487      52544F53 
 8487      5C746173 
 8487      6B732E63 
 8487      00
 8488              	.LASF72:
 8489 002c 75785072 		.ascii	"uxPriority\000"
 8489      696F7269 
 8489      747900
 8490              	.LASF136:
 8491 0037 7078436F 		.ascii	"pxConstList\000"
 8491      6E73744C 
 8491      69737400 
 8492              	.LASF106:
 8493 0043 70785374 		.ascii	"pxStateList\000"
 8493      6174654C 
 8493      69737400 
 8494              	.LASF46:
 8495 004f 65537573 		.ascii	"eSuspended\000"
 8495      70656E64 
 8495      656400
 8496              	.LASF68:
 8497 005a 74736B54 		.ascii	"tskTaskControlBlock\000"
 8497      61736B43 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 233


 8497      6F6E7472 
 8497      6F6C426C 
 8497      6F636B00 
 8498              	.LASF177:
 8499 006e 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 8499      7473546F 
 8499      436C6561 
 8499      724F6E45 
 8499      78697400 
 8500              	.LASF170:
 8501 0082 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 8501      736B4765 
 8501      744E756D 
 8501      6265724F 
 8501      66546173 
 8502              	.LASF186:
 8503 0099 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 8503      67686572 
 8503      5072696F 
 8503      72697479 
 8503      5461736B 
 8504              	.LASF49:
 8505 00b3 654E6F41 		.ascii	"eNoAction\000"
 8505      6374696F 
 8505      6E00
 8506              	.LASF200:
 8507 00bd 7578546F 		.ascii	"uxTopReadyPriority\000"
 8507      70526561 
 8507      64795072 
 8507      696F7269 
 8507      747900
 8508              	.LASF0:
 8509 00d0 756E7369 		.ascii	"unsigned int\000"
 8509      676E6564 
 8509      20696E74 
 8509      00
 8510              	.LASF138:
 8511 00dd 70784576 		.ascii	"pxEventList\000"
 8511      656E744C 
 8511      69737400 
 8512              	.LASF201:
 8513 00e9 78536368 		.ascii	"xSchedulerRunning\000"
 8513      6564756C 
 8513      65725275 
 8513      6E6E696E 
 8513      6700
 8514              	.LASF39:
 8515 00fb 7078496E 		.ascii	"pxIndex\000"
 8515      64657800 
 8516              	.LASF166:
 8517 0103 76546173 		.ascii	"vTaskPriorityInherit\000"
 8517      6B507269 
 8517      6F726974 
 8517      79496E68 
 8517      65726974 
 8518              	.LASF24:
 8519 0118 53746163 		.ascii	"StackType_t\000"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 234


 8519      6B547970 
 8519      655F7400 
 8520              	.LASF55:
 8521 0124 7854494D 		.ascii	"xTIME_OUT\000"
 8521      455F4F55 
 8521      5400
 8522              	.LASF10:
 8523 012e 5F5F696E 		.ascii	"__int32_t\000"
 8523      7433325F 
 8523      7400
 8524              	.LASF34:
 8525 0138 784C4953 		.ascii	"xLIST_ITEM\000"
 8525      545F4954 
 8525      454D00
 8526              	.LASF189:
 8527 0143 70785265 		.ascii	"pxReadyTasksLists\000"
 8527      61647954 
 8527      61736B73 
 8527      4C697374 
 8527      7300
 8528              	.LASF66:
 8529 0155 654E6F74 		.ascii	"eNotified\000"
 8529      69666965 
 8529      6400
 8530              	.LASF210:
 8531 015f 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 8531      43313120 
 8531      352E342E 
 8531      31203230 
 8531      31363036 
 8532 0192 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 8532      20726576 
 8532      6973696F 
 8532      6E203233 
 8532      37373135 
 8533 01c5 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 8533      66756E63 
 8533      74696F6E 
 8533      2D736563 
 8533      74696F6E 
 8534              	.LASF145:
 8535 01ed 76546173 		.ascii	"vTaskSetTimeOutState\000"
 8535      6B536574 
 8535      54696D65 
 8535      4F757453 
 8535      74617465 
 8536              	.LASF185:
 8537 0202 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 8537      6B47656E 
 8537      65726963 
 8537      4E6F7469 
 8537      66794672 
 8538              	.LASF129:
 8539 021c 78546173 		.ascii	"xTaskIncrementTick\000"
 8539      6B496E63 
 8539      72656D65 
 8539      6E745469 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 235


 8539      636B00
 8540              	.LASF214:
 8541 022f 756C4269 		.ascii	"ulBitmap\000"
 8541      746D6170 
 8541      00
 8542              	.LASF190:
 8543 0238 7844656C 		.ascii	"xDelayedTaskList1\000"
 8543      61796564 
 8543      5461736B 
 8543      4C697374 
 8543      3100
 8544              	.LASF191:
 8545 024a 7844656C 		.ascii	"xDelayedTaskList2\000"
 8545      61796564 
 8545      5461736B 
 8545      4C697374 
 8545      3200
 8546              	.LASF56:
 8547 025c 784F7665 		.ascii	"xOverflowCount\000"
 8547      72666C6F 
 8547      77436F75 
 8547      6E7400
 8548              	.LASF70:
 8549 026b 7847656E 		.ascii	"xGenericListItem\000"
 8549      65726963 
 8549      4C697374 
 8549      4974656D 
 8549      00
 8550              	.LASF62:
 8551 027c 756C5061 		.ascii	"ulParameters\000"
 8551      72616D65 
 8551      74657273 
 8551      00
 8552              	.LASF105:
 8553 0289 65526574 		.ascii	"eReturn\000"
 8553      75726E00 
 8554              	.LASF157:
 8555 0291 70727641 		.ascii	"prvAllocateTCBAndStack\000"
 8555      6C6C6F63 
 8555      61746554 
 8555      4342416E 
 8555      64537461 
 8556              	.LASF119:
 8557 02a8 78546173 		.ascii	"xTaskToResume\000"
 8557      6B546F52 
 8557      6573756D 
 8557      6500
 8558              	.LASF108:
 8559 02b6 75785265 		.ascii	"uxReturn\000"
 8559      7475726E 
 8559      00
 8560              	.LASF78:
 8561 02bf 654E6F74 		.ascii	"eNotifyState\000"
 8561      69667953 
 8561      74617465 
 8561      00
 8562              	.LASF79:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 236


 8563 02cc 74736B54 		.ascii	"tskTCB\000"
 8563      434200
 8564              	.LASF121:
 8565 02d3 75785361 		.ascii	"uxSavedInterruptStatus\000"
 8565      76656449 
 8565      6E746572 
 8565      72757074 
 8565      53746174 
 8566              	.LASF20:
 8567 02ea 75696E74 		.ascii	"uint32_t\000"
 8567      33325F74 
 8567      00
 8568              	.LASF115:
 8569 02f3 78596965 		.ascii	"xYieldRequired\000"
 8569      6C645265 
 8569      71756972 
 8569      656400
 8570              	.LASF179:
 8571 0302 78546173 		.ascii	"xTaskGenericNotify\000"
 8571      6B47656E 
 8571      65726963 
 8571      4E6F7469 
 8571      667900
 8572              	.LASF21:
 8573 0315 666C6F61 		.ascii	"float\000"
 8573      7400
 8574              	.LASF142:
 8575 031b 7078556E 		.ascii	"pxUnblockedTCB\000"
 8575      626C6F63 
 8575      6B656454 
 8575      434200
 8576              	.LASF83:
 8577 032a 75735374 		.ascii	"usStackDepth\000"
 8577      61636B44 
 8577      65707468 
 8577      00
 8578              	.LASF173:
 8579 0337 78436C65 		.ascii	"xClearCountOnExit\000"
 8579      6172436F 
 8579      756E744F 
 8579      6E457869 
 8579      7400
 8580              	.LASF52:
 8581 0349 65536574 		.ascii	"eSetValueWithOverwrite\000"
 8581      56616C75 
 8581      65576974 
 8581      684F7665 
 8581      72777269 
 8582              	.LASF14:
 8583 0360 6C6F6E67 		.ascii	"long long unsigned int\000"
 8583      206C6F6E 
 8583      6720756E 
 8583      7369676E 
 8583      65642069 
 8584              	.LASF128:
 8585 0377 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 8585      6B476574 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 237


 8585      5469636B 
 8585      436F756E 
 8585      7446726F 
 8586              	.LASF110:
 8587 0390 75785361 		.ascii	"uxSavedInterruptState\000"
 8587      76656449 
 8587      6E746572 
 8587      72757074 
 8587      53746174 
 8588              	.LASF176:
 8589 03a6 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 8589      7473546F 
 8589      436C6561 
 8589      724F6E45 
 8589      6E747279 
 8590              	.LASF194:
 8591 03bb 7850656E 		.ascii	"xPendingReadyList\000"
 8591      64696E67 
 8591      52656164 
 8591      794C6973 
 8591      7400
 8592              	.LASF30:
 8593 03cd 70785072 		.ascii	"pxPrevious\000"
 8593      6576696F 
 8593      757300
 8594              	.LASF195:
 8595 03d8 78546173 		.ascii	"xTasksWaitingTermination\000"
 8595      6B735761 
 8595      6974696E 
 8595      67546572 
 8595      6D696E61 
 8596              	.LASF8:
 8597 03f1 5F5F7569 		.ascii	"__uint16_t\000"
 8597      6E743136 
 8597      5F7400
 8598              	.LASF120:
 8599 03fc 78546173 		.ascii	"xTaskResumeFromISR\000"
 8599      6B526573 
 8599      756D6546 
 8599      726F6D49 
 8599      535200
 8600              	.LASF124:
 8601 040f 76546173 		.ascii	"vTaskSuspendAll\000"
 8601      6B537573 
 8601      70656E64 
 8601      416C6C00 
 8602              	.LASF161:
 8603 041f 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 8603      736B4765 
 8603      74537461 
 8603      636B4869 
 8603      67685761 
 8604              	.LASF184:
 8605 043b 654F7269 		.ascii	"eOriginalNotifyState\000"
 8605      67696E61 
 8605      6C4E6F74 
 8605      69667953 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 238


 8605      74617465 
 8606              	.LASF54:
 8607 0450 654E6F74 		.ascii	"eNotifyAction\000"
 8607      69667941 
 8607      6374696F 
 8607      6E00
 8608              	.LASF4:
 8609 045e 73697A65 		.ascii	"size_t\000"
 8609      5F7400
 8610              	.LASF51:
 8611 0465 65496E63 		.ascii	"eIncrement\000"
 8611      72656D65 
 8611      6E7400
 8612              	.LASF35:
 8613 0470 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 8613      495F4C49 
 8613      53545F49 
 8613      54454D00 
 8614              	.LASF196:
 8615 0480 75785461 		.ascii	"uxTasksDeleted\000"
 8615      736B7344 
 8615      656C6574 
 8615      656400
 8616              	.LASF159:
 8617 048f 70756353 		.ascii	"pucStackByte\000"
 8617      7461636B 
 8617      42797465 
 8617      00
 8618              	.LASF37:
 8619 049c 784C4953 		.ascii	"xLIST\000"
 8619      5400
 8620              	.LASF123:
 8621 04a2 76546173 		.ascii	"vTaskEndScheduler\000"
 8621      6B456E64 
 8621      53636865 
 8621      64756C65 
 8621      7200
 8622              	.LASF107:
 8623 04b4 75785461 		.ascii	"uxTaskPriorityGet\000"
 8623      736B5072 
 8623      696F7269 
 8623      74794765 
 8623      7400
 8624              	.LASF99:
 8625 04c6 78436F6E 		.ascii	"xConstTickCount\000"
 8625      73745469 
 8625      636B436F 
 8625      756E7400 
 8626              	.LASF197:
 8627 04d6 78537573 		.ascii	"xSuspendedTaskList\000"
 8627      70656E64 
 8627      65645461 
 8627      736B4C69 
 8627      737400
 8628              	.LASF82:
 8629 04e9 70634E61 		.ascii	"pcName\000"
 8629      6D6500
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 239


 8630              	.LASF160:
 8631 04f0 756C436F 		.ascii	"ulCount\000"
 8631      756E7400 
 8632              	.LASF193:
 8633 04f8 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 8633      6572666C 
 8633      6F774465 
 8633      6C617965 
 8633      64546173 
 8634              	.LASF131:
 8635 0512 70785465 		.ascii	"pxTemp\000"
 8635      6D7000
 8636              	.LASF137:
 8637 0519 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 8637      6B506C61 
 8637      63654F6E 
 8637      4576656E 
 8637      744C6973 
 8638              	.LASF100:
 8639 052f 76546173 		.ascii	"vTaskDelay\000"
 8639      6B44656C 
 8639      617900
 8640              	.LASF171:
 8641 053a 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 8641      736B496E 
 8641      6372656D 
 8641      656E744D 
 8641      75746578 
 8642              	.LASF77:
 8643 0558 756C4E6F 		.ascii	"ulNotifiedValue\000"
 8643      74696669 
 8643      65645661 
 8643      6C756500 
 8644              	.LASF76:
 8645 0568 75784D75 		.ascii	"uxMutexesHeld\000"
 8645      74657865 
 8645      7348656C 
 8645      6400
 8646              	.LASF168:
 8647 0576 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 8647      6B507269 
 8647      6F726974 
 8647      79446973 
 8647      696E6865 
 8648              	.LASF141:
 8649 058e 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 8649      6B52656D 
 8649      6F766546 
 8649      726F6D45 
 8649      76656E74 
 8650              	.LASF16:
 8651 05a7 63686172 		.ascii	"char\000"
 8651      00
 8652              	.LASF33:
 8653 05ac 4C697374 		.ascii	"ListItem_t\000"
 8653      4974656D 
 8653      5F7400
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 240


 8654              	.LASF53:
 8655 05b7 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 8655      56616C75 
 8655      65576974 
 8655      686F7574 
 8655      4F766572 
 8656              	.LASF175:
 8657 05d1 78546173 		.ascii	"xTaskNotifyWait\000"
 8657      6B4E6F74 
 8657      69667957 
 8657      61697400 
 8658              	.LASF26:
 8659 05e1 55426173 		.ascii	"UBaseType_t\000"
 8659      65547970 
 8659      655F7400 
 8660              	.LASF98:
 8661 05ed 7853686F 		.ascii	"xShouldDelay\000"
 8661      756C6444 
 8661      656C6179 
 8661      00
 8662              	.LASF150:
 8663 05fa 70727649 		.ascii	"prvIdleTask\000"
 8663      646C6554 
 8663      61736B00 
 8664              	.LASF40:
 8665 0606 784C6973 		.ascii	"xListEnd\000"
 8665      74456E64 
 8665      00
 8666              	.LASF154:
 8667 060f 784C6973 		.ascii	"xListIsEmpty\000"
 8667      74497345 
 8667      6D707479 
 8667      00
 8668              	.LASF172:
 8669 061c 756C5461 		.ascii	"ulTaskNotifyTake\000"
 8669      736B4E6F 
 8669      74696679 
 8669      54616B65 
 8669      00
 8670              	.LASF36:
 8671 062d 4D696E69 		.ascii	"MiniListItem_t\000"
 8671      4C697374 
 8671      4974656D 
 8671      5F7400
 8672              	.LASF17:
 8673 063c 75696E74 		.ascii	"uint8_t\000"
 8673      385F7400 
 8674              	.LASF44:
 8675 0644 65526561 		.ascii	"eReady\000"
 8675      647900
 8676              	.LASF103:
 8677 064b 65546173 		.ascii	"eTaskGetState\000"
 8677      6B476574 
 8677      53746174 
 8677      6500
 8678              	.LASF89:
 8679 0659 70784E65 		.ascii	"pxNewTCB\000"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 241


 8679      77544342 
 8679      00
 8680              	.LASF81:
 8681 0662 70785461 		.ascii	"pxTaskCode\000"
 8681      736B436F 
 8681      646500
 8682              	.LASF63:
 8683 066d 4D656D6F 		.ascii	"MemoryRegion_t\000"
 8683      72795265 
 8683      67696F6E 
 8683      5F7400
 8684              	.LASF206:
 8685 067c 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 8685      74546173 
 8685      6B556E62 
 8685      6C6F636B 
 8685      54696D65 
 8686              	.LASF199:
 8687 0691 78546963 		.ascii	"xTickCount\000"
 8687      6B436F75 
 8687      6E7400
 8688              	.LASF1:
 8689 069c 6C6F6E67 		.ascii	"long long int\000"
 8689      206C6F6E 
 8689      6720696E 
 8689      7400
 8690              	.LASF47:
 8691 06aa 6544656C 		.ascii	"eDeleted\000"
 8691      65746564 
 8691      00
 8692              	.LASF213:
 8693 06b3 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 8693      7274436F 
 8693      756E744C 
 8693      65616469 
 8693      6E675A65 
 8694              	.LASF61:
 8695 06cb 756C4C65 		.ascii	"ulLengthInBytes\000"
 8695      6E677468 
 8695      496E4279 
 8695      74657300 
 8696              	.LASF25:
 8697 06db 42617365 		.ascii	"BaseType_t\000"
 8697      54797065 
 8697      5F7400
 8698              	.LASF134:
 8699 06e6 756C4368 		.ascii	"ulCheckValue\000"
 8699      65636B56 
 8699      616C7565 
 8699      00
 8700              	.LASF164:
 8701 06f3 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 8701      65736574 
 8701      4E657874 
 8701      5461736B 
 8701      556E626C 
 8702              	.LASF57:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 242


 8703 070f 7854696D 		.ascii	"xTimeOnEntering\000"
 8703      654F6E45 
 8703      6E746572 
 8703      696E6700 
 8704              	.LASF112:
 8705 071f 75784E65 		.ascii	"uxNewPriority\000"
 8705      77507269 
 8705      6F726974 
 8705      7900
 8706              	.LASF23:
 8707 072d 5461736B 		.ascii	"TaskFunction_t\000"
 8707      46756E63 
 8707      74696F6E 
 8707      5F7400
 8708              	.LASF29:
 8709 073c 70784E65 		.ascii	"pxNext\000"
 8709      787400
 8710              	.LASF183:
 8711 0743 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 8711      72657669 
 8711      6F75734E 
 8711      6F746966 
 8711      69636174 
 8712              	.LASF65:
 8713 0760 65576169 		.ascii	"eWaitingNotification\000"
 8713      74696E67 
 8713      4E6F7469 
 8713      66696361 
 8713      74696F6E 
 8714              	.LASF146:
 8715 0775 70785469 		.ascii	"pxTimeOut\000"
 8715      6D654F75 
 8715      7400
 8716              	.LASF109:
 8717 077f 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 8717      736B5072 
 8717      696F7269 
 8717      74794765 
 8717      7446726F 
 8718              	.LASF126:
 8719 0798 78546173 		.ascii	"xTaskGetTickCount\000"
 8719      6B476574 
 8719      5469636B 
 8719      436F756E 
 8719      7400
 8720              	.LASF58:
 8721 07aa 54696D65 		.ascii	"TimeOut_t\000"
 8721      4F75745F 
 8721      7400
 8722              	.LASF205:
 8723 07b4 75785461 		.ascii	"uxTaskNumber\000"
 8723      736B4E75 
 8723      6D626572 
 8723      00
 8724              	.LASF42:
 8725 07c1 5461736B 		.ascii	"TaskHandle_t\000"
 8725      48616E64 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 243


 8725      6C655F74 
 8725      00
 8726              	.LASF182:
 8727 07ce 65416374 		.ascii	"eAction\000"
 8727      696F6E00 
 8728              	.LASF169:
 8729 07d6 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 8729      736B5265 
 8729      73657445 
 8729      76656E74 
 8729      4974656D 
 8730              	.LASF111:
 8731 07f0 76546173 		.ascii	"vTaskPrioritySet\000"
 8731      6B507269 
 8731      6F726974 
 8731      79536574 
 8731      00
 8732              	.LASF48:
 8733 0801 65546173 		.ascii	"eTaskState\000"
 8733      6B537461 
 8733      746500
 8734              	.LASF67:
 8735 080c 654E6F74 		.ascii	"eNotifyValue\000"
 8735      69667956 
 8735      616C7565 
 8735      00
 8736              	.LASF41:
 8737 0819 4C697374 		.ascii	"List_t\000"
 8737      5F7400
 8738              	.LASF27:
 8739 0820 5469636B 		.ascii	"TickType_t\000"
 8739      54797065 
 8739      5F7400
 8740              	.LASF180:
 8741 082b 78546173 		.ascii	"xTaskToNotify\000"
 8741      6B546F4E 
 8741      6F746966 
 8741      7900
 8742              	.LASF104:
 8743 0839 78546173 		.ascii	"xTask\000"
 8743      6B00
 8744              	.LASF50:
 8745 083f 65536574 		.ascii	"eSetBits\000"
 8745      42697473 
 8745      00
 8746              	.LASF151:
 8747 0848 70727649 		.ascii	"prvInitialiseTCBVariables\000"
 8747      6E697469 
 8747      616C6973 
 8747      65544342 
 8747      56617269 
 8748              	.LASF2:
 8749 0862 6C6F6E67 		.ascii	"long double\000"
 8749      20646F75 
 8749      626C6500 
 8750              	.LASF59:
 8751 086e 784D454D 		.ascii	"xMEMORY_REGION\000"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 244


 8751      4F52595F 
 8751      52454749 
 8751      4F4E00
 8752              	.LASF18:
 8753 087d 75696E74 		.ascii	"uint16_t\000"
 8753      31365F74 
 8753      00
 8754              	.LASF92:
 8755 0886 76546173 		.ascii	"vTaskDelete\000"
 8755      6B44656C 
 8755      65746500 
 8756              	.LASF102:
 8757 0892 78546173 		.ascii	"xTaskGenericCreate\000"
 8757      6B47656E 
 8757      65726963 
 8757      43726561 
 8757      746500
 8758              	.LASF132:
 8759 08a5 76546173 		.ascii	"vTaskSwitchContext\000"
 8759      6B537769 
 8759      74636843 
 8759      6F6E7465 
 8759      787400
 8760              	.LASF204:
 8761 08b8 784E756D 		.ascii	"xNumOfOverflows\000"
 8761      4F664F76 
 8761      6572666C 
 8761      6F777300 
 8762              	.LASF32:
 8763 08c8 7076436F 		.ascii	"pvContainer\000"
 8763      6E746169 
 8763      6E657200 
 8764              	.LASF209:
 8765 08d4 70784375 		.ascii	"pxCurrentTCB\000"
 8765      7272656E 
 8765      74544342 
 8765      00
 8766              	.LASF7:
 8767 08e1 73686F72 		.ascii	"short int\000"
 8767      7420696E 
 8767      7400
 8768              	.LASF84:
 8769 08eb 70765061 		.ascii	"pvParameters\000"
 8769      72616D65 
 8769      74657273 
 8769      00
 8770              	.LASF28:
 8771 08f8 78497465 		.ascii	"xItemValue\000"
 8771      6D56616C 
 8771      756500
 8772              	.LASF11:
 8773 0903 6C6F6E67 		.ascii	"long int\000"
 8773      20696E74 
 8773      00
 8774              	.LASF208:
 8775 090c 49544D5F 		.ascii	"ITM_RxBuffer\000"
 8775      52784275 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 245


 8775      66666572 
 8775      00
 8776              	.LASF125:
 8777 0919 78546173 		.ascii	"xTaskResumeAll\000"
 8777      6B526573 
 8777      756D6541 
 8777      6C6C00
 8778              	.LASF187:
 8779 0928 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 8779      6B4E6F74 
 8779      69667947 
 8779      69766546 
 8779      726F6D49 
 8780              	.LASF192:
 8781 093f 70784465 		.ascii	"pxDelayedTaskList\000"
 8781      6C617965 
 8781      64546173 
 8781      6B4C6973 
 8781      7400
 8782              	.LASF156:
 8783 0951 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 8783      61736B49 
 8783      73546173 
 8783      6B537573 
 8783      70656E64 
 8784              	.LASF130:
 8785 0968 78537769 		.ascii	"xSwitchRequired\000"
 8785      74636852 
 8785      65717569 
 8785      72656400 
 8786              	.LASF167:
 8787 0978 70784D75 		.ascii	"pxMutexHolder\000"
 8787      74657848 
 8787      6F6C6465 
 8787      7200
 8788              	.LASF73:
 8789 0986 70785374 		.ascii	"pxStack\000"
 8789      61636B00 
 8790              	.LASF90:
 8791 098e 78546173 		.ascii	"xTaskToDelete\000"
 8791      6B546F44 
 8791      656C6574 
 8791      6500
 8792              	.LASF181:
 8793 099c 756C5661 		.ascii	"ulValue\000"
 8793      6C756500 
 8794              	.LASF117:
 8795 09a4 78546173 		.ascii	"xTaskToSuspend\000"
 8795      6B546F53 
 8795      75737065 
 8795      6E6400
 8796              	.LASF147:
 8797 09b3 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 8797      6B436865 
 8797      636B466F 
 8797      7254696D 
 8797      654F7574 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 246


 8798              	.LASF212:
 8799 09c8 453A5C50 		.ascii	"E:\\PSoC_Creator\\CY8CKIT-059\\CY8CKIT-059_CW_Decod"
 8799      536F435F 
 8799      43726561 
 8799      746F725C 
 8799      43593843 
 8800 09f8 65725F55 		.ascii	"er_USB\\CY8CKIT-059_CW_Decoder_USB.cydsn\000"
 8800      53425C43 
 8800      5938434B 
 8800      49542D30 
 8800      35395F43 
 8801              	.LASF94:
 8802 0a20 70785072 		.ascii	"pxPreviousWakeTime\000"
 8802      6576696F 
 8802      75735761 
 8802      6B655469 
 8802      6D6500
 8803              	.LASF5:
 8804 0a33 5F5F7569 		.ascii	"__uint8_t\000"
 8804      6E74385F 
 8804      7400
 8805              	.LASF64:
 8806 0a3d 654E6F74 		.ascii	"eNotWaitingNotification\000"
 8806      57616974 
 8806      696E674E 
 8806      6F746966 
 8806      69636174 
 8807              	.LASF215:
 8808 0a55 75635265 		.ascii	"ucReturn\000"
 8808      7475726E 
 8808      00
 8809              	.LASF178:
 8810 0a5e 70756C4E 		.ascii	"pulNotificationValue\000"
 8810      6F746966 
 8810      69636174 
 8810      696F6E56 
 8810      616C7565 
 8811              	.LASF88:
 8812 0a73 78526574 		.ascii	"xReturn\000"
 8812      75726E00 
 8813              	.LASF15:
 8814 0a7b 73697A65 		.ascii	"sizetype\000"
 8814      74797065 
 8814      00
 8815              	.LASF149:
 8816 0a84 76546173 		.ascii	"vTaskMissedYield\000"
 8816      6B4D6973 
 8816      73656459 
 8816      69656C64 
 8816      00
 8817              	.LASF202:
 8818 0a95 75785065 		.ascii	"uxPendedTicks\000"
 8818      6E646564 
 8818      5469636B 
 8818      7300
 8819              	.LASF13:
 8820 0aa3 6C6F6E67 		.ascii	"long unsigned int\000"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 247


 8820      20756E73 
 8820      69676E65 
 8820      6420696E 
 8820      7400
 8821              	.LASF162:
 8822 0ab5 70756345 		.ascii	"pucEndOfStack\000"
 8822      6E644F66 
 8822      53746163 
 8822      6B00
 8823              	.LASF19:
 8824 0ac3 696E7433 		.ascii	"int32_t\000"
 8824      325F7400 
 8825              	.LASF127:
 8826 0acb 78546963 		.ascii	"xTicks\000"
 8826      6B7300
 8827              	.LASF122:
 8828 0ad2 76546173 		.ascii	"vTaskStartScheduler\000"
 8828      6B537461 
 8828      72745363 
 8828      68656475 
 8828      6C657200 
 8829              	.LASF43:
 8830 0ae6 6552756E 		.ascii	"eRunning\000"
 8830      6E696E67 
 8830      00
 8831              	.LASF133:
 8832 0aef 70756C53 		.ascii	"pulStack\000"
 8832      7461636B 
 8832      00
 8833              	.LASF60:
 8834 0af8 70764261 		.ascii	"pvBaseAddress\000"
 8834      73654164 
 8834      64726573 
 8834      7300
 8835              	.LASF101:
 8836 0b06 78546963 		.ascii	"xTicksToDelay\000"
 8836      6B73546F 
 8836      44656C61 
 8836      7900
 8837              	.LASF6:
 8838 0b14 756E7369 		.ascii	"unsigned char\000"
 8838      676E6564 
 8838      20636861 
 8838      7200
 8839              	.LASF140:
 8840 0b22 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 8840      6B506C61 
 8840      63654F6E 
 8840      556E6F72 
 8840      64657265 
 8841              	.LASF143:
 8842 0b41 78546173 		.ascii	"xTaskRemoveFromUnorderedEventList\000"
 8842      6B52656D 
 8842      6F766546 
 8842      726F6D55 
 8842      6E6F7264 
 8843              	.LASF12:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 248


 8844 0b63 5F5F7569 		.ascii	"__uint32_t\000"
 8844      6E743332 
 8844      5F7400
 8845              	.LASF148:
 8846 0b6e 70785469 		.ascii	"pxTicksToWait\000"
 8846      636B7354 
 8846      6F576169 
 8846      7400
 8847              	.LASF135:
 8848 0b7c 7578546F 		.ascii	"uxTopPriority\000"
 8848      70507269 
 8848      6F726974 
 8848      7900
 8849              	.LASF75:
 8850 0b8a 75784261 		.ascii	"uxBasePriority\000"
 8850      73655072 
 8850      696F7269 
 8850      747900
 8851              	.LASF93:
 8852 0b99 76546173 		.ascii	"vTaskDelayUntil\000"
 8852      6B44656C 
 8852      6179556E 
 8852      74696C00 
 8853              	.LASF71:
 8854 0ba9 78457665 		.ascii	"xEventListItem\000"
 8854      6E744C69 
 8854      73744974 
 8854      656D00
 8855              	.LASF114:
 8856 0bb8 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 8856      696F7269 
 8856      74795573 
 8856      65644F6E 
 8856      456E7472 
 8857              	.LASF80:
 8858 0bce 5443425F 		.ascii	"TCB_t\000"
 8858      7400
 8859              	.LASF139:
 8860 0bd4 78546963 		.ascii	"xTicksToWait\000"
 8860      6B73546F 
 8860      57616974 
 8860      00
 8861              	.LASF31:
 8862 0be1 70764F77 		.ascii	"pvOwner\000"
 8862      6E657200 
 8863              	.LASF163:
 8864 0be9 70727644 		.ascii	"prvDeleteTCB\000"
 8864      656C6574 
 8864      65544342 
 8864      00
 8865              	.LASF45:
 8866 0bf6 65426C6F 		.ascii	"eBlocked\000"
 8866      636B6564 
 8866      00
 8867              	.LASF116:
 8868 0bff 76546173 		.ascii	"vTaskSuspend\000"
 8868      6B537573 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 249


 8868      70656E64 
 8868      00
 8869              	.LASF97:
 8870 0c0c 78416C72 		.ascii	"xAlreadyYielded\000"
 8870      65616479 
 8870      5969656C 
 8870      64656400 
 8871              	.LASF165:
 8872 0c1c 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 8872      6B476574 
 8872      43757272 
 8872      656E7454 
 8872      61736B48 
 8873              	.LASF158:
 8874 0c36 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 8874      61736B43 
 8874      6865636B 
 8874      46726565 
 8874      53746163 
 8875              	.LASF87:
 8876 0c51 78526567 		.ascii	"xRegions\000"
 8876      696F6E73 
 8876      00
 8877              	.LASF155:
 8878 0c5a 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 8878      64644375 
 8878      7272656E 
 8878      74546173 
 8878      6B546F44 
 8879              	.LASF198:
 8880 0c79 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 8880      7272656E 
 8880      744E756D 
 8880      6265724F 
 8880      66546173 
 8881              	.LASF95:
 8882 0c90 7854696D 		.ascii	"xTimeIncrement\000"
 8882      65496E63 
 8882      72656D65 
 8882      6E7400
 8883              	.LASF3:
 8884 0c9f 7369676E 		.ascii	"signed char\000"
 8884      65642063 
 8884      68617200 
 8885              	.LASF9:
 8886 0cab 73686F72 		.ascii	"short unsigned int\000"
 8886      7420756E 
 8886      7369676E 
 8886      65642069 
 8886      6E7400
 8887              	.LASF96:
 8888 0cbe 7854696D 		.ascii	"xTimeToWake\000"
 8888      65546F57 
 8888      616B6500 
 8889              	.LASF188:
 8890 0cca 78546173 		.ascii	"xTaskNotifyStateClear\000"
 8890      6B4E6F74 
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 250


 8890      69667953 
 8890      74617465 
 8890      436C6561 
 8891              	.LASF91:
 8892 0ce0 70785443 		.ascii	"pxTCB\000"
 8892      4200
 8893              	.LASF22:
 8894 0ce6 646F7562 		.ascii	"double\000"
 8894      6C6500
 8895              	.LASF207:
 8896 0ced 75785363 		.ascii	"uxSchedulerSuspended\000"
 8896      68656475 
 8896      6C657253 
 8896      75737065 
 8896      6E646564 
 8897              	.LASF86:
 8898 0d02 70757853 		.ascii	"puxStackBuffer\000"
 8898      7461636B 
 8898      42756666 
 8898      657200
 8899              	.LASF69:
 8900 0d11 7078546F 		.ascii	"pxTopOfStack\000"
 8900      704F6653 
 8900      7461636B 
 8900      00
 8901              	.LASF118:
 8902 0d1e 76546173 		.ascii	"vTaskResume\000"
 8902      6B526573 
 8902      756D6500 
 8903              	.LASF152:
 8904 0d2a 70727649 		.ascii	"prvInitialiseTaskLists\000"
 8904      6E697469 
 8904      616C6973 
 8904      65546173 
 8904      6B4C6973 
 8905              	.LASF144:
 8906 0d41 70784576 		.ascii	"pxEventListItem\000"
 8906      656E744C 
 8906      69737449 
 8906      74656D00 
 8907              	.LASF85:
 8908 0d51 70784372 		.ascii	"pxCreatedTask\000"
 8908      65617465 
 8908      64546173 
 8908      6B00
 8909              	.LASF153:
 8910 0d5f 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 8910      6865636B 
 8910      5461736B 
 8910      73576169 
 8910      74696E67 
 8911              	.LASF174:
 8912 0d7f 756C5265 		.ascii	"ulReturn\000"
 8912      7475726E 
 8912      00
 8913              	.LASF113:
 8914 0d88 75784375 		.ascii	"uxCurrentBasePriority\000"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccqrvaDw.s 			page 251


 8914      7272656E 
 8914      74426173 
 8914      65507269 
 8914      6F726974 
 8915              	.LASF203:
 8916 0d9e 78596965 		.ascii	"xYieldPending\000"
 8916      6C645065 
 8916      6E64696E 
 8916      6700
 8917              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
