ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	xQueue_ROT,4,4
  20              		.comm	xQueue_TONE,4,4
  21              		.comm	xQueue_CHAR,4,4
  22              		.comm	xQueue_WPM,4,4
  23              		.comm	xQueue_TH,4,4
  24              		.global	sign_cntr
  25              		.bss
  26              		.type	sign_cntr, %object
  27              		.size	sign_cntr, 1
  28              	sign_cntr:
  29 0000 00       		.space	1
  30              		.global	Sign_Sin
  31              		.section	.rodata
  32              		.align	2
  33              		.type	Sign_Sin, %object
  34              		.size	Sign_Sin, 20
  35              	Sign_Sin:
  36 0000 01       		.byte	1
  37 0001 01       		.byte	1
  38 0002 01       		.byte	1
  39 0003 01       		.byte	1
  40 0004 01       		.byte	1
  41 0005 01       		.byte	1
  42 0006 01       		.byte	1
  43 0007 01       		.byte	1
  44 0008 01       		.byte	1
  45 0009 01       		.byte	1
  46 000a FF       		.byte	-1
  47 000b FF       		.byte	-1
  48 000c FF       		.byte	-1
  49 000d FF       		.byte	-1
  50 000e FF       		.byte	-1
  51 000f FF       		.byte	-1
  52 0010 FF       		.byte	-1
  53 0011 FF       		.byte	-1
  54 0012 FF       		.byte	-1
  55 0013 FF       		.byte	-1
  56              		.global	Sign_Cos
  57              		.align	2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 2


  58              		.type	Sign_Cos, %object
  59              		.size	Sign_Cos, 20
  60              	Sign_Cos:
  61 0014 01       		.byte	1
  62 0015 01       		.byte	1
  63 0016 01       		.byte	1
  64 0017 01       		.byte	1
  65 0018 01       		.byte	1
  66 0019 FF       		.byte	-1
  67 001a FF       		.byte	-1
  68 001b FF       		.byte	-1
  69 001c FF       		.byte	-1
  70 001d FF       		.byte	-1
  71 001e FF       		.byte	-1
  72 001f FF       		.byte	-1
  73 0020 FF       		.byte	-1
  74 0021 FF       		.byte	-1
  75 0022 FF       		.byte	-1
  76 0023 01       		.byte	1
  77 0024 01       		.byte	1
  78 0025 01       		.byte	1
  79 0026 01       		.byte	1
  80 0027 01       		.byte	1
  81              		.global	acc_v_sin
  82              		.bss
  83 0001 000000   		.align	2
  84              		.type	acc_v_sin, %object
  85              		.size	acc_v_sin, 4
  86              	acc_v_sin:
  87 0004 00000000 		.space	4
  88              		.global	acc_v_cos
  89              		.align	2
  90              		.type	acc_v_cos, %object
  91              		.size	acc_v_cos, 4
  92              	acc_v_cos:
  93 0008 00000000 		.space	4
  94              		.comm	IDelay,32,4
  95              		.comm	IDelayPtr,1,1
  96              		.global	acc_Vrms
  97              		.align	2
  98              		.type	acc_Vrms, %object
  99              		.size	acc_Vrms, 4
 100              	acc_Vrms:
 101 000c 00000000 		.space	4
 102              		.global	int_cntr
 103              		.type	int_cntr, %object
 104              		.size	int_cntr, 1
 105              	int_cntr:
 106 0010 00       		.space	1
 107              		.global	debouunce_cntr
 108              		.data
 109              		.type	debouunce_cntr, %object
 110              		.size	debouunce_cntr, 1
 111              	debouunce_cntr:
 112 0000 02       		.byte	2
 113              		.comm	ComRxCmd,32,4
 114              		.comm	ComRxPtr,1,1
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 3


 115              		.comm	UsbTxBuffer,80,4
 116              		.comm	UsbRxBuffer,256,4
 117              		.section	.rodata
 118              		.align	2
 119              	.LC0:
 120 0028 4C454400 		.ascii	"LED\000"
 121              		.align	2
 122              	.LC1:
 123 002c 55534255 		.ascii	"USBUART\000"
 123      41525400 
 124              		.align	2
 125              	.LC2:
 126 0034 524F5400 		.ascii	"ROT\000"
 127              		.align	2
 128              	.LC3:
 129 0038 544F4E45 		.ascii	"TONE\000"
 129      00
 130              		.section	.text.main,"ax",%progbits
 131              		.align	2
 132              		.global	main
 133              		.thumb
 134              		.thumb_func
 135              		.type	main, %function
 136              	main:
 137              	.LFB65:
 138              		.file 1 "main.c"
   1:main.c        **** //******************************************************************************
   2:main.c        **** // File Name: main.c
   3:main.c        **** //
   4:main.c        **** // Version: 1.10
   5:main.c        **** //
   6:main.c        **** //******************************************************************************
   7:main.c        **** 
   8:main.c        **** // PSoC5
   9:main.c        **** #include <device.h>
  10:main.c        **** #include <stdio.h>
  11:main.c        **** #include <stdlib.h>
  12:main.c        **** #include <math.h>
  13:main.c        **** // FreeRTOS
  14:main.c        **** #include "FreeRTOS.h"
  15:main.c        **** #include "task.h"
  16:main.c        **** #include "queue.h"
  17:main.c        **** #include "semphr.h"
  18:main.c        **** // API
  19:main.c        **** #include "USBUART_FIFO.h"
  20:main.c        **** #include "rot.h"
  21:main.c        **** 
  22:main.c        **** // Project Defines
  23:main.c        **** #define FALSE  0
  24:main.c        **** #define TRUE   1
  25:main.c        **** 
  26:main.c        **** // Resources for FreeRTOS
  27:main.c        **** #define TASK_STACK_LED      128
  28:main.c        **** #define TASK_STACK_USBUART  256
  29:main.c        **** #define TASK_STACK_ROT      128
  30:main.c        **** #define TASK_STACK_KEY      128
  31:main.c        **** #define TASK_STACK_TONE     512
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 4


  32:main.c        **** 
  33:main.c        **** #define TASK_PRIORITY_LED  (tskIDLE_PRIORITY + 4)
  34:main.c        **** #define TASK_PRIORITY_ROT  (tskIDLE_PRIORITY + 3)
  35:main.c        **** #define TASK_PRIORITY_KEY  (tskIDLE_PRIORITY + 3)
  36:main.c        **** #define TASK_PRIORITY_TONE (tskIDLE_PRIORITY + 2)
  37:main.c        **** #define TASK_PRIORITY_USBUART (tskIDLE_PRIORITY + 1)
  38:main.c        **** 
  39:main.c        **** #define USBUART_TIMEOUT 2000000                 // Timeout for USB Connection (adjustment might be 
  40:main.c        **** 
  41:main.c        **** // Function Prototypes
  42:main.c        **** void prvHardwareSetup(void);
  43:main.c        **** void Initialize(void);
  44:main.c        **** void timerISR_1_Routine(void);  // watchdog timer interrupt
  45:main.c        **** void Filter_Handler(void);      // filter interrupt
  46:main.c        **** void DMA_Config(void);
  47:main.c        **** void Task_LED   (void *pvParameters);
  48:main.c        **** void Task_USBUART  (void *pvParameters);
  49:main.c        **** void Task_ROT   (void *pvParameters);
  50:main.c        **** void Task_TONE  (void *pvParameters);
  51:main.c        **** void ReadUSB (void);
  52:main.c        **** void FactorySetup (void);
  53:main.c        **** void Initialize (void);
  54:main.c        **** void ProcessComRx (void);
  55:main.c        **** 
  56:main.c        **** // Global variables for FreeRTOS
  57:main.c        **** xQueueHandle xQueue_ROT;        // Queue Data from Task_ROT(ROT_ENC_Handler)
  58:main.c        **** xQueueHandle xQueue_TONE;       // Queue Data from CY_ISR(Filter_Handler)
  59:main.c        **** xQueueHandle xQueue_CHAR;       // Queue Data from Task_TONE
  60:main.c        **** xQueueHandle xQueue_WPM;        // Queue Data from Task_TONE
  61:main.c        **** xQueueHandle xQueue_TH;         // Queue Data from Task_TONE
  62:main.c        **** 
  63:main.c        **** //#define CORDIC
  64:main.c        **** // Global variables Filter interrupt
  65:main.c        **** #ifndef CORDIC
  66:main.c        **** // SIGN(sin(2pi*(fd/fs)*n) = SIGN(sin(2pi*n/20)) = [1 @cntr=0~9 | 0 @cntr=10~19]
  67:main.c        **** // SIGN(cos(2pi*(fd/fs)*n) = SIGN(cos(2pi*n/20)) = [1 @cntr=0~4,15~19 | 0 @cntr=5~14]
  68:main.c        **** #define SIGN_CNTR_CYCLE     20
  69:main.c        **** uint8   sign_cntr = 0;          // 20 counter
  70:main.c        **** const int8 Sign_Sin[20] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
  71:main.c        **** const int8 Sign_Cos[20] = { 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1 };
  72:main.c        **** int32  acc_v_sin = 0;      // accumulator of RMS for 80 times
  73:main.c        **** int32  acc_v_cos = 0;      // accumulator of RMS for 80 times
  74:main.c        **** #endif
  75:main.c        **** int32   IDelay[8];
  76:main.c        **** uint8   IDelayPtr;
  77:main.c        **** uint32  acc_Vrms = 0;      // accumulator of RMS for 80 times
  78:main.c        **** uint8   int_cntr = 0;      // 80 counter (80 / 16kbps =  5 ms)
  79:main.c        **** uint8   debouunce_cntr = 2;      // debounce counter = 2
  80:main.c        **** 
  81:main.c        **** // Global variables for USBUART
  82:main.c        **** uint8	ComRxCmd [32];				// remote command rx buffer
  83:main.c        **** uint8	ComRxPtr;					// pointer into com rx buffer
  84:main.c        **** uint8	UsbTxBuffer [80];			// USB transmit buffer
  85:main.c        **** uint8	UsbRxBuffer [256];			// USB receive buffer
  86:main.c        **** 
  87:main.c        **** 
  88:main.c        **** extern char MorseCharTraslateTable [];
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 5


  89:main.c        **** //extern uint8 WPM_Table[];
  90:main.c        **** 
  91:main.c        **** //******************************************************************************
  92:main.c        **** // Function Name: main
  93:main.c        **** //******************************************************************************
  94:main.c        **** //
  95:main.c        **** // Summary:
  96:main.c        **** //  Main function performs following functions:
  97:main.c        **** //   1: Enables global interrupts
  98:main.c        **** //   2: Start all components on the schematic
  99:main.c        **** //   3: Calls a function to configure DMA
 100:main.c        **** //
 101:main.c        **** // Parameters:
 102:main.c        **** //  None.
 103:main.c        **** //
 104:main.c        **** // Return:
 105:main.c        **** //  None.
 106:main.c        **** //
 107:main.c        **** //******************************************************************************
 108:main.c        **** int main()
 109:main.c        **** {
 139              		.loc 1 109 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 1, uses_anonymous_args = 0
 143 0000 80B5     		push	{r7, lr}
 144              		.cfi_def_cfa_offset 8
 145              		.cfi_offset 7, -8
 146              		.cfi_offset 14, -4
 147 0002 84B0     		sub	sp, sp, #16
 148              		.cfi_def_cfa_offset 24
 149 0004 04AF     		add	r7, sp, #16
 150              		.cfi_def_cfa 7, 8
 110:main.c        ****     prvHardwareSetup();
 151              		.loc 1 110 0
 152 0006 FFF7FEFF 		bl	prvHardwareSetup
 111:main.c        ****     
 112:main.c        **** 	Initialize();
 153              		.loc 1 112 0
 154 000a FFF7FEFF 		bl	Initialize
 113:main.c        **** 
 114:main.c        ****     // Create Queue
 115:main.c        ****     xQueue_ROT    = xQueueCreate(8, 1);     // 8 x 1byte
 155              		.loc 1 115 0
 156 000e 0022     		movs	r2, #0
 157 0010 0121     		movs	r1, #1
 158 0012 0820     		movs	r0, #8
 159 0014 FFF7FEFF 		bl	xQueueGenericCreate
 160 0018 0246     		mov	r2, r0
 161 001a 2F4B     		ldr	r3, .L3
 162 001c 1A60     		str	r2, [r3]
 116:main.c        ****     xQueue_TONE   = xQueueCreate(8, 1);     // 8 x 1bytes
 163              		.loc 1 116 0
 164 001e 0022     		movs	r2, #0
 165 0020 0121     		movs	r1, #1
 166 0022 0820     		movs	r0, #8
 167 0024 FFF7FEFF 		bl	xQueueGenericCreate
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 6


 168 0028 0246     		mov	r2, r0
 169 002a 2C4B     		ldr	r3, .L3+4
 170 002c 1A60     		str	r2, [r3]
 117:main.c        ****     xQueue_CHAR   = xQueueCreate(8, 1);     // 8 x 1bytes
 171              		.loc 1 117 0
 172 002e 0022     		movs	r2, #0
 173 0030 0121     		movs	r1, #1
 174 0032 0820     		movs	r0, #8
 175 0034 FFF7FEFF 		bl	xQueueGenericCreate
 176 0038 0246     		mov	r2, r0
 177 003a 294B     		ldr	r3, .L3+8
 178 003c 1A60     		str	r2, [r3]
 118:main.c        ****     xQueue_WPM    = xQueueCreate(1, 1);     // 1 x 1bytes
 179              		.loc 1 118 0
 180 003e 0022     		movs	r2, #0
 181 0040 0121     		movs	r1, #1
 182 0042 0120     		movs	r0, #1
 183 0044 FFF7FEFF 		bl	xQueueGenericCreate
 184 0048 0246     		mov	r2, r0
 185 004a 264B     		ldr	r3, .L3+12
 186 004c 1A60     		str	r2, [r3]
 119:main.c        ****     xQueue_TH     = xQueueCreate(1, 1);     // 1 x 1bytes
 187              		.loc 1 119 0
 188 004e 0022     		movs	r2, #0
 189 0050 0121     		movs	r1, #1
 190 0052 0120     		movs	r0, #1
 191 0054 FFF7FEFF 		bl	xQueueGenericCreate
 192 0058 0246     		mov	r2, r0
 193 005a 234B     		ldr	r3, .L3+16
 194 005c 1A60     		str	r2, [r3]
 120:main.c        ****     
 121:main.c        ****     // Create Tasks
 122:main.c        ****     xTaskCreate(Task_LED, "LED", TASK_STACK_LED, NULL, TASK_PRIORITY_LED, NULL);
 195              		.loc 1 122 0
 196 005e 0023     		movs	r3, #0
 197 0060 0393     		str	r3, [sp, #12]
 198 0062 0023     		movs	r3, #0
 199 0064 0293     		str	r3, [sp, #8]
 200 0066 0023     		movs	r3, #0
 201 0068 0193     		str	r3, [sp, #4]
 202 006a 0423     		movs	r3, #4
 203 006c 0093     		str	r3, [sp]
 204 006e 0023     		movs	r3, #0
 205 0070 8022     		movs	r2, #128
 206 0072 1E49     		ldr	r1, .L3+20
 207 0074 1E48     		ldr	r0, .L3+24
 208 0076 FFF7FEFF 		bl	xTaskGenericCreate
 123:main.c        ****     xTaskCreate(Task_USBUART, "USBUART", TASK_STACK_USBUART, NULL, TASK_PRIORITY_USBUART, NULL);
 209              		.loc 1 123 0
 210 007a 0023     		movs	r3, #0
 211 007c 0393     		str	r3, [sp, #12]
 212 007e 0023     		movs	r3, #0
 213 0080 0293     		str	r3, [sp, #8]
 214 0082 0023     		movs	r3, #0
 215 0084 0193     		str	r3, [sp, #4]
 216 0086 0123     		movs	r3, #1
 217 0088 0093     		str	r3, [sp]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 7


 218 008a 0023     		movs	r3, #0
 219 008c 4FF48072 		mov	r2, #256
 220 0090 1849     		ldr	r1, .L3+28
 221 0092 1948     		ldr	r0, .L3+32
 222 0094 FFF7FEFF 		bl	xTaskGenericCreate
 124:main.c        ****     xTaskCreate(Task_ROT, "ROT", TASK_STACK_ROT, NULL, TASK_PRIORITY_ROT, NULL);
 223              		.loc 1 124 0
 224 0098 0023     		movs	r3, #0
 225 009a 0393     		str	r3, [sp, #12]
 226 009c 0023     		movs	r3, #0
 227 009e 0293     		str	r3, [sp, #8]
 228 00a0 0023     		movs	r3, #0
 229 00a2 0193     		str	r3, [sp, #4]
 230 00a4 0323     		movs	r3, #3
 231 00a6 0093     		str	r3, [sp]
 232 00a8 0023     		movs	r3, #0
 233 00aa 8022     		movs	r2, #128
 234 00ac 1349     		ldr	r1, .L3+36
 235 00ae 1448     		ldr	r0, .L3+40
 236 00b0 FFF7FEFF 		bl	xTaskGenericCreate
 125:main.c        ****     xTaskCreate(Task_TONE, "TONE", TASK_STACK_TONE, NULL, TASK_PRIORITY_TONE, NULL);
 237              		.loc 1 125 0
 238 00b4 0023     		movs	r3, #0
 239 00b6 0393     		str	r3, [sp, #12]
 240 00b8 0023     		movs	r3, #0
 241 00ba 0293     		str	r3, [sp, #8]
 242 00bc 0023     		movs	r3, #0
 243 00be 0193     		str	r3, [sp, #4]
 244 00c0 0223     		movs	r3, #2
 245 00c2 0093     		str	r3, [sp]
 246 00c4 0023     		movs	r3, #0
 247 00c6 4FF40072 		mov	r2, #512
 248 00ca 0E49     		ldr	r1, .L3+44
 249 00cc 0E48     		ldr	r0, .L3+48
 250 00ce FFF7FEFF 		bl	xTaskGenericCreate
 126:main.c        **** 
 127:main.c        ****     // Start RTOS Kernel
 128:main.c        ****     vTaskStartScheduler();
 251              		.loc 1 128 0
 252 00d2 FFF7FEFF 		bl	vTaskStartScheduler
 253              	.L2:
 129:main.c        **** 
 130:main.c        ****     for(;;)
 131:main.c        ****     {
 132:main.c        ****         
 133:main.c        ****         // Place your application code here.
 134:main.c        ****         
 135:main.c        ****     }
 254              		.loc 1 135 0 discriminator 1
 255 00d6 FEE7     		b	.L2
 256              	.L4:
 257              		.align	2
 258              	.L3:
 259 00d8 00000000 		.word	xQueue_ROT
 260 00dc 00000000 		.word	xQueue_TONE
 261 00e0 00000000 		.word	xQueue_CHAR
 262 00e4 00000000 		.word	xQueue_WPM
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 8


 263 00e8 00000000 		.word	xQueue_TH
 264 00ec 28000000 		.word	.LC0
 265 00f0 00000000 		.word	Task_LED
 266 00f4 2C000000 		.word	.LC1
 267 00f8 00000000 		.word	Task_USBUART
 268 00fc 34000000 		.word	.LC2
 269 0100 00000000 		.word	Task_ROT
 270 0104 38000000 		.word	.LC3
 271 0108 00000000 		.word	Task_TONE
 272              		.cfi_endproc
 273              	.LFE65:
 274              		.size	main, .-main
 275              		.section	.text.Initialize,"ax",%progbits
 276              		.align	2
 277              		.global	Initialize
 278              		.thumb
 279              		.thumb_func
 280              		.type	Initialize, %function
 281              	Initialize:
 282              	.LFB66:
 136:main.c        **** } // End of main
 137:main.c        **** 
 138:main.c        **** //----------------------------------------------------------------------------
 139:main.c        **** //
 140:main.c        **** //	Initialize and configure hardware, initialize variables
 141:main.c        **** //
 142:main.c        **** //----------------------------------------------------------------------------
 143:main.c        **** void Initialize (void)
 144:main.c        **** {
 283              		.loc 1 144 0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 8
 286              		@ frame_needed = 1, uses_anonymous_args = 0
 287 0000 80B5     		push	{r7, lr}
 288              		.cfi_def_cfa_offset 8
 289              		.cfi_offset 7, -8
 290              		.cfi_offset 14, -4
 291 0002 82B0     		sub	sp, sp, #8
 292              		.cfi_def_cfa_offset 16
 293 0004 00AF     		add	r7, sp, #0
 294              		.cfi_def_cfa_register 7
 145:main.c        **** 
 146:main.c        ****     // Watchdog Timer Enable.
 147:main.c        ****     timerISR_1_StartEx(timerISR_1_Routine);
 295              		.loc 1 147 0
 296 0006 2048     		ldr	r0, .L8
 297 0008 FFF7FEFF 		bl	timerISR_1_StartEx
 148:main.c        ****     Timer_1_Start();
 298              		.loc 1 148 0
 299 000c FFF7FEFF 		bl	Timer_1_Start
 149:main.c        ****     CyWdtStart(CYWDT_1024_TICKS,CYWDT_LPMODE_NOCHANGE);
 300              		.loc 1 149 0
 301 0010 0021     		movs	r1, #0
 302 0012 0320     		movs	r0, #3
 303 0014 FFF7FEFF 		bl	CyWdtStart
 150:main.c        ****     
 151:main.c        ****     // Initialize API
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 9


 152:main.c        ****     Init_ROT();
 304              		.loc 1 152 0
 305 0018 FFF7FEFF 		bl	Init_ROT
 153:main.c        **** 
 154:main.c        ****     // Start all components used on schematic
 155:main.c        ****     ADC_DelSig_IRQ_Start();
 306              		.loc 1 155 0
 307 001c FFF7FEFF 		bl	ADC_DelSig_IRQ_Start
 156:main.c        ****     PGA_1_Start(); 
 308              		.loc 1 156 0
 309 0020 FFF7FEFF 		bl	PGA_1_Start
 157:main.c        ****     ADC_DelSig_Start();
 310              		.loc 1 157 0
 311 0024 FFF7FEFF 		bl	ADC_DelSig_Start
 158:main.c        ****     ADC_DelSig_StartConvert();
 312              		.loc 1 158 0
 313 0028 FFF7FEFF 		bl	ADC_DelSig_StartConvert
 159:main.c        ****     VDAC8_Start();
 314              		.loc 1 159 0
 315 002c FFF7FEFF 		bl	VDAC8_Start
 160:main.c        ****     Opamp_1_Start();
 316              		.loc 1 160 0
 317 0030 FFF7FEFF 		bl	Opamp_1_Start
 161:main.c        ****     Opamp_2_Start();
 318              		.loc 1 161 0
 319 0034 FFF7FEFF 		bl	Opamp_2_Start
 162:main.c        ****     Filter_Start();
 320              		.loc 1 162 0
 321 0038 FFF7FEFF 		bl	Filter_Start
 163:main.c        ****     // set the Tone Threshold to max.   
 164:main.c        ****     Control_Reg_1_Write(0xFF);
 322              		.loc 1 164 0
 323 003c FF20     		movs	r0, #255
 324 003e FFF7FEFF 		bl	Control_Reg_1_Write
 165:main.c        ****     
 166:main.c        ****     // User-implemented function to set-up DMA
 167:main.c        ****     DMA_Config();
 325              		.loc 1 167 0
 326 0042 FFF7FEFF 		bl	DMA_Config
 327              	.LBB2:
 168:main.c        **** 
 169:main.c        ****     // Initiarize Filter Interrupt
 170:main.c        ****     for (uint8 i = 0; i < 8; i++)
 328              		.loc 1 170 0
 329 0046 0023     		movs	r3, #0
 330 0048 FB71     		strb	r3, [r7, #7]
 331 004a 07E0     		b	.L6
 332              	.L7:
 171:main.c        ****        IDelay[i] = 0;
 333              		.loc 1 171 0 discriminator 3
 334 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 335 004e 0F4A     		ldr	r2, .L8+4
 336 0050 0021     		movs	r1, #0
 337 0052 42F82310 		str	r1, [r2, r3, lsl #2]
 170:main.c        ****        IDelay[i] = 0;
 338              		.loc 1 170 0 discriminator 3
 339 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 10


 340 0058 0133     		adds	r3, r3, #1
 341 005a FB71     		strb	r3, [r7, #7]
 342              	.L6:
 170:main.c        ****        IDelay[i] = 0;
 343              		.loc 1 170 0 is_stmt 0 discriminator 1
 344 005c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 345 005e 072B     		cmp	r3, #7
 346 0060 F4D9     		bls	.L7
 347              	.LBE2:
 172:main.c        ****     IDelayPtr = 0;
 348              		.loc 1 172 0 is_stmt 1
 349 0062 0B4B     		ldr	r3, .L8+8
 350 0064 0022     		movs	r2, #0
 351 0066 1A70     		strb	r2, [r3]
 173:main.c        ****     debouunce_cntr = 0;
 352              		.loc 1 173 0
 353 0068 0A4B     		ldr	r3, .L8+12
 354 006a 0022     		movs	r2, #0
 355 006c 1A70     		strb	r2, [r3]
 174:main.c        ****     // Enable Filter Interrupt
 175:main.c        ****     isr_filter_StartEx(Filter_Handler);    
 356              		.loc 1 175 0
 357 006e 0A48     		ldr	r0, .L8+16
 358 0070 FFF7FEFF 		bl	isr_filter_StartEx
 176:main.c        **** 
 177:main.c        ****     // Enable Global Interrupts
 178:main.c        ****     CYGlobalIntEnable;
 359              		.loc 1 178 0
 360              		.syntax unified
 361              	@ 178 "main.c" 1
 362 0074 62B6     		CPSIE   i
 363              	@ 0 "" 2
 179:main.c        ****     
 180:main.c        ****     // Initialize the I2C CLCD
 181:main.c        ****     //I2C_1_Start();
 182:main.c        ****     //I2C_CLCD_Start();
 183:main.c        ****     //I2C_CLCD_Position(0u,0u);
 184:main.c        ****     //                   "0123456789012345"
 185:main.c        ****     //I2C_CLCD_PrintString("CW_Decoder      ");
 186:main.c        ****     //I2C_CLCD_Position(1u,0u);
 187:main.c        ****     //I2C_CLCD_PrintString("getting started" );
 188:main.c        ****     CyDelay(1000u);
 364              		.loc 1 188 0
 365              		.thumb
 366              		.syntax unified
 367 0076 4FF47A70 		mov	r0, #1000
 368 007a FFF7FEFF 		bl	CyDelay
 189:main.c        **** }
 369              		.loc 1 189 0
 370 007e 00BF     		nop
 371 0080 0837     		adds	r7, r7, #8
 372              		.cfi_def_cfa_offset 8
 373 0082 BD46     		mov	sp, r7
 374              		.cfi_def_cfa_register 13
 375              		@ sp needed
 376 0084 80BD     		pop	{r7, pc}
 377              	.L9:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 11


 378 0086 00BF     		.align	2
 379              	.L8:
 380 0088 00000000 		.word	timerISR_1_Routine
 381 008c 00000000 		.word	IDelay
 382 0090 00000000 		.word	IDelayPtr
 383 0094 00000000 		.word	debouunce_cntr
 384 0098 00000000 		.word	Filter_Handler
 385              		.cfi_endproc
 386              	.LFE66:
 387              		.size	Initialize, .-Initialize
 388              		.section	.text.prvHardwareSetup,"ax",%progbits
 389              		.align	2
 390              		.global	prvHardwareSetup
 391              		.thumb
 392              		.thumb_func
 393              		.type	prvHardwareSetup, %function
 394              	prvHardwareSetup:
 395              	.LFB67:
 190:main.c        **** 
 191:main.c        **** //---------------------------------------------------------------------------
 192:main.c        **** void prvHardwareSetup( void )
 193:main.c        **** {
 396              		.loc 1 193 0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 1, uses_anonymous_args = 0
 400              		@ link register save eliminated.
 401 0000 80B4     		push	{r7}
 402              		.cfi_def_cfa_offset 4
 403              		.cfi_offset 7, -4
 404 0002 00AF     		add	r7, sp, #0
 405              		.cfi_def_cfa_register 7
 194:main.c        ****     // Port layer functions that need to be copied into the vector table.
 195:main.c        ****     extern void xPortPendSVHandler( void );
 196:main.c        ****     extern void xPortSysTickHandler( void );
 197:main.c        ****     extern void vPortSVCHandler( void );
 198:main.c        ****     extern cyisraddress CyRamVectors[];
 199:main.c        **** 
 200:main.c        **** 	// Install the OS Interrupt Handlers.
 201:main.c        **** 	CyRamVectors[ 11 ] = ( cyisraddress ) vPortSVCHandler;
 406              		.loc 1 201 0
 407 0004 064B     		ldr	r3, .L11
 408 0006 074A     		ldr	r2, .L11+4
 409 0008 DA62     		str	r2, [r3, #44]
 202:main.c        **** 	CyRamVectors[ 14 ] = ( cyisraddress ) xPortPendSVHandler;
 410              		.loc 1 202 0
 411 000a 054B     		ldr	r3, .L11
 412 000c 064A     		ldr	r2, .L11+8
 413 000e 9A63     		str	r2, [r3, #56]
 203:main.c        **** 	CyRamVectors[ 15 ] = ( cyisraddress ) xPortSysTickHandler;
 414              		.loc 1 203 0
 415 0010 034B     		ldr	r3, .L11
 416 0012 064A     		ldr	r2, .L11+12
 417 0014 DA63     		str	r2, [r3, #60]
 204:main.c        ****     
 205:main.c        **** }
 418              		.loc 1 205 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 12


 419 0016 00BF     		nop
 420 0018 BD46     		mov	sp, r7
 421              		.cfi_def_cfa_register 13
 422              		@ sp needed
 423 001a 80BC     		pop	{r7}
 424              		.cfi_restore 7
 425              		.cfi_def_cfa_offset 0
 426 001c 7047     		bx	lr
 427              	.L12:
 428 001e 00BF     		.align	2
 429              	.L11:
 430 0020 00000000 		.word	CyRamVectors
 431 0024 00000000 		.word	vPortSVCHandler
 432 0028 00000000 		.word	xPortPendSVHandler
 433 002c 00000000 		.word	xPortSysTickHandler
 434              		.cfi_endproc
 435              	.LFE67:
 436              		.size	prvHardwareSetup, .-prvHardwareSetup
 437              		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
 438              		.align	2
 439              		.global	vApplicationStackOverflowHook
 440              		.thumb
 441              		.thumb_func
 442              		.type	vApplicationStackOverflowHook, %function
 443              	vApplicationStackOverflowHook:
 444              	.LFB68:
 206:main.c        **** //---------------------------------------------------------------------------
 207:main.c        **** 
 208:main.c        **** void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
 209:main.c        **** {
 445              		.loc 1 209 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 8
 448              		@ frame_needed = 1, uses_anonymous_args = 0
 449 0000 80B5     		push	{r7, lr}
 450              		.cfi_def_cfa_offset 8
 451              		.cfi_offset 7, -8
 452              		.cfi_offset 14, -4
 453 0002 82B0     		sub	sp, sp, #8
 454              		.cfi_def_cfa_offset 16
 455 0004 00AF     		add	r7, sp, #0
 456              		.cfi_def_cfa_register 7
 457 0006 7860     		str	r0, [r7, #4]
 458 0008 3960     		str	r1, [r7]
 210:main.c        **** 	// The stack space has been execeeded for a task, considering allocating more.
 211:main.c        **** 	taskDISABLE_INTERRUPTS();
 459              		.loc 1 211 0
 460 000a FFF7FEFF 		bl	ulPortSetInterruptMask
 461              	.L14:
 212:main.c        **** 	for( ;; );
 462              		.loc 1 212 0 discriminator 1
 463 000e FEE7     		b	.L14
 464              		.cfi_endproc
 465              	.LFE68:
 466              		.size	vApplicationStackOverflowHook, .-vApplicationStackOverflowHook
 467              		.section	.text.vApplicationMallocFailedHook,"ax",%progbits
 468              		.align	2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 13


 469              		.global	vApplicationMallocFailedHook
 470              		.thumb
 471              		.thumb_func
 472              		.type	vApplicationMallocFailedHook, %function
 473              	vApplicationMallocFailedHook:
 474              	.LFB69:
 213:main.c        **** }
 214:main.c        **** //---------------------------------------------------------------------------
 215:main.c        **** 
 216:main.c        **** void vApplicationMallocFailedHook( void )
 217:main.c        **** {
 475              		.loc 1 217 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 0
 478              		@ frame_needed = 1, uses_anonymous_args = 0
 479 0000 80B5     		push	{r7, lr}
 480              		.cfi_def_cfa_offset 8
 481              		.cfi_offset 7, -8
 482              		.cfi_offset 14, -4
 483 0002 00AF     		add	r7, sp, #0
 484              		.cfi_def_cfa_register 7
 218:main.c        **** 	/* The heap space has been execeeded. */
 219:main.c        **** 	taskDISABLE_INTERRUPTS();
 485              		.loc 1 219 0
 486 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
 487              	.L16:
 220:main.c        **** 	for( ;; );
 488              		.loc 1 220 0 discriminator 1
 489 0008 FEE7     		b	.L16
 490              		.cfi_endproc
 491              	.LFE69:
 492              		.size	vApplicationMallocFailedHook, .-vApplicationMallocFailedHook
 493              		.comm	tFlag,1,1
 494 000a 00BF     		.section	.text.timerISR_1_Routine,"ax",%progbits
 495              		.align	2
 496              		.global	timerISR_1_Routine
 497              		.thumb
 498              		.thumb_func
 499              		.type	timerISR_1_Routine, %function
 500              	timerISR_1_Routine:
 501              	.LFB70:
 221:main.c        **** }
 222:main.c        **** //---------------------------------------------------------------------------
 223:main.c        **** 
 224:main.c        **** //******************************************************************************
 225:main.c        **** //  Watchdog Timer ISR
 226:main.c        **** //******************************************************************************
 227:main.c        **** uint8 tFlag;
 228:main.c        **** 
 229:main.c        **** CY_ISR(timerISR_1_Routine)
 230:main.c        **** {
 502              		.loc 1 230 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 0
 505              		@ frame_needed = 1, uses_anonymous_args = 0
 506 0000 80B5     		push	{r7, lr}
 507              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 14


 508              		.cfi_offset 7, -8
 509              		.cfi_offset 14, -4
 510 0002 00AF     		add	r7, sp, #0
 511              		.cfi_def_cfa_register 7
 231:main.c        ****     tFlag = Timer_1_ReadStatusRegister();
 512              		.loc 1 231 0
 513 0004 FFF7FEFF 		bl	Timer_1_ReadStatusRegister
 514 0008 0346     		mov	r3, r0
 515 000a 1A46     		mov	r2, r3
 516 000c 024B     		ldr	r3, .L18
 517 000e 1A70     		strb	r2, [r3]
 232:main.c        ****     /* Clear WDT */
 233:main.c        ****     CyWdtClear();
 518              		.loc 1 233 0
 519 0010 FFF7FEFF 		bl	CyWdtClear
 234:main.c        **** }
 520              		.loc 1 234 0
 521 0014 00BF     		nop
 522 0016 80BD     		pop	{r7, pc}
 523              	.L19:
 524              		.align	2
 525              	.L18:
 526 0018 00000000 		.word	tFlag
 527              		.cfi_endproc
 528              	.LFE70:
 529              		.size	timerISR_1_Routine, .-timerISR_1_Routine
 530              		.section	.text.Task_LED,"ax",%progbits
 531              		.align	2
 532              		.global	Task_LED
 533              		.thumb
 534              		.thumb_func
 535              		.type	Task_LED, %function
 536              	Task_LED:
 537              	.LFB71:
 235:main.c        **** 
 236:main.c        **** 
 237:main.c        **** //***************************************************************************
 238:main.c        **** //	Task_LED
 239:main.c        **** //***************************************************************************
 240:main.c        **** void Task_LED(void *pvParameters)
 241:main.c        **** {
 538              		.loc 1 241 0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 16
 541              		@ frame_needed = 1, uses_anonymous_args = 0
 542 0000 80B5     		push	{r7, lr}
 543              		.cfi_def_cfa_offset 8
 544              		.cfi_offset 7, -8
 545              		.cfi_offset 14, -4
 546 0002 84B0     		sub	sp, sp, #16
 547              		.cfi_def_cfa_offset 24
 548 0004 00AF     		add	r7, sp, #0
 549              		.cfi_def_cfa_register 7
 550 0006 7860     		str	r0, [r7, #4]
 242:main.c        ****     // Block time in (ms)
 243:main.c        ****     const portTickType OnDelay = 1000 / portTICK_RATE_MS;
 551              		.loc 1 243 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 15


 552 0008 4FF47A73 		mov	r3, #1000
 553 000c FB60     		str	r3, [r7, #12]
 244:main.c        ****     const portTickType OffDelay = 1000 / portTICK_RATE_MS;
 554              		.loc 1 244 0
 555 000e 4FF47A73 		mov	r3, #1000
 556 0012 BB60     		str	r3, [r7, #8]
 557              	.L21:
 245:main.c        ****     
 246:main.c        ****     //Debug
 247:main.c        ****     char character;
 248:main.c        **** 
 249:main.c        ****     while(1)
 250:main.c        ****     {
 251:main.c        ****         LED_1_Write(1);
 558              		.loc 1 251 0 discriminator 1
 559 0014 0120     		movs	r0, #1
 560 0016 FFF7FEFF 		bl	LED_1_Write
 252:main.c        ****         vTaskDelay(OnDelay);
 561              		.loc 1 252 0 discriminator 1
 562 001a F868     		ldr	r0, [r7, #12]
 563 001c FFF7FEFF 		bl	vTaskDelay
 253:main.c        **** 
 254:main.c        ****         LED_1_Write(0);
 564              		.loc 1 254 0 discriminator 1
 565 0020 0020     		movs	r0, #0
 566 0022 FFF7FEFF 		bl	LED_1_Write
 255:main.c        ****         vTaskDelay(OffDelay);
 567              		.loc 1 255 0 discriminator 1
 568 0026 B868     		ldr	r0, [r7, #8]
 569 0028 FFF7FEFF 		bl	vTaskDelay
 256:main.c        ****         
 257:main.c        ****         //Debug
 258:main.c        ****         //character = '3';
 259:main.c        ****         //xQueueSend(xQueue_CHAR, &character, 0);
 260:main.c        **** 
 261:main.c        ****         
 262:main.c        ****     }
 570              		.loc 1 262 0 discriminator 1
 571 002c F2E7     		b	.L21
 572              		.cfi_endproc
 573              	.LFE71:
 574              		.size	Task_LED, .-Task_LED
 575 002e 00BF     		.section	.text.DMA_Config,"ax",%progbits
 576              		.align	2
 577              		.global	DMA_Config
 578              		.thumb
 579              		.thumb_func
 580              		.type	DMA_Config, %function
 581              	DMA_Config:
 582              	.LFB72:
 263:main.c        **** }
 264:main.c        **** 
 265:main.c        **** 
 266:main.c        **** 
 267:main.c        **** //***************************************************************************
 268:main.c        **** // Function Name: DMA_Config
 269:main.c        **** //***************************************************************************
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 16


 270:main.c        **** //
 271:main.c        **** // Summary:
 272:main.c        **** //  Initializes and sets up DMA for use (generated by DMA Wizard)
 273:main.c        **** //
 274:main.c        **** // Parameters:
 275:main.c        **** //  None.
 276:main.c        **** //
 277:main.c        **** // Return:
 278:main.c        **** //  None.
 279:main.c        **** //
 280:main.c        **** //***************************************************************************
 281:main.c        **** // DMA
 282:main.c        **** #define REQUEST_PER_BURST        (1u)
 283:main.c        **** #define BYTES_PER_BURST          (1u)
 284:main.c        **** #define UPPER_SRC_ADDRESS        CYDEV_PERIPH_BASE
 285:main.c        **** #define UPPER_DEST_ADDRESS       CYDEV_PERIPH_BASE
 286:main.c        **** 
 287:main.c        **** void DMA_Config(void)
 288:main.c        **** {
 583              		.loc 1 288 0
 584              		.cfi_startproc
 585              		@ args = 0, pretend = 0, frame = 8
 586              		@ frame_needed = 1, uses_anonymous_args = 0
 587 0000 80B5     		push	{r7, lr}
 588              		.cfi_def_cfa_offset 8
 589              		.cfi_offset 7, -8
 590              		.cfi_offset 14, -4
 591 0002 82B0     		sub	sp, sp, #8
 592              		.cfi_def_cfa_offset 16
 593 0004 00AF     		add	r7, sp, #0
 594              		.cfi_def_cfa_register 7
 289:main.c        ****     // Declare variable to hold the handle for DMA channel
 290:main.c        ****     uint8 channelHandle;
 291:main.c        **** 
 292:main.c        ****     // Declare DMA Transaction Descriptor for memory transfer into
 293:main.c        ****     // Filter Channel.
 294:main.c        ****     uint8 tdChanA;
 295:main.c        **** 
 296:main.c        ****     // Configure the DMA to Transfer the data in 1 burst with individual trigger
 297:main.c        ****     // for each burst.
 298:main.c        ****     channelHandle = DMA_DmaInitialize(BYTES_PER_BURST, REQUEST_PER_BURST,
 595              		.loc 1 298 0
 596 0006 4FF48043 		mov	r3, #16384
 597 000a 4FF48042 		mov	r2, #16384
 598 000e 0121     		movs	r1, #1
 599 0010 0120     		movs	r0, #1
 600 0012 FFF7FEFF 		bl	DMA_DmaInitialize
 601 0016 0346     		mov	r3, r0
 602 0018 FB71     		strb	r3, [r7, #7]
 299:main.c        ****                                         HI16(UPPER_SRC_ADDRESS), HI16(UPPER_DEST_ADDRESS));
 300:main.c        **** 
 301:main.c        ****     // This function allocates a TD for use with an initialized DMA channel
 302:main.c        ****     tdChanA = CyDmaTdAllocate();
 603              		.loc 1 302 0
 604 001a FFF7FEFF 		bl	CyDmaTdAllocate
 605 001e 0346     		mov	r3, r0
 606 0020 BB71     		strb	r3, [r7, #6]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 17


 303:main.c        **** 
 304:main.c        ****     // Configure the tdChanA to transfer 1 byte with no next TD
 305:main.c        ****     CyDmaTdSetConfiguration(tdChanA, 1u, DMA_INVALID_TD, 0u);
 607              		.loc 1 305 0
 608 0022 B879     		ldrb	r0, [r7, #6]	@ zero_extendqisi2
 609 0024 0023     		movs	r3, #0
 610 0026 FF22     		movs	r2, #255
 611 0028 0121     		movs	r1, #1
 612 002a FFF7FEFF 		bl	CyDmaTdSetConfiguration
 306:main.c        **** 
 307:main.c        ****     // Set the source address as ADC_DelSig and the destination as
 308:main.c        ****     // Filter Channel A.
 309:main.c        ****     CyDmaTdSetAddress(tdChanA, LO16((uint32)ADC_DelSig_DEC_SAMP_PTR), LO16((uint32)Filter_STAGEAH_P
 613              		.loc 1 309 0
 614 002e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 615 0030 4CF2A272 		movw	r2, #51106
 616 0034 44F61061 		movw	r1, #19984
 617 0038 1846     		mov	r0, r3
 618 003a FFF7FEFF 		bl	CyDmaTdSetAddress
 310:main.c        **** 
 311:main.c        ****     // Set tdChanA to be the initial TD associated with channelHandle
 312:main.c        ****     CyDmaChSetInitialTd(channelHandle, tdChanA);
 619              		.loc 1 312 0
 620 003e BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 621 0040 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 622 0042 1146     		mov	r1, r2
 623 0044 1846     		mov	r0, r3
 624 0046 FFF7FEFF 		bl	CyDmaChSetInitialTd
 313:main.c        **** 
 314:main.c        ****     // Enable the DMA channel represented by channelHandle and preserve the TD
 315:main.c        ****     CyDmaChEnable(channelHandle, 1u);
 625              		.loc 1 315 0
 626 004a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 627 004c 0121     		movs	r1, #1
 628 004e 1846     		mov	r0, r3
 629 0050 FFF7FEFF 		bl	CyDmaChEnable
 316:main.c        **** }
 630              		.loc 1 316 0
 631 0054 00BF     		nop
 632 0056 0837     		adds	r7, r7, #8
 633              		.cfi_def_cfa_offset 8
 634 0058 BD46     		mov	sp, r7
 635              		.cfi_def_cfa_register 13
 636              		@ sp needed
 637 005a 80BD     		pop	{r7, pc}
 638              		.cfi_endproc
 639              	.LFE72:
 640              		.size	DMA_Config, .-DMA_Config
 641              		.global	__aeabi_i2d
 642              		.global	__aeabi_dadd
 643              		.global	__aeabi_d2uiz
 644              		.section	.text.Filter_Handler,"ax",%progbits
 645              		.align	2
 646              		.global	Filter_Handler
 647              		.thumb
 648              		.thumb_func
 649              		.type	Filter_Handler, %function
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 18


 650              	Filter_Handler:
 651              	.LFB73:
 317:main.c        **** 
 318:main.c        **** 
 319:main.c        **** //*******************************************************************************
 320:main.c        **** // Filter Handler ISR
 321:main.c        **** //*******************************************************************************
 322:main.c        **** // Interrupt generated on Filter sample-ready. Interrupt handle:Filter_Handler
 323:main.c        **** //
 324:main.c        **** // Summary:
 325:main.c        **** //  The interrupt performs following functions:
 326:main.c        **** //   1: Reads the left-justified register for Filter Channel A
 327:main.c        **** //   2: Converts it into an unsigned RMS value
 328:main.c        **** //   3: Debouncing Tone signal every 5 msec
 329:main.c        **** //   4: Send debounced Tone signal to the TONE queue
 330:main.c        **** //
 331:main.c        **** //*******************************************************************************
 332:main.c        **** // Filter Handler
 333:main.c        **** #ifndef CORDIC
 334:main.c        ****     #define MLT_A  9           // V(mV) << 10 , V < 5000mV
 335:main.c        **** #else
 336:main.c        ****     #define MLT_A  10           // V(mV) << 10 , V < 5000mV
 337:main.c        **** #endif
 338:main.c        **** #define V_OFFSET    128u    // 2.048 V = 128 * 16 mV/bit
 339:main.c        **** #define SAMPLE_PER_SEC          16                // 16 ksps
 340:main.c        **** #define SAMPLES_TO_PROCESS_N    SAMPLE_PER_SEC * 5  // 1/(16ksps) * 80 = 5 ms
 341:main.c        **** //#define TONE_THRESHOLD          100     // threshold of accumulated signal RMS
 342:main.c        **** #define TONE_THRESHOLD          500     // threshold of accumulated signal RMS
 343:main.c        **** #define DEBOUNCE_THRESHOLD      2       // debounce time = 5 * (2 + 1) = 15 ms
 344:main.c        **** //#define DEBOUNCE_THRESHOLD      3       // debounce time = 5 * (3 + 1) = 20 ms
 345:main.c        **** 
 346:main.c        ****    
 347:main.c        **** CY_ISR(Filter_Handler)
 348:main.c        **** {
 652              		.loc 1 348 0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 8
 655              		@ frame_needed = 1, uses_anonymous_args = 0
 656 0000 B0B5     		push	{r4, r5, r7, lr}
 657              		.cfi_def_cfa_offset 16
 658              		.cfi_offset 4, -16
 659              		.cfi_offset 5, -12
 660              		.cfi_offset 7, -8
 661              		.cfi_offset 14, -4
 662 0002 82B0     		sub	sp, sp, #8
 663              		.cfi_def_cfa_offset 24
 664 0004 00AF     		add	r7, sp, #0
 665              		.cfi_def_cfa_register 7
 349:main.c        ****     int8    filter;
 350:main.c        ****     uint8   tone = 0;       // debounced tone signal
 666              		.loc 1 350 0
 667 0006 0023     		movs	r3, #0
 668 0008 BB71     		strb	r3, [r7, #6]
 351:main.c        ****     uint8   i;
 352:main.c        **** #ifndef CORDIC
 353:main.c        **** #else
 354:main.c        ****     int32   Ik0, Qk0;       // ampletude of filtered rx level << MltA
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 19


 355:main.c        ****     int32   Ikn, Qkn;       // used in CORDIC calculation
 356:main.c        **** #endif
 357:main.c        **** 
 358:main.c        ****     // Debug
 359:main.c        ****     MON_ISR_Write(1u);
 669              		.loc 1 359 0
 670 000a 0120     		movs	r0, #1
 671 000c FFF7FEFF 		bl	MON_ISR_Write
 360:main.c        **** 
 361:main.c        ****     filter = Filter_Read8(Filter_CHANNEL_A);
 672              		.loc 1 361 0
 673 0010 0020     		movs	r0, #0
 674 0012 FFF7FEFF 		bl	Filter_Read8
 675 0016 0346     		mov	r3, r0
 676 0018 FB71     		strb	r3, [r7, #7]
 362:main.c        ****     // clear flags except INTR_HOLDB
 363:main.c        ****     Filter_SR_REG = Filter_ALL_INTR & (~Filter_CHANNEL_B_INTR);
 677              		.loc 1 363 0
 678 001a 554B     		ldr	r3, .L31
 679 001c E822     		movs	r2, #232
 680 001e 1A70     		strb	r2, [r3]
 364:main.c        ****     // Send the Data to Queue
 365:main.c        ****     //xQueueSendFromISR(xQueue_FILTER, &filter, NULL);
 366:main.c        ****     
 367:main.c        **** #ifndef CORDIC
 368:main.c        ****     //******************************
 369:main.c        ****     //  CORRELATOR
 370:main.c        ****     //******************************
 371:main.c        **** 
 372:main.c        ****     int_cntr++;     // 5 ms counter
 681              		.loc 1 372 0
 682 0020 544B     		ldr	r3, .L31+4
 683 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 684 0024 0133     		adds	r3, r3, #1
 685 0026 DAB2     		uxtb	r2, r3
 686 0028 524B     		ldr	r3, .L31+4
 687 002a 1A70     		strb	r2, [r3]
 373:main.c        ****     sign_cntr++;    // 1.25ms (1 cycle of 800Hz) counter
 688              		.loc 1 373 0
 689 002c 524B     		ldr	r3, .L31+8
 690 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 691 0030 0133     		adds	r3, r3, #1
 692 0032 DAB2     		uxtb	r2, r3
 693 0034 504B     		ldr	r3, .L31+8
 694 0036 1A70     		strb	r2, [r3]
 374:main.c        ****     if (sign_cntr == SIGN_CNTR_CYCLE)
 695              		.loc 1 374 0
 696 0038 4F4B     		ldr	r3, .L31+8
 697 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 698 003c 142B     		cmp	r3, #20
 699 003e 02D1     		bne	.L24
 375:main.c        ****         sign_cntr = 0;
 700              		.loc 1 375 0
 701 0040 4D4B     		ldr	r3, .L31+8
 702 0042 0022     		movs	r2, #0
 703 0044 1A70     		strb	r2, [r3]
 704              	.L24:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 20


 376:main.c        ****     
 377:main.c        ****     acc_v_sin += Sign_Sin[sign_cntr] * (int32)filter << MLT_A;
 705              		.loc 1 377 0
 706 0046 4C4B     		ldr	r3, .L31+8
 707 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 708 004a 1A46     		mov	r2, r3
 709 004c 4B4B     		ldr	r3, .L31+12
 710 004e 9B56     		ldrsb	r3, [r3, r2]
 711 0050 1A46     		mov	r2, r3
 712 0052 97F90730 		ldrsb	r3, [r7, #7]
 713 0056 03FB02F3 		mul	r3, r3, r2
 714 005a 5A02     		lsls	r2, r3, #9
 715 005c 484B     		ldr	r3, .L31+16
 716 005e 1B68     		ldr	r3, [r3]
 717 0060 1344     		add	r3, r3, r2
 718 0062 474A     		ldr	r2, .L31+16
 719 0064 1360     		str	r3, [r2]
 378:main.c        ****     acc_v_cos += Sign_Cos[sign_cntr] * (int32)filter << MLT_A;
 720              		.loc 1 378 0
 721 0066 444B     		ldr	r3, .L31+8
 722 0068 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 723 006a 1A46     		mov	r2, r3
 724 006c 454B     		ldr	r3, .L31+20
 725 006e 9B56     		ldrsb	r3, [r3, r2]
 726 0070 1A46     		mov	r2, r3
 727 0072 97F90730 		ldrsb	r3, [r7, #7]
 728 0076 03FB02F3 		mul	r3, r3, r2
 729 007a 5A02     		lsls	r2, r3, #9
 730 007c 424B     		ldr	r3, .L31+24
 731 007e 1B68     		ldr	r3, [r3]
 732 0080 1344     		add	r3, r3, r2
 733 0082 414A     		ldr	r2, .L31+24
 734 0084 1360     		str	r3, [r2]
 379:main.c        **** 
 380:main.c        ****     //***************************
 381:main.c        ****     //  Tone debouncing (5 ms)
 382:main.c        ****     //***************************
 383:main.c        ****     if (int_cntr == SAMPLES_TO_PROCESS_N)     // 1/(16ksps) * 80 = 5 ms
 735              		.loc 1 383 0
 736 0086 3B4B     		ldr	r3, .L31+4
 737 0088 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 738 008a 502B     		cmp	r3, #80
 739 008c 69D1     		bne	.L25
 384:main.c        ****     {
 385:main.c        ****         //acc_Vrms = sqrt(pow(acc_v_sin, 2) + pow(acc_v_cos, 2));
 386:main.c        ****         acc_Vrms = pow(acc_v_sin, 2) + pow(acc_v_cos, 2);
 740              		.loc 1 386 0
 741 008e 3C4B     		ldr	r3, .L31+16
 742 0090 1B68     		ldr	r3, [r3]
 743 0092 1846     		mov	r0, r3
 744 0094 FFF7FEFF 		bl	__aeabi_i2d
 745 0098 4FF00002 		mov	r2, #0
 746 009c 4FF08043 		mov	r3, #1073741824
 747 00a0 FFF7FEFF 		bl	pow
 748 00a4 0446     		mov	r4, r0
 749 00a6 0D46     		mov	r5, r1
 750 00a8 374B     		ldr	r3, .L31+24
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 21


 751 00aa 1B68     		ldr	r3, [r3]
 752 00ac 1846     		mov	r0, r3
 753 00ae FFF7FEFF 		bl	__aeabi_i2d
 754 00b2 4FF00002 		mov	r2, #0
 755 00b6 4FF08043 		mov	r3, #1073741824
 756 00ba FFF7FEFF 		bl	pow
 757 00be 0246     		mov	r2, r0
 758 00c0 0B46     		mov	r3, r1
 759 00c2 2046     		mov	r0, r4
 760 00c4 2946     		mov	r1, r5
 761 00c6 FFF7FEFF 		bl	__aeabi_dadd
 762 00ca 0346     		mov	r3, r0
 763 00cc 0C46     		mov	r4, r1
 764 00ce 1846     		mov	r0, r3
 765 00d0 2146     		mov	r1, r4
 766 00d2 FFF7FEFF 		bl	__aeabi_d2uiz
 767 00d6 0246     		mov	r2, r0
 768 00d8 2C4B     		ldr	r3, .L31+28
 769 00da 1A60     		str	r2, [r3]
 387:main.c        ****         // over the threshold ?
 388:main.c        ****         //if ((acc_Vrms >> MLT_A) > TONE_THRESHOLD)
 389:main.c        ****         if (acc_Vrms > 0x80000000)
 770              		.loc 1 389 0
 771 00dc 2B4B     		ldr	r3, .L31+28
 772 00de 1B68     		ldr	r3, [r3]
 773 00e0 B3F1004F 		cmp	r3, #-2147483648
 774 00e4 10D9     		bls	.L26
 390:main.c        ****         {
 391:main.c        ****             // signal detect
 392:main.c        ****             if (debouunce_cntr > DEBOUNCE_THRESHOLD)
 775              		.loc 1 392 0
 776 00e6 2A4B     		ldr	r3, .L31+32
 777 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 778 00ea 022B     		cmp	r3, #2
 779 00ec 05D9     		bls	.L27
 393:main.c        ****             {
 394:main.c        ****                 tone = 1;
 780              		.loc 1 394 0
 781 00ee 0123     		movs	r3, #1
 782 00f0 BB71     		strb	r3, [r7, #6]
 395:main.c        ****                 LED_Write(1u);
 783              		.loc 1 395 0
 784 00f2 0120     		movs	r0, #1
 785 00f4 FFF7FEFF 		bl	LED_Write
 786 00f8 16E0     		b	.L29
 787              	.L27:
 396:main.c        ****             }
 397:main.c        ****             else
 398:main.c        ****                 debouunce_cntr++;
 788              		.loc 1 398 0
 789 00fa 254B     		ldr	r3, .L31+32
 790 00fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 791 00fe 0133     		adds	r3, r3, #1
 792 0100 DAB2     		uxtb	r2, r3
 793 0102 234B     		ldr	r3, .L31+32
 794 0104 1A70     		strb	r2, [r3]
 795 0106 0FE0     		b	.L29
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 22


 796              	.L26:
 399:main.c        ****         }
 400:main.c        ****         else
 401:main.c        ****         {
 402:main.c        ****             // No signal
 403:main.c        ****             if (debouunce_cntr == 0)
 797              		.loc 1 403 0
 798 0108 214B     		ldr	r3, .L31+32
 799 010a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 800 010c 002B     		cmp	r3, #0
 801 010e 05D1     		bne	.L30
 404:main.c        ****             {
 405:main.c        ****                 tone = 0;
 802              		.loc 1 405 0
 803 0110 0023     		movs	r3, #0
 804 0112 BB71     		strb	r3, [r7, #6]
 406:main.c        ****                 LED_Write(0u);
 805              		.loc 1 406 0
 806 0114 0020     		movs	r0, #0
 807 0116 FFF7FEFF 		bl	LED_Write
 808 011a 05E0     		b	.L29
 809              	.L30:
 407:main.c        ****             }
 408:main.c        ****             else
 409:main.c        ****                 debouunce_cntr--;
 810              		.loc 1 409 0
 811 011c 1C4B     		ldr	r3, .L31+32
 812 011e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 813 0120 013B     		subs	r3, r3, #1
 814 0122 DAB2     		uxtb	r2, r3
 815 0124 1A4B     		ldr	r3, .L31+32
 816 0126 1A70     		strb	r2, [r3]
 817              	.L29:
 410:main.c        ****         }
 411:main.c        ****         // Send the Data to Queue
 412:main.c        ****         xQueueSendFromISR(xQueue_TONE, &tone, NULL);
 818              		.loc 1 412 0
 819 0128 1A4B     		ldr	r3, .L31+36
 820 012a 1868     		ldr	r0, [r3]
 821 012c B91D     		adds	r1, r7, #6
 822 012e 0023     		movs	r3, #0
 823 0130 0022     		movs	r2, #0
 824 0132 FFF7FEFF 		bl	xQueueGenericSendFromISR
 413:main.c        ****         
 414:main.c        ****         // Waveform Monitor
 415:main.c        ****         VDAC8_SetValue((int8)(acc_Vrms >> MLT_A));      // Morse Code
 825              		.loc 1 415 0
 826 0136 154B     		ldr	r3, .L31+28
 827 0138 1B68     		ldr	r3, [r3]
 828 013a 5B0A     		lsrs	r3, r3, #9
 829 013c DBB2     		uxtb	r3, r3
 830 013e 1846     		mov	r0, r3
 831 0140 FFF7FEFF 		bl	VDAC8_SetValue
 416:main.c        ****         // Init. variables
 417:main.c        ****         acc_Vrms = 0;
 832              		.loc 1 417 0
 833 0144 114B     		ldr	r3, .L31+28
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 23


 834 0146 0022     		movs	r2, #0
 835 0148 1A60     		str	r2, [r3]
 418:main.c        ****         acc_v_sin = 0;
 836              		.loc 1 418 0
 837 014a 0D4B     		ldr	r3, .L31+16
 838 014c 0022     		movs	r2, #0
 839 014e 1A60     		str	r2, [r3]
 419:main.c        ****         acc_v_cos = 0;
 840              		.loc 1 419 0
 841 0150 0D4B     		ldr	r3, .L31+24
 842 0152 0022     		movs	r2, #0
 843 0154 1A60     		str	r2, [r3]
 420:main.c        ****         int_cntr = 0;
 844              		.loc 1 420 0
 845 0156 074B     		ldr	r3, .L31+4
 846 0158 0022     		movs	r2, #0
 847 015a 1A70     		strb	r2, [r3]
 421:main.c        ****         sign_cntr = 0;
 848              		.loc 1 421 0
 849 015c 064B     		ldr	r3, .L31+8
 850 015e 0022     		movs	r2, #0
 851 0160 1A70     		strb	r2, [r3]
 852              	.L25:
 422:main.c        ****     }
 423:main.c        **** #else    
 424:main.c        ****     //******************************
 425:main.c        ****     //  CORDIC
 426:main.c        ****     //******************************
 427:main.c        ****     Ik0 = (int32)filter << MLT_A;             // I input
 428:main.c        ****     IDelay[IDelayPtr] = Ik0;                  // put shifter
 429:main.c        ****     // Q input = I + pi/2
 430:main.c        ****     // 2pi = 16ksps / 800Hz = 20 samples, pi/2 = 5 sample
 431:main.c        ****     Qk0 = IDelay[(IDelayPtr - 5) & 0x07];
 432:main.c        ****     // increment the pointer
 433:main.c        ****     IDelayPtr = (IDelayPtr + 1) & 0x07;
 434:main.c        ****     
 435:main.c        ****     if (Ik0 < 0)                     // I axsis > 0 for CORDIC
 436:main.c        ****         Ik0 = -Ik0;
 437:main.c        ****     Ikn = 0;     // (n)th of Real Value     * 2^MLT_A
 438:main.c        ****     Qkn = 0;     // (n)th of Imaginal Value * 2^MLT_A
 439:main.c        ****     // CORDIC(12bit)
 440:main.c        ****     for (i = 0; i < 12; i++)
 441:main.c        ****     {
 442:main.c        ****         if (Qk0 >= 0)
 443:main.c        ****         {
 444:main.c        ****             Ikn = Ik0 + (Qk0 >> i);
 445:main.c        ****             Qkn = Qk0 - (Ik0 >> i);
 446:main.c        ****         }
 447:main.c        ****         else
 448:main.c        ****         {
 449:main.c        ****             Ikn = Ik0 - (Qk0 >> i);
 450:main.c        ****             Qkn = Qk0 + (Ik0 >> i);
 451:main.c        ****         }
 452:main.c        ****         Ik0 = Ikn;
 453:main.c        ****         Qk0 = Qkn;
 454:main.c        ****     }
 455:main.c        ****     acc_Vrms += Ikn;   // rms
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 24


 456:main.c        ****     
 457:main.c        ****     int_cntr++; // 5 ms counter
 458:main.c        **** 
 459:main.c        ****     // Waveform Monitor
 460:main.c        ****     //VDAC8_SetValue((int8)(Ikn >> MLT_A));      // Morse Code
 461:main.c        **** 
 462:main.c        ****     //***************************
 463:main.c        ****     //  Tone debouncing (5 ms)
 464:main.c        ****     //***************************
 465:main.c        ****     if (int_cntr == SAMPLES_TO_PROCESS_N)     // 1/(16ksps) * 80 = 5 ms
 466:main.c        ****     {
 467:main.c        ****         // over the threshold ?
 468:main.c        ****         //if ((acc_Vrms >> MLT_A) > (uint32)(Status_Reg_1_Read() << 3))
 469:main.c        ****         if ((acc_Vrms >> MLT_A) > TONE_THRESHOLD)
 470:main.c        ****         {
 471:main.c        ****             // signal detect
 472:main.c        ****             if (debouunce_cntr > DEBOUNCE_THRESHOLD)
 473:main.c        ****             {
 474:main.c        ****                 tone = 1;
 475:main.c        ****                 LED_Write(1u);
 476:main.c        ****             }
 477:main.c        ****             else
 478:main.c        ****                 debouunce_cntr++;
 479:main.c        ****         }
 480:main.c        ****         else
 481:main.c        ****         {
 482:main.c        ****             // No signal
 483:main.c        ****             if (debouunce_cntr == 0)
 484:main.c        ****             {
 485:main.c        ****                 tone = 0;
 486:main.c        ****                 LED_Write(0u);
 487:main.c        ****             }
 488:main.c        ****             else
 489:main.c        ****                 debouunce_cntr--;
 490:main.c        ****         }
 491:main.c        ****         // Send the Data to Queue
 492:main.c        ****         xQueueSendFromISR(xQueue_TONE, &tone, NULL);
 493:main.c        ****         
 494:main.c        ****         // Waveform Monitor
 495:main.c        ****         VDAC8_SetValue((int8)(acc_Vrms >> (MLT_A + 3)));      // Morse Code
 496:main.c        ****         // Init. variables
 497:main.c        ****         acc_Vrms = 0;
 498:main.c        ****         int_cntr = 0;
 499:main.c        ****     }
 500:main.c        **** #endif
 501:main.c        ****     // Debug
 502:main.c        ****     MON_ISR_Write(0u);
 853              		.loc 1 502 0
 854 0162 0020     		movs	r0, #0
 855 0164 FFF7FEFF 		bl	MON_ISR_Write
 503:main.c        **** }
 856              		.loc 1 503 0
 857 0168 00BF     		nop
 858 016a 0837     		adds	r7, r7, #8
 859              		.cfi_def_cfa_offset 16
 860 016c BD46     		mov	sp, r7
 861              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 25


 862              		@ sp needed
 863 016e B0BD     		pop	{r4, r5, r7, pc}
 864              	.L32:
 865              		.align	2
 866              	.L31:
 867 0170 84C70040 		.word	1073792900
 868 0174 00000000 		.word	int_cntr
 869 0178 00000000 		.word	sign_cntr
 870 017c 00000000 		.word	Sign_Sin
 871 0180 00000000 		.word	acc_v_sin
 872 0184 00000000 		.word	Sign_Cos
 873 0188 00000000 		.word	acc_v_cos
 874 018c 00000000 		.word	acc_Vrms
 875 0190 00000000 		.word	debouunce_cntr
 876 0194 00000000 		.word	xQueue_TONE
 877              		.cfi_endproc
 878              	.LFE73:
 879              		.size	Filter_Handler, .-Filter_Handler
 880              		.section	.text.Task_TONE,"ax",%progbits
 881              		.align	2
 882              		.global	Task_TONE
 883              		.thumb
 884              		.thumb_func
 885              		.type	Task_TONE, %function
 886              	Task_TONE:
 887              	.LFB74:
 504:main.c        **** 
 505:main.c        **** 
 506:main.c        **** //***************************************************************************
 507:main.c        **** //	Task_TONE
 508:main.c        **** //***************************************************************************
 509:main.c        **** // Tone Detection
 510:main.c        **** #define DIT_DEFAULT             12			// Default values for 20WPM
 511:main.c        **** #define DAH_DEFAULT             36	
 512:main.c        **** #define THRESHOLD_DEFAULT       (DAH_DEFAULT + DIT_DEFAULT)/2
 513:main.c        **** #define NB_LEARN_PERIODS      5 * 255
 514:main.c        **** //#define NB_LEARN_PERIODS        3 * 255
 515:main.c        **** #define DAH_UPPER_LIMIT         18    // 18 * 5 msec (40WPM)
 516:main.c        **** #define DAH_LOWER_LIMIT         75    // 75 * 5 msec (10WPM)
 517:main.c        **** 
 518:main.c        **** void Task_TONE(void *pvParameters)
 519:main.c        **** {
 888              		.loc 1 519 0
 889              		.cfi_startproc
 890              		@ args = 0, pretend = 0, frame = 64
 891              		@ frame_needed = 1, uses_anonymous_args = 0
 892 0000 80B5     		push	{r7, lr}
 893              		.cfi_def_cfa_offset 8
 894              		.cfi_offset 7, -8
 895              		.cfi_offset 14, -4
 896 0002 90B0     		sub	sp, sp, #64
 897              		.cfi_def_cfa_offset 72
 898 0004 00AF     		add	r7, sp, #0
 899              		.cfi_def_cfa_register 7
 900 0006 7860     		str	r0, [r7, #4]
 520:main.c        ****     uint8   tone = 0;           // received from xQueue_TONE, 0: No-tone, 1: Tone detected
 901              		.loc 1 520 0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 26


 902 0008 0023     		movs	r3, #0
 903 000a 87F82130 		strb	r3, [r7, #33]
 521:main.c        ****     uint8   last_tone = 0;      // last received tone
 904              		.loc 1 521 0
 905 000e 0023     		movs	r3, #0
 906 0010 87F83F30 		strb	r3, [r7, #63]
 522:main.c        ****     uint8   tone_flag = 0;      // Tone detected
 907              		.loc 1 522 0
 908 0014 0023     		movs	r3, #0
 909 0016 87F83E30 		strb	r3, [r7, #62]
 523:main.c        ****     uint8   pause_flag = 0;     // Processing symbol
 910              		.loc 1 523 0
 911 001a 0023     		movs	r3, #0
 912 001c 87F83D30 		strb	r3, [r7, #61]
 524:main.c        ****     uint8   reset_flag = 0;     // Idle counter expired
 913              		.loc 1 524 0
 914 0020 0023     		movs	r3, #0
 915 0022 87F83C30 		strb	r3, [r7, #60]
 525:main.c        ****     uint8   i;
 526:main.c        ****     const   portTickType xDelay = 2 / portTICK_RATE_MS;
 916              		.loc 1 526 0
 917 0026 0223     		movs	r3, #2
 918 0028 7B62     		str	r3, [r7, #36]
 527:main.c        **** 
 528:main.c        ****     uint16  _Counter5ms = 0;    // 5ms counter
 919              		.loc 1 528 0
 920 002a 0023     		movs	r3, #0
 921 002c 3B87     		strh	r3, [r7, #56]	@ movhi
 529:main.c        **** 
 530:main.c        ****     uint16  ditptr;     // BLK		1		; Pointer to DIT buffer
 531:main.c        ****     uint16  ditvals[4]; // BLK		4		; DIT buffer
 532:main.c        ****     uint16  ditave;     // BLK		1		; Average of DIT periods
 533:main.c        ****     uint16  dahptr;     // BLK		1		; Pointer to DASH buffer
 534:main.c        ****     uint16  dahvals[4]; // BLK		4		; DASH buffer
 535:main.c        ****     uint16  dahave;     // BLK		1		; Average of DASH periods
 536:main.c        ****     uint16  new_dahave; // BLK		1		; calculated Average of DASH periods
 537:main.c        **** 
 538:main.c        ****     uint16  threshold;  // BLK		1		; Symbol detection threshold	
 539:main.c        ****     uint16  new_threshold;  // BLK		1	; Symbol detection threshold	
 540:main.c        ****     uint16  period;     // BLK		1		; Gets last period measurement
 541:main.c        ****     uint16  code;       // BLK		1		; Variables for decoding: code mask
 542:main.c        ****     uint16  mask;       // BLK		1		; ""
 543:main.c        ****     uint16  character;  // BLK		1		; Last decoded character
 544:main.c        ****     
 545:main.c        ****     uint16  dit_cntr;   // watch doc for 16 continuous dit.
 546:main.c        ****     uint16  dah_cntr;   // watch doc for 16 continuous dah.
 547:main.c        ****     
 548:main.c        ****     //  code 0bxxxx xxxx
 549:main.c        ****     //      bit0    : 1st symbol    0: DASH, 1: DIT
 550:main.c        ****     //      bit1    : 2nd symbol    0: DASH, 1: DIT
 551:main.c        ****     //      bit2    : 3rd symbol    0: DASH, 1: DIT
 552:main.c        ****     //      bit3    : 4th symbol    0: DASH, 1: DIT
 553:main.c        ****     //      bit4    : 5th symbol    0: DASH, 1: DIT
 554:main.c        ****     //      bit5    : 6th symbol    0: DASH, 1: DIT
 555:main.c        ****     //      end of symbol (bit2 ~ bit6) = mask << 1
 556:main.c        ****     //
 557:main.c        ****     //      (e.g.)
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 27


 558:main.c        ****     //      'w' : .-- (+end of symbol)
 559:main.c        ****     //              2^0*1 + 2^1*0 + 2^2*0 + 2^3*1 = 0b0000 1001 = 9 
 560:main.c        ****     //      'f' : ..-. (+end of symbol)
 561:main.c        ****     //              2^0*1 + 2^1*1 + 2^2*0 + 2^3*1 + 2^4*1 = 0b0001 1011 = 27 
 562:main.c        ****     //
 563:main.c        ****     //  mask 0bxxxx xxxx
 564:main.c        ****     //      bit0    : 1st symbol    0b0000 0001 (initial value)
 565:main.c        ****     //      bit1    : 2nd symbol    0b0000 0010 (processing symbol)
 566:main.c        ****     //      bit2    : 3rd symbol    0b0000 0100 (processing symbol)
 567:main.c        ****     //      bit3    : 4th symbol    0b0000 1000 (processing symbol)
 568:main.c        ****     //      bit4    : 5th symbol    0b0001 0000 (processing symbol)
 569:main.c        ****     //      bit5    : 6th symbol    0b0010 0000 (processing symbol)
 570:main.c        ****     //
 571:main.c        ****     
 572:main.c        ****     reset_flag = 1;
 922              		.loc 1 572 0
 923 002e 0123     		movs	r3, #1
 924 0030 87F83C30 		strb	r3, [r7, #60]
 925              	.L59:
 573:main.c        ****     
 574:main.c        ****     // Main Loop
 575:main.c        ****     while(1)
 576:main.c        ****     {
 577:main.c        ****         TONE_Write(1);  // Debug
 926              		.loc 1 577 0
 927 0034 0120     		movs	r0, #1
 928 0036 FFF7FEFF 		bl	TONE_Write
 578:main.c        **** 
 579:main.c        ****         if (reset_flag == 1)
 929              		.loc 1 579 0
 930 003a 97F83C30 		ldrb	r3, [r7, #60]	@ zero_extendqisi2
 931 003e 012B     		cmp	r3, #1
 932 0040 5CD1     		bne	.L34
 580:main.c        ****         {
 581:main.c        ****             // reset learning (20WPM)
 582:main.c        ****             reset_flag = 0;
 933              		.loc 1 582 0
 934 0042 0023     		movs	r3, #0
 935 0044 87F83C30 		strb	r3, [r7, #60]
 583:main.c        **** 
 584:main.c        ****             for (i = 0; i < 4; i++)
 936              		.loc 1 584 0
 937 0048 0023     		movs	r3, #0
 938 004a 87F83B30 		strb	r3, [r7, #59]
 939 004e 0DE0     		b	.L35
 940              	.L36:
 585:main.c        ****                ditvals[i] = DIT_DEFAULT;
 941              		.loc 1 585 0 discriminator 3
 942 0050 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 943 0054 5B00     		lsls	r3, r3, #1
 944 0056 07F14002 		add	r2, r7, #64
 945 005a 1344     		add	r3, r3, r2
 946 005c 0C22     		movs	r2, #12
 947 005e 23F8282C 		strh	r2, [r3, #-40]	@ movhi
 584:main.c        ****                ditvals[i] = DIT_DEFAULT;
 948              		.loc 1 584 0 discriminator 3
 949 0062 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 28


 950 0066 0133     		adds	r3, r3, #1
 951 0068 87F83B30 		strb	r3, [r7, #59]
 952              	.L35:
 584:main.c        ****                ditvals[i] = DIT_DEFAULT;
 953              		.loc 1 584 0 is_stmt 0 discriminator 1
 954 006c 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 955 0070 032B     		cmp	r3, #3
 956 0072 EDD9     		bls	.L36
 586:main.c        ****             ditptr = 0;
 957              		.loc 1 586 0 is_stmt 1
 958 0074 0023     		movs	r3, #0
 959 0076 FB86     		strh	r3, [r7, #54]	@ movhi
 587:main.c        ****             ditave = DIT_DEFAULT;
 960              		.loc 1 587 0
 961 0078 0C23     		movs	r3, #12
 962 007a BB86     		strh	r3, [r7, #52]	@ movhi
 588:main.c        ****             for (i = 0; i < 4; i++)
 963              		.loc 1 588 0
 964 007c 0023     		movs	r3, #0
 965 007e 87F83B30 		strb	r3, [r7, #59]
 966 0082 0DE0     		b	.L37
 967              	.L38:
 589:main.c        ****                dahvals[i] = DAH_DEFAULT;
 968              		.loc 1 589 0 discriminator 3
 969 0084 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 970 0088 5B00     		lsls	r3, r3, #1
 971 008a 07F14002 		add	r2, r7, #64
 972 008e 1344     		add	r3, r3, r2
 973 0090 2422     		movs	r2, #36
 974 0092 23F8302C 		strh	r2, [r3, #-48]	@ movhi
 588:main.c        ****             for (i = 0; i < 4; i++)
 975              		.loc 1 588 0 discriminator 3
 976 0096 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 977 009a 0133     		adds	r3, r3, #1
 978 009c 87F83B30 		strb	r3, [r7, #59]
 979              	.L37:
 588:main.c        ****             for (i = 0; i < 4; i++)
 980              		.loc 1 588 0 is_stmt 0 discriminator 1
 981 00a0 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 982 00a4 032B     		cmp	r3, #3
 983 00a6 EDD9     		bls	.L38
 590:main.c        ****             dahptr = 0;
 984              		.loc 1 590 0 is_stmt 1
 985 00a8 0023     		movs	r3, #0
 986 00aa 7B86     		strh	r3, [r7, #50]	@ movhi
 591:main.c        ****             dahave = DAH_DEFAULT;
 987              		.loc 1 591 0
 988 00ac 2423     		movs	r3, #36
 989 00ae FB81     		strh	r3, [r7, #14]	@ movhi
 592:main.c        ****             new_dahave = DAH_DEFAULT;
 990              		.loc 1 592 0
 991 00b0 2423     		movs	r3, #36
 992 00b2 3B86     		strh	r3, [r7, #48]	@ movhi
 593:main.c        ****             dit_cntr = 0;
 993              		.loc 1 593 0
 994 00b4 0023     		movs	r3, #0
 995 00b6 7B85     		strh	r3, [r7, #42]	@ movhi
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 29


 594:main.c        ****             dah_cntr = 0;
 996              		.loc 1 594 0
 997 00b8 0023     		movs	r3, #0
 998 00ba 3B85     		strh	r3, [r7, #40]	@ movhi
 595:main.c        **** 
 596:main.c        ****             code = 0x00;           // initial code
 999              		.loc 1 596 0
 1000 00bc 0023     		movs	r3, #0
 1001 00be 7B81     		strh	r3, [r7, #10]	@ movhi
 597:main.c        ****             mask = 0x01;           // initial position : 0b00000001
 1002              		.loc 1 597 0
 1003 00c0 0123     		movs	r3, #1
 1004 00c2 BB85     		strh	r3, [r7, #44]	@ movhi
 598:main.c        **** 
 599:main.c        ****             threshold = THRESHOLD_DEFAULT;
 1005              		.loc 1 599 0
 1006 00c4 1823     		movs	r3, #24
 1007 00c6 BB81     		strh	r3, [r7, #12]	@ movhi
 600:main.c        ****             
 601:main.c        ****             // display the reset state on CLCD
 602:main.c        ****             xQueueSend(xQueue_WPM, &code, 0);
 1008              		.loc 1 602 0
 1009 00c8 A24B     		ldr	r3, .L60
 1010 00ca 1868     		ldr	r0, [r3]
 1011 00cc 07F10A01 		add	r1, r7, #10
 1012 00d0 0023     		movs	r3, #0
 1013 00d2 0022     		movs	r2, #0
 1014 00d4 FFF7FEFF 		bl	xQueueGenericSend
 603:main.c        ****             xQueueSend(xQueue_TH, &threshold, 0);
 1015              		.loc 1 603 0
 1016 00d8 9F4B     		ldr	r3, .L60+4
 1017 00da 1868     		ldr	r0, [r3]
 1018 00dc 07F10C01 		add	r1, r7, #12
 1019 00e0 0023     		movs	r3, #0
 1020 00e2 0022     		movs	r2, #0
 1021 00e4 FFF7FEFF 		bl	xQueueGenericSend
 604:main.c        ****             // send ESC code to clear the line
 605:main.c        ****             character = 0x1b;
 1022              		.loc 1 605 0
 1023 00e8 1B23     		movs	r3, #27
 1024 00ea 3B81     		strh	r3, [r7, #8]	@ movhi
 606:main.c        ****             xQueueSend(xQueue_CHAR, &character, 0);
 1025              		.loc 1 606 0
 1026 00ec 9B4B     		ldr	r3, .L60+8
 1027 00ee 1868     		ldr	r0, [r3]
 1028 00f0 07F10801 		add	r1, r7, #8
 1029 00f4 0023     		movs	r3, #0
 1030 00f6 0022     		movs	r2, #0
 1031 00f8 FFF7FEFF 		bl	xQueueGenericSend
 1032              	.L34:
 607:main.c        ****         }
 608:main.c        ****         
 609:main.c        ****         if (uxQueueMessagesWaiting(xQueue_TONE) > 0)
 1033              		.loc 1 609 0
 1034 00fc 984B     		ldr	r3, .L60+12
 1035 00fe 1B68     		ldr	r3, [r3]
 1036 0100 1846     		mov	r0, r3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 30


 1037 0102 FFF7FEFF 		bl	uxQueueMessagesWaiting
 1038 0106 0346     		mov	r3, r0
 1039 0108 002B     		cmp	r3, #0
 1040 010a 54D0     		beq	.L39
 610:main.c        ****         {
 611:main.c        ****             xQueueReceive(xQueue_TONE, &tone, 0);
 1041              		.loc 1 611 0
 1042 010c 944B     		ldr	r3, .L60+12
 1043 010e 1868     		ldr	r0, [r3]
 1044 0110 07F12101 		add	r1, r7, #33
 1045 0114 0023     		movs	r3, #0
 1046 0116 0022     		movs	r2, #0
 1047 0118 FFF7FEFF 		bl	xQueueGenericReceive
 612:main.c        ****             // TOne Monitor
 613:main.c        ****             //TONE_Write(tone);
 614:main.c        ****             period = (uint8)_Counter5ms;
 1048              		.loc 1 614 0
 1049 011c 3B8F     		ldrh	r3, [r7, #56]	@ movhi
 1050 011e DBB2     		uxtb	r3, r3
 1051 0120 FB85     		strh	r3, [r7, #46]	@ movhi
 615:main.c        ****             
 616:main.c        ****             if (tone == 0 && last_tone > 0)    // Tone detected
 1052              		.loc 1 616 0
 1053 0122 97F82130 		ldrb	r3, [r7, #33]	@ zero_extendqisi2
 1054 0126 002B     		cmp	r3, #0
 1055 0128 09D1     		bne	.L40
 1056              		.loc 1 616 0 is_stmt 0 discriminator 1
 1057 012a 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 1058 012e 002B     		cmp	r3, #0
 1059 0130 05D0     		beq	.L40
 617:main.c        ****             {
 618:main.c        ****                 tone_flag = 1;
 1060              		.loc 1 618 0 is_stmt 1
 1061 0132 0123     		movs	r3, #1
 1062 0134 87F83E30 		strb	r3, [r7, #62]
 619:main.c        ****                 _Counter5ms = 0;
 1063              		.loc 1 619 0
 1064 0138 0023     		movs	r3, #0
 1065 013a 3B87     		strh	r3, [r7, #56]	@ movhi
 1066 013c 37E0     		b	.L41
 1067              	.L40:
 620:main.c        ****             }
 621:main.c        ****             else if (tone > 0 && last_tone == 0)    // Pause detected
 1068              		.loc 1 621 0
 1069 013e 97F82130 		ldrb	r3, [r7, #33]	@ zero_extendqisi2
 1070 0142 002B     		cmp	r3, #0
 1071 0144 09D0     		beq	.L42
 1072              		.loc 1 621 0 is_stmt 0 discriminator 1
 1073 0146 97F83F30 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 1074 014a 002B     		cmp	r3, #0
 1075 014c 05D1     		bne	.L42
 622:main.c        ****             {
 623:main.c        ****                 pause_flag = 1;
 1076              		.loc 1 623 0 is_stmt 1
 1077 014e 0123     		movs	r3, #1
 1078 0150 87F83D30 		strb	r3, [r7, #61]
 624:main.c        ****                 _Counter5ms = 0;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 31


 1079              		.loc 1 624 0
 1080 0154 0023     		movs	r3, #0
 1081 0156 3B87     		strh	r3, [r7, #56]	@ movhi
 1082 0158 29E0     		b	.L41
 1083              	.L42:
 625:main.c        ****             }
 626:main.c        ****             // if there is a processing symbol, then set pause flag to complete cnvert.
 627:main.c        ****             else if (mask > 1 && _Counter5ms > threshold * 4)
 1084              		.loc 1 627 0
 1085 015a BB8D     		ldrh	r3, [r7, #44]
 1086 015c 012B     		cmp	r3, #1
 1087 015e 0AD9     		bls	.L43
 1088              		.loc 1 627 0 is_stmt 0 discriminator 1
 1089 0160 3A8F     		ldrh	r2, [r7, #56]
 1090 0162 BB89     		ldrh	r3, [r7, #12]
 1091 0164 9B00     		lsls	r3, r3, #2
 1092 0166 9A42     		cmp	r2, r3
 1093 0168 05DD     		ble	.L43
 628:main.c        ****             {
 629:main.c        ****                 pause_flag = 1;
 1094              		.loc 1 629 0 is_stmt 1
 1095 016a 0123     		movs	r3, #1
 1096 016c 87F83D30 		strb	r3, [r7, #61]
 630:main.c        ****                 _Counter5ms = 0;
 1097              		.loc 1 630 0
 1098 0170 0023     		movs	r3, #0
 1099 0172 3B87     		strh	r3, [r7, #56]	@ movhi
 1100 0174 1BE0     		b	.L41
 1101              	.L43:
 631:main.c        ****             }
 632:main.c        ****             else
 633:main.c        ****             {
 634:main.c        ****                 // increment 5ms counter
 635:main.c        ****                 _Counter5ms++;
 1102              		.loc 1 635 0
 1103 0176 3B8F     		ldrh	r3, [r7, #56]
 1104 0178 0133     		adds	r3, r3, #1
 1105 017a 3B87     		strh	r3, [r7, #56]	@ movhi
 636:main.c        ****                 
 637:main.c        ****                 //if ((_Counter5ms % 0x80) == 0)
 638:main.c        ****                 if ((_Counter5ms % 0x100) == 0)     // koseki(2021.8.10)
 1106              		.loc 1 638 0
 1107 017c 3B8F     		ldrh	r3, [r7, #56]	@ movhi
 1108 017e DBB2     		uxtb	r3, r3
 1109 0180 9BB2     		uxth	r3, r3
 1110 0182 002B     		cmp	r3, #0
 1111 0184 09D1     		bne	.L44
 639:main.c        ****                 {
 640:main.c        ****                     character = ' ';
 1112              		.loc 1 640 0
 1113 0186 2023     		movs	r3, #32
 1114 0188 3B81     		strh	r3, [r7, #8]	@ movhi
 641:main.c        ****                     xQueueSend(xQueue_CHAR, &character, 0);
 1115              		.loc 1 641 0
 1116 018a 744B     		ldr	r3, .L60+8
 1117 018c 1868     		ldr	r0, [r3]
 1118 018e 07F10801 		add	r1, r7, #8
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 32


 1119 0192 0023     		movs	r3, #0
 1120 0194 0022     		movs	r2, #0
 1121 0196 FFF7FEFF 		bl	xQueueGenericSend
 1122              	.L44:
 642:main.c        ****                 }
 643:main.c        ****                 if (_Counter5ms > NB_LEARN_PERIODS)
 1123              		.loc 1 643 0
 1124 019a 3B8F     		ldrh	r3, [r7, #56]
 1125 019c 40F2FB42 		movw	r2, #1275
 1126 01a0 9342     		cmp	r3, r2
 1127 01a2 04D9     		bls	.L41
 644:main.c        ****                 {
 645:main.c        ****                     reset_flag = 1;
 1128              		.loc 1 645 0
 1129 01a4 0123     		movs	r3, #1
 1130 01a6 87F83C30 		strb	r3, [r7, #60]
 646:main.c        ****                     _Counter5ms = 0;
 1131              		.loc 1 646 0
 1132 01aa 0023     		movs	r3, #0
 1133 01ac 3B87     		strh	r3, [r7, #56]	@ movhi
 1134              	.L41:
 647:main.c        ****                 }
 648:main.c        ****             }
 649:main.c        ****             // save the last tone
 650:main.c        ****             last_tone = tone;
 1135              		.loc 1 650 0
 1136 01ae 97F82130 		ldrb	r3, [r7, #33]
 1137 01b2 87F83F30 		strb	r3, [r7, #63]
 1138              	.L39:
 651:main.c        ****         }
 652:main.c        ****            
 653:main.c        ****         if (tone_flag == 1)
 1139              		.loc 1 653 0
 1140 01b6 97F83E30 		ldrb	r3, [r7, #62]	@ zero_extendqisi2
 1141 01ba 012B     		cmp	r3, #1
 1142 01bc 40F08680 		bne	.L45
 654:main.c        ****         {
 655:main.c        ****             tone_flag = 0;
 1143              		.loc 1 655 0
 1144 01c0 0023     		movs	r3, #0
 1145 01c2 87F83E30 		strb	r3, [r7, #62]
 656:main.c        ****             if (period > threshold)
 1146              		.loc 1 656 0
 1147 01c6 BB89     		ldrh	r3, [r7, #12]
 1148 01c8 FA8D     		ldrh	r2, [r7, #46]
 1149 01ca 9A42     		cmp	r2, r3
 1150 01cc 34D9     		bls	.L46
 657:main.c        ****             {   // DASH
 658:main.c        ****                 // if period is valid, then calc. dah average.
 659:main.c        ****                 if (period < DAH_LOWER_LIMIT && period > DAH_UPPER_LIMIT)
 1151              		.loc 1 659 0
 1152 01ce FB8D     		ldrh	r3, [r7, #46]
 1153 01d0 4A2B     		cmp	r3, #74
 1154 01d2 1DD8     		bhi	.L47
 1155              		.loc 1 659 0 is_stmt 0 discriminator 1
 1156 01d4 FB8D     		ldrh	r3, [r7, #46]
 1157 01d6 122B     		cmp	r3, #18
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 33


 1158 01d8 1AD9     		bls	.L47
 660:main.c        ****                 {
 661:main.c        ****                     dahvals[dahptr] = period;
 1159              		.loc 1 661 0 is_stmt 1
 1160 01da 7B8E     		ldrh	r3, [r7, #50]
 1161 01dc 5B00     		lsls	r3, r3, #1
 1162 01de 07F14002 		add	r2, r7, #64
 1163 01e2 1344     		add	r3, r3, r2
 1164 01e4 FA8D     		ldrh	r2, [r7, #46]	@ movhi
 1165 01e6 23F8302C 		strh	r2, [r3, #-48]	@ movhi
 662:main.c        ****                     dahptr = (dahptr + 1) & 0x03;
 1166              		.loc 1 662 0
 1167 01ea 7B8E     		ldrh	r3, [r7, #50]	@ movhi
 1168 01ec 0133     		adds	r3, r3, #1
 1169 01ee 9BB2     		uxth	r3, r3
 1170 01f0 03F00303 		and	r3, r3, #3
 1171 01f4 7B86     		strh	r3, [r7, #50]	@ movhi
 663:main.c        ****                     new_dahave = (dahvals[0] + dahvals[1] + dahvals[2] + dahvals[3]) / 4;
 1172              		.loc 1 663 0
 1173 01f6 3B8A     		ldrh	r3, [r7, #16]
 1174 01f8 1A46     		mov	r2, r3
 1175 01fa 7B8A     		ldrh	r3, [r7, #18]
 1176 01fc 1344     		add	r3, r3, r2
 1177 01fe BA8A     		ldrh	r2, [r7, #20]
 1178 0200 1344     		add	r3, r3, r2
 1179 0202 FA8A     		ldrh	r2, [r7, #22]
 1180 0204 1344     		add	r3, r3, r2
 1181 0206 002B     		cmp	r3, #0
 1182 0208 00DA     		bge	.L48
 1183 020a 0333     		adds	r3, r3, #3
 1184              	.L48:
 1185 020c 9B10     		asrs	r3, r3, #2
 1186 020e 3B86     		strh	r3, [r7, #48]	@ movhi
 1187              	.L47:
 664:main.c        ****                 }
 665:main.c        ****                 if (new_dahave != dahave)
 1188              		.loc 1 665 0
 1189 0210 FB89     		ldrh	r3, [r7, #14]
 1190 0212 3A8E     		ldrh	r2, [r7, #48]
 1191 0214 9A42     		cmp	r2, r3
 1192 0216 09D0     		beq	.L49
 666:main.c        ****                 {   // dahave is changed
 667:main.c        ****                     dahave = new_dahave;
 1193              		.loc 1 667 0
 1194 0218 3B8E     		ldrh	r3, [r7, #48]	@ movhi
 1195 021a FB81     		strh	r3, [r7, #14]	@ movhi
 668:main.c        ****                     xQueueSend(xQueue_WPM, &dahave, 0);
 1196              		.loc 1 668 0
 1197 021c 4D4B     		ldr	r3, .L60
 1198 021e 1868     		ldr	r0, [r3]
 1199 0220 07F10E01 		add	r1, r7, #14
 1200 0224 0023     		movs	r3, #0
 1201 0226 0022     		movs	r2, #0
 1202 0228 FFF7FEFF 		bl	xQueueGenericSend
 1203              	.L49:
 669:main.c        ****                 }
 670:main.c        ****                 dah_cntr++;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 34


 1204              		.loc 1 670 0
 1205 022c 3B8D     		ldrh	r3, [r7, #40]
 1206 022e 0133     		adds	r3, r3, #1
 1207 0230 3B85     		strh	r3, [r7, #40]	@ movhi
 671:main.c        ****                 dit_cntr = 0;
 1208              		.loc 1 671 0
 1209 0232 0023     		movs	r3, #0
 1210 0234 7B85     		strh	r3, [r7, #42]	@ movhi
 1211 0236 24E0     		b	.L50
 1212              	.L46:
 672:main.c        ****             }
 673:main.c        ****             else
 674:main.c        ****             {   // DIT
 675:main.c        ****                 code += mask;
 1213              		.loc 1 675 0
 1214 0238 7A89     		ldrh	r2, [r7, #10]
 1215 023a BB8D     		ldrh	r3, [r7, #44]	@ movhi
 1216 023c 1344     		add	r3, r3, r2
 1217 023e 9BB2     		uxth	r3, r3
 1218 0240 7B81     		strh	r3, [r7, #10]	@ movhi
 676:main.c        ****                 // CalcAveDit
 677:main.c        ****                 ditvals[ditptr] = period;
 1219              		.loc 1 677 0
 1220 0242 FB8E     		ldrh	r3, [r7, #54]
 1221 0244 5B00     		lsls	r3, r3, #1
 1222 0246 07F14002 		add	r2, r7, #64
 1223 024a 1344     		add	r3, r3, r2
 1224 024c FA8D     		ldrh	r2, [r7, #46]	@ movhi
 1225 024e 23F8282C 		strh	r2, [r3, #-40]	@ movhi
 678:main.c        ****                 ditptr = (ditptr + 1) & 0x03;
 1226              		.loc 1 678 0
 1227 0252 FB8E     		ldrh	r3, [r7, #54]	@ movhi
 1228 0254 0133     		adds	r3, r3, #1
 1229 0256 9BB2     		uxth	r3, r3
 1230 0258 03F00303 		and	r3, r3, #3
 1231 025c FB86     		strh	r3, [r7, #54]	@ movhi
 679:main.c        ****                 ditave = (ditvals[0] + ditvals[1] + ditvals[2] + ditvals[3]) / 4;
 1232              		.loc 1 679 0
 1233 025e 3B8B     		ldrh	r3, [r7, #24]
 1234 0260 1A46     		mov	r2, r3
 1235 0262 7B8B     		ldrh	r3, [r7, #26]
 1236 0264 1344     		add	r3, r3, r2
 1237 0266 BA8B     		ldrh	r2, [r7, #28]
 1238 0268 1344     		add	r3, r3, r2
 1239 026a FA8B     		ldrh	r2, [r7, #30]
 1240 026c 1344     		add	r3, r3, r2
 1241 026e 002B     		cmp	r3, #0
 1242 0270 00DA     		bge	.L51
 1243 0272 0333     		adds	r3, r3, #3
 1244              	.L51:
 1245 0274 9B10     		asrs	r3, r3, #2
 1246 0276 BB86     		strh	r3, [r7, #52]	@ movhi
 680:main.c        ****                 dah_cntr = 0;
 1247              		.loc 1 680 0
 1248 0278 0023     		movs	r3, #0
 1249 027a 3B85     		strh	r3, [r7, #40]	@ movhi
 681:main.c        ****                 dit_cntr++;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 35


 1250              		.loc 1 681 0
 1251 027c 7B8D     		ldrh	r3, [r7, #42]
 1252 027e 0133     		adds	r3, r3, #1
 1253 0280 7B85     		strh	r3, [r7, #42]	@ movhi
 1254              	.L50:
 682:main.c        ****             }
 683:main.c        ****             // Update threshold
 684:main.c        ****             new_threshold = (dahave + ditave) / 2;
 1255              		.loc 1 684 0
 1256 0282 FB89     		ldrh	r3, [r7, #14]
 1257 0284 1A46     		mov	r2, r3
 1258 0286 BB8E     		ldrh	r3, [r7, #52]
 1259 0288 1344     		add	r3, r3, r2
 1260 028a DA0F     		lsrs	r2, r3, #31
 1261 028c 1344     		add	r3, r3, r2
 1262 028e 5B10     		asrs	r3, r3, #1
 1263 0290 7B84     		strh	r3, [r7, #34]	@ movhi
 685:main.c        ****             if (new_threshold != threshold)
 1264              		.loc 1 685 0
 1265 0292 BB89     		ldrh	r3, [r7, #12]
 1266 0294 7A8C     		ldrh	r2, [r7, #34]
 1267 0296 9A42     		cmp	r2, r3
 1268 0298 09D0     		beq	.L52
 686:main.c        ****             {
 687:main.c        ****                 threshold = new_threshold;
 1269              		.loc 1 687 0
 1270 029a 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 1271 029c BB81     		strh	r3, [r7, #12]	@ movhi
 688:main.c        ****                 xQueueSend(xQueue_TH, &threshold, 0);
 1272              		.loc 1 688 0
 1273 029e 2E4B     		ldr	r3, .L60+4
 1274 02a0 1868     		ldr	r0, [r3]
 1275 02a2 07F10C01 		add	r1, r7, #12
 1276 02a6 0023     		movs	r3, #0
 1277 02a8 0022     		movs	r2, #0
 1278 02aa FFF7FEFF 		bl	xQueueGenericSend
 1279              	.L52:
 689:main.c        ****             }
 690:main.c        ****             // Shift mask
 691:main.c        ****             if (mask < 0b10000000)
 1280              		.loc 1 691 0
 1281 02ae BB8D     		ldrh	r3, [r7, #44]
 1282 02b0 7F2B     		cmp	r3, #127
 1283 02b2 02D8     		bhi	.L53
 692:main.c        ****                 mask = mask << 1;
 1284              		.loc 1 692 0
 1285 02b4 BB8D     		ldrh	r3, [r7, #44]	@ movhi
 1286 02b6 5B00     		lsls	r3, r3, #1
 1287 02b8 BB85     		strh	r3, [r7, #44]	@ movhi
 1288              	.L53:
 693:main.c        ****             
 694:main.c        ****             //continuous dit or dah check
 695:main.c        ****             if (dah_cntr > 15 || dit_cntr > 15)
 1289              		.loc 1 695 0
 1290 02ba 3B8D     		ldrh	r3, [r7, #40]
 1291 02bc 0F2B     		cmp	r3, #15
 1292 02be 02D8     		bhi	.L54
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 36


 1293              		.loc 1 695 0 is_stmt 0 discriminator 1
 1294 02c0 7B8D     		ldrh	r3, [r7, #42]
 1295 02c2 0F2B     		cmp	r3, #15
 1296 02c4 02D9     		bls	.L45
 1297              	.L54:
 696:main.c        ****                 reset_flag = 1;
 1298              		.loc 1 696 0 is_stmt 1
 1299 02c6 0123     		movs	r3, #1
 1300 02c8 87F83C30 		strb	r3, [r7, #60]
 1301              	.L45:
 697:main.c        ****         }
 698:main.c        ****         
 699:main.c        ****         if (pause_flag == 1)
 1302              		.loc 1 699 0
 1303 02cc 97F83D30 		ldrb	r3, [r7, #61]	@ zero_extendqisi2
 1304 02d0 012B     		cmp	r3, #1
 1305 02d2 38D1     		bne	.L55
 700:main.c        ****         {
 701:main.c        ****             pause_flag = 0;
 1306              		.loc 1 701 0
 1307 02d4 0023     		movs	r3, #0
 1308 02d6 87F83D30 		strb	r3, [r7, #61]
 702:main.c        ****             if (mask > 1 && period > threshold)
 1309              		.loc 1 702 0
 1310 02da BB8D     		ldrh	r3, [r7, #44]
 1311 02dc 012B     		cmp	r3, #1
 1312 02de 20D9     		bls	.L56
 1313              		.loc 1 702 0 is_stmt 0 discriminator 1
 1314 02e0 BB89     		ldrh	r3, [r7, #12]
 1315 02e2 FA8D     		ldrh	r2, [r7, #46]
 1316 02e4 9A42     		cmp	r2, r3
 1317 02e6 1CD9     		bls	.L56
 703:main.c        ****             {
 704:main.c        ****                 // Pause between characters is detected.
 705:main.c        ****                 code += mask;
 1318              		.loc 1 705 0 is_stmt 1
 1319 02e8 7A89     		ldrh	r2, [r7, #10]
 1320 02ea BB8D     		ldrh	r3, [r7, #44]	@ movhi
 1321 02ec 1344     		add	r3, r3, r2
 1322 02ee 9BB2     		uxth	r3, r3
 1323 02f0 7B81     		strh	r3, [r7, #10]	@ movhi
 706:main.c        ****                 // convert code to ASCII code
 707:main.c        ****                 if (code > 121)
 1324              		.loc 1 707 0
 1325 02f2 7B89     		ldrh	r3, [r7, #10]
 1326 02f4 792B     		cmp	r3, #121
 1327 02f6 02D9     		bls	.L57
 708:main.c        ****                     character = '*';
 1328              		.loc 1 708 0
 1329 02f8 2A23     		movs	r3, #42
 1330 02fa 3B81     		strh	r3, [r7, #8]	@ movhi
 1331 02fc 05E0     		b	.L58
 1332              	.L57:
 709:main.c        ****                 else
 710:main.c        ****                     character = MorseCharTraslateTable[code];
 1333              		.loc 1 710 0
 1334 02fe 7B89     		ldrh	r3, [r7, #10]
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 37


 1335 0300 1A46     		mov	r2, r3
 1336 0302 184B     		ldr	r3, .L60+16
 1337 0304 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1338 0306 9BB2     		uxth	r3, r3
 1339 0308 3B81     		strh	r3, [r7, #8]	@ movhi
 1340              	.L58:
 711:main.c        ****                 xQueueSend(xQueue_CHAR, &character, 0);
 1341              		.loc 1 711 0
 1342 030a 144B     		ldr	r3, .L60+8
 1343 030c 1868     		ldr	r0, [r3]
 1344 030e 07F10801 		add	r1, r7, #8
 1345 0312 0023     		movs	r3, #0
 1346 0314 0022     		movs	r2, #0
 1347 0316 FFF7FEFF 		bl	xQueueGenericSend
 712:main.c        **** 
 713:main.c        ****                 code = 0;    // initial code
 1348              		.loc 1 713 0
 1349 031a 0023     		movs	r3, #0
 1350 031c 7B81     		strh	r3, [r7, #10]	@ movhi
 714:main.c        ****                 mask = 1;    // initial position : 0b00000001
 1351              		.loc 1 714 0
 1352 031e 0123     		movs	r3, #1
 1353 0320 BB85     		strh	r3, [r7, #44]	@ movhi
 1354              	.L56:
 715:main.c        ****             }
 716:main.c        ****             if (period > threshold * 3)
 1355              		.loc 1 716 0
 1356 0322 FA8D     		ldrh	r2, [r7, #46]
 1357 0324 BB89     		ldrh	r3, [r7, #12]
 1358 0326 1946     		mov	r1, r3
 1359 0328 0B46     		mov	r3, r1
 1360 032a 5B00     		lsls	r3, r3, #1
 1361 032c 0B44     		add	r3, r3, r1
 1362 032e 9A42     		cmp	r2, r3
 1363 0330 09DD     		ble	.L55
 717:main.c        ****             {
 718:main.c        ****                 // Pause between words is detected.
 719:main.c        ****                 character = ' ';
 1364              		.loc 1 719 0
 1365 0332 2023     		movs	r3, #32
 1366 0334 3B81     		strh	r3, [r7, #8]	@ movhi
 720:main.c        ****                 xQueueSend(xQueue_CHAR, &character, 0);
 1367              		.loc 1 720 0
 1368 0336 094B     		ldr	r3, .L60+8
 1369 0338 1868     		ldr	r0, [r3]
 1370 033a 07F10801 		add	r1, r7, #8
 1371 033e 0023     		movs	r3, #0
 1372 0340 0022     		movs	r2, #0
 1373 0342 FFF7FEFF 		bl	xQueueGenericSend
 1374              	.L55:
 721:main.c        ****             }
 722:main.c        ****         }
 723:main.c        ****         TONE_Write(0);  // Debug
 1375              		.loc 1 723 0
 1376 0346 0020     		movs	r0, #0
 1377 0348 FFF7FEFF 		bl	TONE_Write
 724:main.c        ****         
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 38


 725:main.c        ****         // sleep for 2ms
 726:main.c        ****         vTaskDelay(xDelay);
 1378              		.loc 1 726 0
 1379 034c 786A     		ldr	r0, [r7, #36]
 1380 034e FFF7FEFF 		bl	vTaskDelay
 727:main.c        ****     }
 1381              		.loc 1 727 0
 1382 0352 6FE6     		b	.L59
 1383              	.L61:
 1384              		.align	2
 1385              	.L60:
 1386 0354 00000000 		.word	xQueue_WPM
 1387 0358 00000000 		.word	xQueue_TH
 1388 035c 00000000 		.word	xQueue_CHAR
 1389 0360 00000000 		.word	xQueue_TONE
 1390 0364 00000000 		.word	MorseCharTraslateTable
 1391              		.cfi_endproc
 1392              	.LFE74:
 1393              		.size	Task_TONE, .-Task_TONE
 1394              		.section	.text.int_uartQueue_isr,"ax",%progbits
 1395              		.align	2
 1396              		.global	int_uartQueue_isr
 1397              		.thumb
 1398              		.thumb_func
 1399              		.type	int_uartQueue_isr, %function
 1400              	int_uartQueue_isr:
 1401              	.LFB75:
 728:main.c        **** 
 729:main.c        **** }
 730:main.c        **** 
 731:main.c        **** 
 732:main.c        **** //============================================================================
 733:main.c        **** //
 734:main.c        **** //	Task_USBUART
 735:main.c        **** //
 736:main.c        **** //============================================================================
 737:main.c        **** //
 738:main.c        **** // ISR of int_uartQueue(2kHz clock) interrupt.
 739:main.c        **** //
 740:main.c        **** CY_ISR(int_uartQueue_isr)
 741:main.c        **** {
 1402              		.loc 1 741 0
 1403              		.cfi_startproc
 1404              		@ args = 0, pretend = 0, frame = 0
 1405              		@ frame_needed = 1, uses_anonymous_args = 0
 1406 0000 80B5     		push	{r7, lr}
 1407              		.cfi_def_cfa_offset 8
 1408              		.cfi_offset 7, -8
 1409              		.cfi_offset 14, -4
 1410 0002 00AF     		add	r7, sp, #0
 1411              		.cfi_def_cfa_register 7
 742:main.c        ****     uartTxIsr();
 1412              		.loc 1 742 0
 1413 0004 FFF7FEFF 		bl	uartTxIsr
 743:main.c        ****     uartRxIsr();
 1414              		.loc 1 743 0
 1415 0008 FFF7FEFF 		bl	uartRxIsr
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 39


 744:main.c        **** }
 1416              		.loc 1 744 0
 1417 000c 00BF     		nop
 1418 000e 80BD     		pop	{r7, pc}
 1419              		.cfi_endproc
 1420              	.LFE75:
 1421              		.size	int_uartQueue_isr, .-int_uartQueue_isr
 1422              		.section	.rodata
 1423 003d 000000   		.align	2
 1424              		.type	pow10_32, %object
 1425              		.size	pow10_32, 44
 1426              	pow10_32:
 1427 0040 00000000 		.word	0
 1428 0044 01000000 		.word	1
 1429 0048 0A000000 		.word	10
 1430 004c 64000000 		.word	100
 1431 0050 E8030000 		.word	1000
 1432 0054 10270000 		.word	10000
 1433 0058 A0860100 		.word	100000
 1434 005c 40420F00 		.word	1000000
 1435 0060 80969800 		.word	10000000
 1436 0064 00E1F505 		.word	100000000
 1437 0068 00CA9A3B 		.word	1000000000
 1438              		.section	.text.putdec32,"ax",%progbits
 1439              		.align	2
 1440              		.global	putdec32
 1441              		.thumb
 1442              		.thumb_func
 1443              		.type	putdec32, %function
 1444              	putdec32:
 1445              	.LFB76:
 745:main.c        **** 
 746:main.c        **** // for DEBUG
 747:main.c        **** // 32-bit Decimal table
 748:main.c        **** static const uint32 CYCODE pow10_32[] = {
 749:main.c        ****     0L,
 750:main.c        ****     1L,
 751:main.c        ****     10L,
 752:main.c        ****     100L,
 753:main.c        ****     1000L,
 754:main.c        ****     10000L,
 755:main.c        ****     100000L,
 756:main.c        ****     1000000L,
 757:main.c        ****     10000000L,
 758:main.c        ****     100000000L,
 759:main.c        ****     1000000000L,
 760:main.c        **** };
 761:main.c        **** 
 762:main.c        **** // for DEBUG
 763:main.c        **** // 32-bit Decimal expression w/o ZERO SUPPRESS
 764:main.c        **** void putdec32(uint32 num, const uint8 nDigits)
 765:main.c        **** {
 1446              		.loc 1 765 0
 1447              		.cfi_startproc
 1448              		@ args = 0, pretend = 0, frame = 16
 1449              		@ frame_needed = 1, uses_anonymous_args = 0
 1450 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 40


 1451              		.cfi_def_cfa_offset 8
 1452              		.cfi_offset 7, -8
 1453              		.cfi_offset 14, -4
 1454 0002 84B0     		sub	sp, sp, #16
 1455              		.cfi_def_cfa_offset 24
 1456 0004 00AF     		add	r7, sp, #0
 1457              		.cfi_def_cfa_register 7
 1458 0006 7860     		str	r0, [r7, #4]
 1459 0008 0B46     		mov	r3, r1
 1460 000a FB70     		strb	r3, [r7, #3]
 766:main.c        ****     uint8       i;
 767:main.c        ****     uint8       k;
 768:main.c        ****     CYBIT       show = 0;
 1461              		.loc 1 768 0
 1462 000c 0023     		movs	r3, #0
 1463 000e 7B73     		strb	r3, [r7, #13]
 769:main.c        **** 
 770:main.c        ****     // The figure length to be expression
 771:main.c        ****     i = sizeof pow10_32 / sizeof pow10_32[0];
 1464              		.loc 1 771 0
 1465 0010 0B23     		movs	r3, #11
 1466 0012 FB73     		strb	r3, [r7, #15]
 772:main.c        ****     while (--i > 0)
 1467              		.loc 1 772 0
 1468 0014 2AE0     		b	.L64
 1469              	.L70:
 773:main.c        ****     {             // until unit's place
 774:main.c        ****         // Get the value of i-th degit
 775:main.c        ****         for (k = 0; num >= pow10_32[i]; k++)
 1470              		.loc 1 775 0
 1471 0016 0023     		movs	r3, #0
 1472 0018 BB73     		strb	r3, [r7, #14]
 1473 001a 09E0     		b	.L65
 1474              	.L66:
 776:main.c        ****         {
 777:main.c        ****             num -= pow10_32[i];
 1475              		.loc 1 777 0 discriminator 3
 1476 001c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1477 001e 184A     		ldr	r2, .L71
 1478 0020 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1479 0024 7A68     		ldr	r2, [r7, #4]
 1480 0026 D31A     		subs	r3, r2, r3
 1481 0028 7B60     		str	r3, [r7, #4]
 775:main.c        ****         {
 1482              		.loc 1 775 0 discriminator 3
 1483 002a BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1484 002c 0133     		adds	r3, r3, #1
 1485 002e BB73     		strb	r3, [r7, #14]
 1486              	.L65:
 775:main.c        ****         {
 1487              		.loc 1 775 0 is_stmt 0 discriminator 1
 1488 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1489 0032 134A     		ldr	r2, .L71
 1490 0034 52F82320 		ldr	r2, [r2, r3, lsl #2]
 1491 0038 7B68     		ldr	r3, [r7, #4]
 1492 003a 9A42     		cmp	r2, r3
 1493 003c EED9     		bls	.L66
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 41


 778:main.c        ****         }
 779:main.c        ****         // i-th degit is vald?
 780:main.c        ****         show = show || (i <= nDigits) || (k != 0);
 1494              		.loc 1 780 0 is_stmt 1
 1495 003e 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1496 0040 002B     		cmp	r3, #0
 1497 0042 06D1     		bne	.L67
 1498              		.loc 1 780 0 is_stmt 0 discriminator 2
 1499 0044 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1500 0046 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1501 0048 9A42     		cmp	r2, r3
 1502 004a 02D9     		bls	.L67
 1503              		.loc 1 780 0 discriminator 4
 1504 004c BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1505 004e 002B     		cmp	r3, #0
 1506 0050 01D0     		beq	.L68
 1507              	.L67:
 1508              		.loc 1 780 0 discriminator 5
 1509 0052 0123     		movs	r3, #1
 1510 0054 00E0     		b	.L69
 1511              	.L68:
 1512              		.loc 1 780 0 discriminator 6
 1513 0056 0023     		movs	r3, #0
 1514              	.L69:
 1515              		.loc 1 780 0 discriminator 8
 1516 0058 7B73     		strb	r3, [r7, #13]
 781:main.c        ****         if (show)
 1517              		.loc 1 781 0 is_stmt 1 discriminator 8
 1518 005a 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1519 005c 002B     		cmp	r3, #0
 1520 005e 05D0     		beq	.L64
 782:main.c        ****             putch(k + '0');     // Send i-th degit
 1521              		.loc 1 782 0
 1522 0060 BB7B     		ldrb	r3, [r7, #14]
 1523 0062 3033     		adds	r3, r3, #48
 1524 0064 DBB2     		uxtb	r3, r3
 1525 0066 1846     		mov	r0, r3
 1526 0068 FFF7FEFF 		bl	putch
 1527              	.L64:
 772:main.c        ****     {             // until unit's place
 1528              		.loc 1 772 0
 1529 006c FB7B     		ldrb	r3, [r7, #15]
 1530 006e 013B     		subs	r3, r3, #1
 1531 0070 FB73     		strb	r3, [r7, #15]
 1532 0072 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1533 0074 002B     		cmp	r3, #0
 1534 0076 CED1     		bne	.L70
 783:main.c        ****     }
 784:main.c        **** }
 1535              		.loc 1 784 0
 1536 0078 00BF     		nop
 1537 007a 1037     		adds	r7, r7, #16
 1538              		.cfi_def_cfa_offset 8
 1539 007c BD46     		mov	sp, r7
 1540              		.cfi_def_cfa_register 13
 1541              		@ sp needed
 1542 007e 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 42


 1543              	.L72:
 1544              		.align	2
 1545              	.L71:
 1546 0080 40000000 		.word	pow10_32
 1547              		.cfi_endproc
 1548              	.LFE76:
 1549              		.size	putdec32, .-putdec32
 1550              		.section	.text.Task_USBUART,"ax",%progbits
 1551              		.align	2
 1552              		.global	Task_USBUART
 1553              		.thumb
 1554              		.thumb_func
 1555              		.type	Task_USBUART, %function
 1556              	Task_USBUART:
 1557              	.LFB77:
 785:main.c        **** 
 786:main.c        **** void Task_USBUART(void *pvParameters)
 787:main.c        **** {
 1558              		.loc 1 787 0
 1559              		.cfi_startproc
 1560              		@ args = 0, pretend = 0, frame = 56
 1561              		@ frame_needed = 1, uses_anonymous_args = 0
 1562 0000 80B5     		push	{r7, lr}
 1563              		.cfi_def_cfa_offset 8
 1564              		.cfi_offset 7, -8
 1565              		.cfi_offset 14, -4
 1566 0002 8EB0     		sub	sp, sp, #56
 1567              		.cfi_def_cfa_offset 64
 1568 0004 00AF     		add	r7, sp, #0
 1569              		.cfi_def_cfa_register 7
 1570 0006 7860     		str	r0, [r7, #4]
 788:main.c        ****     char    character = '0';
 1571              		.loc 1 788 0
 1572 0008 3023     		movs	r3, #48
 1573 000a 87F82F30 		strb	r3, [r7, #47]
 789:main.c        ****     char    c_buf[16];          // 16byte FIFO buffer
 790:main.c        ****     uint8   c_ptr = 0;          // position of c_buf[]
 1574              		.loc 1 790 0
 1575 000e 0023     		movs	r3, #0
 1576 0010 87F83730 		strb	r3, [r7, #55]
 791:main.c        ****     char    str[20];
 792:main.c        ****     uint8   i;
 793:main.c        ****     const   portTickType xDelay = 50 / portTICK_RATE_MS;
 1577              		.loc 1 793 0
 1578 0014 3223     		movs	r3, #50
 1579 0016 3B63     		str	r3, [r7, #48]
 794:main.c        **** 
 795:main.c        ****     USBUART_Start(0, USBUART_DWR_VDDD_OPERATION);
 1580              		.loc 1 795 0
 1581 0018 0221     		movs	r1, #2
 1582 001a 0020     		movs	r0, #0
 1583 001c FFF7FEFF 		bl	USBUART_Start
 796:main.c        ****     // start 2kHz timer interrupt
 797:main.c        ****     int_uartQueue_StartEx(int_uartQueue_isr);
 1584              		.loc 1 797 0
 1585 0020 1848     		ldr	r0, .L82
 1586 0022 FFF7FEFF 		bl	int_uartQueue_StartEx
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 43


 1587              	.L79:
 798:main.c        **** 
 799:main.c        ****     // Main Loop
 800:main.c        ****  	while (1)
 801:main.c        **** 	{
 802:main.c        **** #if 1
 803:main.c        ****         // Wait until the intialization is done.
 804:main.c        ****         while (USBUART_GetConfiguration() == 0);
 1588              		.loc 1 804 0
 1589 0026 00BF     		nop
 1590              	.L74:
 1591              		.loc 1 804 0 is_stmt 0 discriminator 1
 1592 0028 FFF7FEFF 		bl	USBUART_GetConfiguration
 1593 002c 0346     		mov	r3, r0
 1594 002e 002B     		cmp	r3, #0
 1595 0030 FAD0     		beq	.L74
 805:main.c        **** 
 806:main.c        ****         USBUART_IsConfigurationChanged();       // Clear CHANGE flag
 1596              		.loc 1 806 0 is_stmt 1
 1597 0032 FFF7FEFF 		bl	USBUART_IsConfigurationChanged
 807:main.c        ****         USBUART_CDC_Init();                     // Start CDC function
 1598              		.loc 1 807 0
 1599 0036 FFF7FEFF 		bl	USBUART_CDC_Init
 1600              	.L78:
 808:main.c        ****         for (;;)
 809:main.c        ****         {
 810:main.c        ****             // If the confoguration is changed, then initialize USB again.
 811:main.c        ****             if (USBUART_IsConfigurationChanged())
 1601              		.loc 1 811 0
 1602 003a FFF7FEFF 		bl	USBUART_IsConfigurationChanged
 1603 003e 0346     		mov	r3, r0
 1604 0040 002B     		cmp	r3, #0
 1605 0042 19D1     		bne	.L81
 812:main.c        ****                 break;
 813:main.c        **** 
 814:main.c        ****             // Read USB port for COM data
 815:main.c        ****     		//ReadUSB();
 816:main.c        ****             
 817:main.c        ****             // Ignore the control comands
 818:main.c        ****             //(void)USBUART_IsLineChanged();
 819:main.c        ****             if (uxQueueMessagesWaiting(xQueue_CHAR) > 0)
 1606              		.loc 1 819 0
 1607 0044 104B     		ldr	r3, .L82+4
 1608 0046 1B68     		ldr	r3, [r3]
 1609 0048 1846     		mov	r0, r3
 1610 004a FFF7FEFF 		bl	uxQueueMessagesWaiting
 1611 004e 0346     		mov	r3, r0
 1612 0050 002B     		cmp	r3, #0
 1613 0052 F2D0     		beq	.L78
 820:main.c        ****             {
 821:main.c        ****                 xQueueReceive(xQueue_CHAR, &character, 0);
 1614              		.loc 1 821 0
 1615 0054 0C4B     		ldr	r3, .L82+4
 1616 0056 1868     		ldr	r0, [r3]
 1617 0058 07F12F01 		add	r1, r7, #47
 1618 005c 0023     		movs	r3, #0
 1619 005e 0022     		movs	r2, #0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 44


 1620 0060 FFF7FEFF 		bl	xQueueGenericReceive
 822:main.c        ****                 if (character != 0x1b)
 1621              		.loc 1 822 0
 1622 0064 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 1623 0068 1B2B     		cmp	r3, #27
 1624 006a E6D0     		beq	.L78
 823:main.c        ****                 {
 824:main.c        ****                     //c_buf[c_ptr] = character;
 825:main.c        ****                     //c_ptr = (c_ptr + 1) & 0x0f;
 826:main.c        ****                     putch(character);
 1625              		.loc 1 826 0
 1626 006c 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 1627 0070 1846     		mov	r0, r3
 1628 0072 FFF7FEFF 		bl	putch
 827:main.c        ****                 }
 828:main.c        ****                 //else    // ESC
 829:main.c        ****                 //{
 830:main.c        ****                 //    // clear the line
 831:main.c        ****                 //    for(i = 0; i < 16; i++)
 832:main.c        ****                 //       c_buf[i] = ' ';
 833:main.c        ****                 //}
 834:main.c        ****                 // copy 16 characters to sprintf buffer
 835:main.c        ****                 //for(i = 0; i < 16; i++)
 836:main.c        ****                 //    str[i] = c_buf[(c_ptr + i) & 0x0f];
 837:main.c        ****                 //str[16] = '\n';
 838:main.c        ****                 //putstr(str);
 839:main.c        ****             }
 840:main.c        **** 
 841:main.c        ****             
 842:main.c        ****             
 843:main.c        ****             
 844:main.c        ****         }
 1629              		.loc 1 844 0
 1630 0076 E0E7     		b	.L78
 1631              	.L81:
 812:main.c        **** 
 1632              		.loc 1 812 0
 1633 0078 00BF     		nop
 845:main.c        **** #else
 846:main.c        ****         uint32 nLine = 0;           // Line number
 847:main.c        ****         uint32 nChars = 0;          // Number of characters
 848:main.c        **** 
 849:main.c        ****         // Wait until the intialization is done.
 850:main.c        ****         while (USBUART_GetConfiguration() == 0);
 851:main.c        **** 
 852:main.c        ****         USBUART_IsConfigurationChanged();       // Clear CHANGE flag
 853:main.c        ****         USBUART_CDC_Init();                     // Start CDC function
 854:main.c        ****         
 855:main.c        ****         for (;;)
 856:main.c        ****         {
 857:main.c        ****             // If the confoguration is changed, then initialize USB again.
 858:main.c        ****             if (USBUART_IsConfigurationChanged())
 859:main.c        ****                 break;
 860:main.c        **** 
 861:main.c        ****             // Send the number of Rx character.
 862:main.c        ****             int16 ch = getch();
 863:main.c        ****             putstr(" - ");
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 45


 864:main.c        ****             if (ch >= 0)
 865:main.c        ****             {
 866:main.c        ****                 nChars++;
 867:main.c        ****                 if (ch == '\n') 
 868:main.c        ****                 {
 869:main.c        ****                     putdec32(nLine, 7);
 870:main.c        ****                     putstr(" - ");
 871:main.c        ****                     putdec32(nChars, 7);
 872:main.c        ****                     putstr("\n");
 873:main.c        ****                     nLine++;
 874:main.c        ****                     nChars = 0;
 875:main.c        ****                 }
 876:main.c        ****             }
 877:main.c        ****             
 878:main.c        ****             // Ignore the control comands
 879:main.c        ****             (void)USBUART_IsLineChanged();
 880:main.c        ****         }
 881:main.c        ****     
 882:main.c        ****     
 883:main.c        **** #endif
 884:main.c        ****         // sleep for 10ms
 885:main.c        ****         vTaskDelay(xDelay);
 1634              		.loc 1 885 0
 1635 007a 386B     		ldr	r0, [r7, #48]
 1636 007c FFF7FEFF 		bl	vTaskDelay
 886:main.c        **** 
 887:main.c        ****     }
 1637              		.loc 1 887 0
 1638 0080 D1E7     		b	.L79
 1639              	.L83:
 1640 0082 00BF     		.align	2
 1641              	.L82:
 1642 0084 00000000 		.word	int_uartQueue_isr
 1643 0088 00000000 		.word	xQueue_CHAR
 1644              		.cfi_endproc
 1645              	.LFE77:
 1646              		.size	Task_USBUART, .-Task_USBUART
 1647              		.section	.text.ReadUSB,"ax",%progbits
 1648              		.align	2
 1649              		.global	ReadUSB
 1650              		.thumb
 1651              		.thumb_func
 1652              		.type	ReadUSB, %function
 1653              	ReadUSB:
 1654              	.LFB78:
 888:main.c        **** }
 889:main.c        **** 
 890:main.c        **** //
 891:main.c        **** //	Read USB port for COM data
 892:main.c        **** //
 893:main.c        **** void ReadUSB (void)
 894:main.c        **** {
 1655              		.loc 1 894 0
 1656              		.cfi_startproc
 1657              		@ args = 0, pretend = 0, frame = 8
 1658              		@ frame_needed = 1, uses_anonymous_args = 0
 1659 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 46


 1660              		.cfi_def_cfa_offset 8
 1661              		.cfi_offset 7, -8
 1662              		.cfi_offset 14, -4
 1663 0002 82B0     		sub	sp, sp, #8
 1664              		.cfi_def_cfa_offset 16
 1665 0004 00AF     		add	r7, sp, #0
 1666              		.cfi_def_cfa_register 7
 895:main.c        **** 	uint8 rx;
 896:main.c        **** 
 897:main.c        ****     rx = getch();
 1667              		.loc 1 897 0
 1668 0006 FFF7FEFF 		bl	getch
 1669 000a 0346     		mov	r3, r0
 1670 000c FB71     		strb	r3, [r7, #7]
 898:main.c        ****     //if (rx >= 0)      // always true!!
 899:main.c        ****     if (rx < 0x80)
 1671              		.loc 1 899 0
 1672 000e 97F90730 		ldrsb	r3, [r7, #7]
 1673 0012 002B     		cmp	r3, #0
 1674 0014 28DB     		blt	.L88
 900:main.c        ****     {
 901:main.c        ****         ComRxCmd[ComRxPtr++] = rx;	// save in command buffer
 1675              		.loc 1 901 0
 1676 0016 164B     		ldr	r3, .L89
 1677 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1678 001a 5A1C     		adds	r2, r3, #1
 1679 001c D1B2     		uxtb	r1, r2
 1680 001e 144A     		ldr	r2, .L89
 1681 0020 1170     		strb	r1, [r2]
 1682 0022 1946     		mov	r1, r3
 1683 0024 134A     		ldr	r2, .L89+4
 1684 0026 FB79     		ldrb	r3, [r7, #7]
 1685 0028 5354     		strb	r3, [r2, r1]
 902:main.c        **** 		if (rx == ';')				// command string terminator
 1686              		.loc 1 902 0
 1687 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1688 002c 3B2B     		cmp	r3, #59
 1689 002e 03D1     		bne	.L86
 903:main.c        **** 		{
 904:main.c        **** 			//ProcessComRx();
 905:main.c        **** 			ComRxPtr = 0;
 1690              		.loc 1 905 0
 1691 0030 0F4B     		ldr	r3, .L89
 1692 0032 0022     		movs	r2, #0
 1693 0034 1A70     		strb	r2, [r3]
 906:main.c        ****         }
 907:main.c        ****         else if (rx == '\n' && (ComRxCmd[0] == '$') && (ComRxCmd[1] == '*'))
 908:main.c        ****         {
 909:main.c        **** 			FactorySetup();
 910:main.c        **** 			ComRxPtr = 0;
 911:main.c        ****         }
 912:main.c        **** 		else
 913:main.c        **** 			ComRxPtr &= sizeof(ComRxCmd) - 1;
 914:main.c        **** 	}
 915:main.c        **** }
 1694              		.loc 1 915 0
 1695 0036 17E0     		b	.L88
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 47


 1696              	.L86:
 907:main.c        ****         {
 1697              		.loc 1 907 0
 1698 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1699 003a 0A2B     		cmp	r3, #10
 1700 003c 0DD1     		bne	.L87
 907:main.c        ****         {
 1701              		.loc 1 907 0 is_stmt 0 discriminator 1
 1702 003e 0D4B     		ldr	r3, .L89+4
 1703 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1704 0042 242B     		cmp	r3, #36
 1705 0044 09D1     		bne	.L87
 907:main.c        ****         {
 1706              		.loc 1 907 0 discriminator 2
 1707 0046 0B4B     		ldr	r3, .L89+4
 1708 0048 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1709 004a 2A2B     		cmp	r3, #42
 1710 004c 05D1     		bne	.L87
 909:main.c        **** 			ComRxPtr = 0;
 1711              		.loc 1 909 0 is_stmt 1
 1712 004e FFF7FEFF 		bl	FactorySetup
 910:main.c        ****         }
 1713              		.loc 1 910 0
 1714 0052 074B     		ldr	r3, .L89
 1715 0054 0022     		movs	r2, #0
 1716 0056 1A70     		strb	r2, [r3]
 1717              		.loc 1 915 0
 1718 0058 06E0     		b	.L88
 1719              	.L87:
 913:main.c        **** 	}
 1720              		.loc 1 913 0
 1721 005a 054B     		ldr	r3, .L89
 1722 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1723 005e 03F01F03 		and	r3, r3, #31
 1724 0062 DAB2     		uxtb	r2, r3
 1725 0064 024B     		ldr	r3, .L89
 1726 0066 1A70     		strb	r2, [r3]
 1727              	.L88:
 1728              		.loc 1 915 0
 1729 0068 00BF     		nop
 1730 006a 0837     		adds	r7, r7, #8
 1731              		.cfi_def_cfa_offset 8
 1732 006c BD46     		mov	sp, r7
 1733              		.cfi_def_cfa_register 13
 1734              		@ sp needed
 1735 006e 80BD     		pop	{r7, pc}
 1736              	.L90:
 1737              		.align	2
 1738              	.L89:
 1739 0070 00000000 		.word	ComRxPtr
 1740 0074 00000000 		.word	ComRxCmd
 1741              		.cfi_endproc
 1742              	.LFE78:
 1743              		.size	ReadUSB, .-ReadUSB
 1744              		.section	.rodata
 1745              		.align	2
 1746              	.LC4:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 48


 1747 006c 44656275 		.ascii	"Debug Mode\000"
 1747      67204D6F 
 1747      646500
 1748              		.section	.text.FactorySetup,"ax",%progbits
 1749              		.align	2
 1750              		.global	FactorySetup
 1751              		.thumb
 1752              		.thumb_func
 1753              		.type	FactorySetup, %function
 1754              	FactorySetup:
 1755              	.LFB79:
 916:main.c        **** 
 917:main.c        **** //
 918:main.c        **** //	Factory setup commands
 919:main.c        **** //
 920:main.c        **** void FactorySetup (void)
 921:main.c        **** {
 1756              		.loc 1 921 0
 1757              		.cfi_startproc
 1758              		@ args = 0, pretend = 0, frame = 8
 1759              		@ frame_needed = 1, uses_anonymous_args = 0
 1760 0000 80B5     		push	{r7, lr}
 1761              		.cfi_def_cfa_offset 8
 1762              		.cfi_offset 7, -8
 1763              		.cfi_offset 14, -4
 1764 0002 82B0     		sub	sp, sp, #8
 1765              		.cfi_def_cfa_offset 16
 1766 0004 00AF     		add	r7, sp, #0
 1767              		.cfi_def_cfa_register 7
 922:main.c        **** 	uint8 sendUsb = FALSE;
 1768              		.loc 1 922 0
 1769 0006 0023     		movs	r3, #0
 1770 0008 FB71     		strb	r3, [r7, #7]
 923:main.c        ****     uint8 i;
 924:main.c        **** 	
 925:main.c        **** 	switch (ComRxCmd [2])
 1771              		.loc 1 925 0
 1772 000a 124B     		ldr	r3, .L99
 1773 000c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1774 000e 642B     		cmp	r3, #100
 1775 0010 03D0     		beq	.L93
 1776 0012 662B     		cmp	r3, #102
 1777 0014 09D0     		beq	.L94
 1778 0016 3F2B     		cmp	r3, #63
 926:main.c        **** 	{
 927:main.c        **** 		//case 'b':						// bootloader mode
 928:main.c        **** 		//	CyBtldr_Load();				// enter USB boot loader mode
 929:main.c        **** 		//	break;
 930:main.c        **** 			
 931:main.c        **** 		case 'd':						// debug mode
 932:main.c        **** 			memcpy (UsbTxBuffer, "Debug Mode", 10);
 933:main.c        **** 			sendUsb = 10;
 934:main.c        **** 			break;
 935:main.c        **** 			
 936:main.c        **** 		case 'f':						// store frequency offset in eeprom
 937:main.c        **** 			CySetTemp ();				// acquire die temperature before writing eeprom
 938:main.c        **** //			break;
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 49


 939:main.c        **** 
 940:main.c        **** 		case '?':						// status command, reply with eeprom data
 941:main.c        ****             // PSoC3 => PSoC5LP
 942:main.c        **** 			//memcpy (UsbTxBuffer, SERIAL_NUM, 8);		// serial number
 943:main.c        **** 			break;
 1779              		.loc 1 943 0
 1780 0018 09E0     		b	.L97
 1781              	.L93:
 932:main.c        **** 			sendUsb = 10;
 1782              		.loc 1 932 0
 1783 001a 0A22     		movs	r2, #10
 1784 001c 0E49     		ldr	r1, .L99+4
 1785 001e 0F48     		ldr	r0, .L99+8
 1786 0020 FFF7FEFF 		bl	memcpy
 933:main.c        **** 			break;
 1787              		.loc 1 933 0
 1788 0024 0A23     		movs	r3, #10
 1789 0026 FB71     		strb	r3, [r7, #7]
 934:main.c        **** 			
 1790              		.loc 1 934 0
 1791 0028 02E0     		b	.L92
 1792              	.L94:
 937:main.c        **** //			break;
 1793              		.loc 1 937 0
 1794 002a FFF7FEFF 		bl	CySetTemp
 1795              	.L97:
 1796              		.loc 1 943 0
 1797 002e 00BF     		nop
 1798              	.L92:
 944:main.c        **** 	}
 945:main.c        **** 
 946:main.c        **** 	if (sendUsb)
 1799              		.loc 1 946 0
 1800 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1801 0032 002B     		cmp	r3, #0
 1802 0034 09D0     		beq	.L98
 947:main.c        **** 	{
 948:main.c        ****         UsbTxBuffer [sendUsb] = '\0';   // 2017.11.4(koseki)
 1803              		.loc 1 948 0
 1804 0036 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1805 0038 084A     		ldr	r2, .L99+8
 1806 003a 0021     		movs	r1, #0
 1807 003c D154     		strb	r1, [r2, r3]
 949:main.c        ****         putstr((char*)UsbTxBuffer);
 1808              		.loc 1 949 0
 1809 003e 0748     		ldr	r0, .L99+8
 1810 0040 FFF7FEFF 		bl	putstr
 950:main.c        ****         putch('\n');
 1811              		.loc 1 950 0
 1812 0044 0A20     		movs	r0, #10
 1813 0046 FFF7FEFF 		bl	putch
 1814              	.L98:
 951:main.c        **** 	}
 952:main.c        **** }
 1815              		.loc 1 952 0
 1816 004a 00BF     		nop
 1817 004c 0837     		adds	r7, r7, #8
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 50


 1818              		.cfi_def_cfa_offset 8
 1819 004e BD46     		mov	sp, r7
 1820              		.cfi_def_cfa_register 13
 1821              		@ sp needed
 1822 0050 80BD     		pop	{r7, pc}
 1823              	.L100:
 1824 0052 00BF     		.align	2
 1825              	.L99:
 1826 0054 00000000 		.word	ComRxCmd
 1827 0058 6C000000 		.word	.LC4
 1828 005c 00000000 		.word	UsbTxBuffer
 1829              		.cfi_endproc
 1830              	.LFE79:
 1831              		.size	FactorySetup, .-FactorySetup
 1832              		.text
 1833              	.Letext0:
 1834              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1835              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 1836              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1837              		.file 5 ".\\FreeRTOS/portmacro.h"
 1838              		.file 6 ".\\FreeRTOS/task.h"
 1839              		.file 7 ".\\FreeRTOS/queue.h"
 1840              		.file 8 "Generated_Source\\PSoC5/core_cm3.h"
 1841              		.section	.debug_info,"",%progbits
 1842              	.Ldebug_info0:
 1843 0000 0A080000 		.4byte	0x80a
 1844 0004 0400     		.2byte	0x4
 1845 0006 00000000 		.4byte	.Ldebug_abbrev0
 1846 000a 04       		.byte	0x4
 1847 000b 01       		.uleb128 0x1
 1848 000c 98000000 		.4byte	.LASF109
 1849 0010 0C       		.byte	0xc
 1850 0011 7A040000 		.4byte	.LASF110
 1851 0015 EA020000 		.4byte	.LASF111
 1852 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1853 001d 00000000 		.4byte	0
 1854 0021 00000000 		.4byte	.Ldebug_line0
 1855 0025 02       		.uleb128 0x2
 1856 0026 01       		.byte	0x1
 1857 0027 06       		.byte	0x6
 1858 0028 54030000 		.4byte	.LASF0
 1859 002c 03       		.uleb128 0x3
 1860 002d 54020000 		.4byte	.LASF4
 1861 0031 02       		.byte	0x2
 1862 0032 1D       		.byte	0x1d
 1863 0033 37000000 		.4byte	0x37
 1864 0037 02       		.uleb128 0x2
 1865 0038 01       		.byte	0x1
 1866 0039 08       		.byte	0x8
 1867 003a C5020000 		.4byte	.LASF1
 1868 003e 02       		.uleb128 0x2
 1869 003f 02       		.byte	0x2
 1870 0040 05       		.byte	0x5
 1871 0041 54000000 		.4byte	.LASF2
 1872 0045 02       		.uleb128 0x2
 1873 0046 02       		.byte	0x2
 1874 0047 07       		.byte	0x7
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 51


 1875 0048 CB030000 		.4byte	.LASF3
 1876 004c 03       		.uleb128 0x3
 1877 004d 18000000 		.4byte	.LASF5
 1878 0051 02       		.byte	0x2
 1879 0052 3F       		.byte	0x3f
 1880 0053 57000000 		.4byte	0x57
 1881 0057 02       		.uleb128 0x2
 1882 0058 04       		.byte	0x4
 1883 0059 05       		.byte	0x5
 1884 005a F4030000 		.4byte	.LASF6
 1885 005e 03       		.uleb128 0x3
 1886 005f B2040000 		.4byte	.LASF7
 1887 0063 02       		.byte	0x2
 1888 0064 41       		.byte	0x41
 1889 0065 69000000 		.4byte	0x69
 1890 0069 02       		.uleb128 0x2
 1891 006a 04       		.byte	0x4
 1892 006b 07       		.byte	0x7
 1893 006c 86040000 		.4byte	.LASF8
 1894 0070 02       		.uleb128 0x2
 1895 0071 08       		.byte	0x8
 1896 0072 05       		.byte	0x5
 1897 0073 FE010000 		.4byte	.LASF9
 1898 0077 02       		.uleb128 0x2
 1899 0078 08       		.byte	0x8
 1900 0079 07       		.byte	0x7
 1901 007a 60030000 		.4byte	.LASF10
 1902 007e 04       		.uleb128 0x4
 1903 007f 04       		.byte	0x4
 1904 0080 05       		.byte	0x5
 1905 0081 696E7400 		.ascii	"int\000"
 1906 0085 02       		.uleb128 0x2
 1907 0086 04       		.byte	0x4
 1908 0087 07       		.byte	0x7
 1909 0088 8D030000 		.4byte	.LASF11
 1910 008c 03       		.uleb128 0x3
 1911 008d 8C010000 		.4byte	.LASF12
 1912 0091 03       		.byte	0x3
 1913 0092 18       		.byte	0x18
 1914 0093 2C000000 		.4byte	0x2c
 1915 0097 03       		.uleb128 0x3
 1916 0098 FD030000 		.4byte	.LASF13
 1917 009c 03       		.byte	0x3
 1918 009d 2C       		.byte	0x2c
 1919 009e 4C000000 		.4byte	0x4c
 1920 00a2 03       		.uleb128 0x3
 1921 00a3 77030000 		.4byte	.LASF14
 1922 00a7 03       		.byte	0x3
 1923 00a8 30       		.byte	0x30
 1924 00a9 5E000000 		.4byte	0x5e
 1925 00ad 05       		.uleb128 0x5
 1926 00ae 94010000 		.4byte	.LASF15
 1927 00b2 04       		.byte	0x4
 1928 00b3 9201     		.2byte	0x192
 1929 00b5 37000000 		.4byte	0x37
 1930 00b9 05       		.uleb128 0x5
 1931 00ba 55040000 		.4byte	.LASF16
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 52


 1932 00be 04       		.byte	0x4
 1933 00bf 9301     		.2byte	0x193
 1934 00c1 45000000 		.4byte	0x45
 1935 00c5 05       		.uleb128 0x5
 1936 00c6 73040000 		.4byte	.LASF17
 1937 00ca 04       		.byte	0x4
 1938 00cb 9401     		.2byte	0x194
 1939 00cd 69000000 		.4byte	0x69
 1940 00d1 05       		.uleb128 0x5
 1941 00d2 19020000 		.4byte	.LASF18
 1942 00d6 04       		.byte	0x4
 1943 00d7 9501     		.2byte	0x195
 1944 00d9 25000000 		.4byte	0x25
 1945 00dd 05       		.uleb128 0x5
 1946 00de 98040000 		.4byte	.LASF19
 1947 00e2 04       		.byte	0x4
 1948 00e3 9701     		.2byte	0x197
 1949 00e5 57000000 		.4byte	0x57
 1950 00e9 02       		.uleb128 0x2
 1951 00ea 04       		.byte	0x4
 1952 00eb 04       		.byte	0x4
 1953 00ec F0010000 		.4byte	.LASF20
 1954 00f0 02       		.uleb128 0x2
 1955 00f1 08       		.byte	0x8
 1956 00f2 04       		.byte	0x4
 1957 00f3 9E040000 		.4byte	.LASF21
 1958 00f7 02       		.uleb128 0x2
 1959 00f8 01       		.byte	0x1
 1960 00f9 08       		.byte	0x8
 1961 00fa EF030000 		.4byte	.LASF22
 1962 00fe 05       		.uleb128 0x5
 1963 00ff 81040000 		.4byte	.LASF23
 1964 0103 04       		.byte	0x4
 1965 0104 3C02     		.2byte	0x23c
 1966 0106 0A010000 		.4byte	0x10a
 1967 010a 06       		.uleb128 0x6
 1968 010b AD000000 		.4byte	0xad
 1969 010f 05       		.uleb128 0x5
 1970 0110 0C020000 		.4byte	.LASF24
 1971 0114 04       		.byte	0x4
 1972 0115 4E02     		.2byte	0x24e
 1973 0117 1B010000 		.4byte	0x11b
 1974 011b 07       		.uleb128 0x7
 1975 011c 04       		.byte	0x4
 1976 011d 21010000 		.4byte	0x121
 1977 0121 08       		.uleb128 0x8
 1978 0122 02       		.uleb128 0x2
 1979 0123 08       		.byte	0x8
 1980 0124 04       		.byte	0x4
 1981 0125 A6020000 		.4byte	.LASF25
 1982 0129 02       		.uleb128 0x2
 1983 012a 04       		.byte	0x4
 1984 012b 07       		.byte	0x7
 1985 012c 66000000 		.4byte	.LASF26
 1986 0130 09       		.uleb128 0x9
 1987 0131 04       		.byte	0x4
 1988 0132 07       		.uleb128 0x7
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 53


 1989 0133 04       		.byte	0x4
 1990 0134 F7000000 		.4byte	0xf7
 1991 0138 03       		.uleb128 0x3
 1992 0139 A1030000 		.4byte	.LASF27
 1993 013d 05       		.byte	0x5
 1994 013e 62       		.byte	0x62
 1995 013f 57000000 		.4byte	0x57
 1996 0143 03       		.uleb128 0x3
 1997 0144 B9030000 		.4byte	.LASF28
 1998 0148 05       		.byte	0x5
 1999 0149 63       		.byte	0x63
 2000 014a 69000000 		.4byte	0x69
 2001 014e 03       		.uleb128 0x3
 2002 014f 9B020000 		.4byte	.LASF29
 2003 0153 05       		.byte	0x5
 2004 0154 69       		.byte	0x69
 2005 0155 A2000000 		.4byte	0xa2
 2006 0159 03       		.uleb128 0x3
 2007 015a 80030000 		.4byte	.LASF30
 2008 015e 06       		.byte	0x6
 2009 015f 67       		.byte	0x67
 2010 0160 30010000 		.4byte	0x130
 2011 0164 03       		.uleb128 0x3
 2012 0165 5E020000 		.4byte	.LASF31
 2013 0169 07       		.byte	0x7
 2014 016a 58       		.byte	0x58
 2015 016b 30010000 		.4byte	0x130
 2016 016f 0A       		.uleb128 0xa
 2017 0170 26010000 		.4byte	.LASF40
 2018 0174 01       		.byte	0x1
 2019 0175 6C       		.byte	0x6c
 2020 0176 7E000000 		.4byte	0x7e
 2021 017a 00000000 		.4byte	.LFB65
 2022 017e 0C010000 		.4byte	.LFE65-.LFB65
 2023 0182 01       		.uleb128 0x1
 2024 0183 9C       		.byte	0x9c
 2025 0184 0B       		.uleb128 0xb
 2026 0185 8D000000 		.4byte	.LASF32
 2027 0189 01       		.byte	0x1
 2028 018a 8F       		.byte	0x8f
 2029 018b 00000000 		.4byte	.LFB66
 2030 018f 9C000000 		.4byte	.LFE66-.LFB66
 2031 0193 01       		.uleb128 0x1
 2032 0194 9C       		.byte	0x9c
 2033 0195 B0010000 		.4byte	0x1b0
 2034 0199 0C       		.uleb128 0xc
 2035 019a 46000000 		.4byte	.LBB2
 2036 019e 1C000000 		.4byte	.LBE2-.LBB2
 2037 01a2 0D       		.uleb128 0xd
 2038 01a3 6900     		.ascii	"i\000"
 2039 01a5 01       		.byte	0x1
 2040 01a6 AA       		.byte	0xaa
 2041 01a7 AD000000 		.4byte	0xad
 2042 01ab 02       		.uleb128 0x2
 2043 01ac 91       		.byte	0x91
 2044 01ad 77       		.sleb128 -9
 2045 01ae 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 54


 2046 01af 00       		.byte	0
 2047 01b0 0E       		.uleb128 0xe
 2048 01b1 43000000 		.4byte	.LASF33
 2049 01b5 01       		.byte	0x1
 2050 01b6 C0       		.byte	0xc0
 2051 01b7 00000000 		.4byte	.LFB67
 2052 01bb 30000000 		.4byte	.LFE67-.LFB67
 2053 01bf 01       		.uleb128 0x1
 2054 01c0 9C       		.byte	0x9c
 2055 01c1 E6010000 		.4byte	0x1e6
 2056 01c5 0F       		.uleb128 0xf
 2057 01c6 10040000 		.4byte	.LASF34
 2058 01ca 01       		.byte	0x1
 2059 01cb C3       		.byte	0xc3
 2060 01cc 0F       		.uleb128 0xf
 2061 01cd 6F000000 		.4byte	.LASF35
 2062 01d1 01       		.byte	0x1
 2063 01d2 C4       		.byte	0xc4
 2064 01d3 0F       		.uleb128 0xf
 2065 01d4 B0010000 		.4byte	.LASF36
 2066 01d8 01       		.byte	0x1
 2067 01d9 C5       		.byte	0xc5
 2068 01da 10       		.uleb128 0x10
 2069 01db 40020000 		.4byte	.LASF86
 2070 01df 01       		.byte	0x1
 2071 01e0 C6       		.byte	0xc6
 2072 01e1 E6010000 		.4byte	0x1e6
 2073 01e5 00       		.byte	0
 2074 01e6 11       		.uleb128 0x11
 2075 01e7 0F010000 		.4byte	0x10f
 2076 01eb F1010000 		.4byte	0x1f1
 2077 01ef 12       		.uleb128 0x12
 2078 01f0 00       		.byte	0
 2079 01f1 0B       		.uleb128 0xb
 2080 01f2 C0010000 		.4byte	.LASF37
 2081 01f6 01       		.byte	0x1
 2082 01f7 D0       		.byte	0xd0
 2083 01f8 00000000 		.4byte	.LFB68
 2084 01fc 10000000 		.4byte	.LFE68-.LFB68
 2085 0200 01       		.uleb128 0x1
 2086 0201 9C       		.byte	0x9c
 2087 0202 23020000 		.4byte	0x223
 2088 0206 13       		.uleb128 0x13
 2089 0207 DE010000 		.4byte	.LASF38
 2090 020b 01       		.byte	0x1
 2091 020c D0       		.byte	0xd0
 2092 020d 59010000 		.4byte	0x159
 2093 0211 02       		.uleb128 0x2
 2094 0212 91       		.byte	0x91
 2095 0213 74       		.sleb128 -12
 2096 0214 13       		.uleb128 0x13
 2097 0215 73050000 		.4byte	.LASF39
 2098 0219 01       		.byte	0x1
 2099 021a D0       		.byte	0xd0
 2100 021b 32010000 		.4byte	0x132
 2101 021f 02       		.uleb128 0x2
 2102 0220 91       		.byte	0x91
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 55


 2103 0221 70       		.sleb128 -16
 2104 0222 00       		.byte	0
 2105 0223 14       		.uleb128 0x14
 2106 0224 6C020000 		.4byte	.LASF41
 2107 0228 01       		.byte	0x1
 2108 0229 D8       		.byte	0xd8
 2109 022a 00000000 		.4byte	.LFB69
 2110 022e 0A000000 		.4byte	.LFE69-.LFB69
 2111 0232 01       		.uleb128 0x1
 2112 0233 9C       		.byte	0x9c
 2113 0234 14       		.uleb128 0x14
 2114 0235 5B050000 		.4byte	.LASF42
 2115 0239 01       		.byte	0x1
 2116 023a E5       		.byte	0xe5
 2117 023b 00000000 		.4byte	.LFB70
 2118 023f 1C000000 		.4byte	.LFE70-.LFB70
 2119 0243 01       		.uleb128 0x1
 2120 0244 9C       		.byte	0x9c
 2121 0245 0B       		.uleb128 0xb
 2122 0246 19050000 		.4byte	.LASF43
 2123 024a 01       		.byte	0x1
 2124 024b F0       		.byte	0xf0
 2125 024c 00000000 		.4byte	.LFB71
 2126 0250 2E000000 		.4byte	.LFE71-.LFB71
 2127 0254 01       		.uleb128 0x1
 2128 0255 9C       		.byte	0x9c
 2129 0256 90020000 		.4byte	0x290
 2130 025a 13       		.uleb128 0x13
 2131 025b 63010000 		.4byte	.LASF44
 2132 025f 01       		.byte	0x1
 2133 0260 F0       		.byte	0xf0
 2134 0261 30010000 		.4byte	0x130
 2135 0265 02       		.uleb128 0x2
 2136 0266 91       		.byte	0x91
 2137 0267 6C       		.sleb128 -20
 2138 0268 15       		.uleb128 0x15
 2139 0269 E7030000 		.4byte	.LASF45
 2140 026d 01       		.byte	0x1
 2141 026e F3       		.byte	0xf3
 2142 026f 90020000 		.4byte	0x290
 2143 0273 02       		.uleb128 0x2
 2144 0274 91       		.byte	0x91
 2145 0275 74       		.sleb128 -12
 2146 0276 15       		.uleb128 0x15
 2147 0277 FA040000 		.4byte	.LASF46
 2148 027b 01       		.byte	0x1
 2149 027c F4       		.byte	0xf4
 2150 027d 90020000 		.4byte	0x290
 2151 0281 02       		.uleb128 0x2
 2152 0282 91       		.byte	0x91
 2153 0283 70       		.sleb128 -16
 2154 0284 16       		.uleb128 0x16
 2155 0285 89020000 		.4byte	.LASF53
 2156 0289 01       		.byte	0x1
 2157 028a F7       		.byte	0xf7
 2158 028b F7000000 		.4byte	0xf7
 2159 028f 00       		.byte	0
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 56


 2160 0290 17       		.uleb128 0x17
 2161 0291 4E010000 		.4byte	0x14e
 2162 0295 18       		.uleb128 0x18
 2163 0296 70010000 		.4byte	.LASF47
 2164 029a 01       		.byte	0x1
 2165 029b 1F01     		.2byte	0x11f
 2166 029d 00000000 		.4byte	.LFB72
 2167 02a1 5C000000 		.4byte	.LFE72-.LFB72
 2168 02a5 01       		.uleb128 0x1
 2169 02a6 9C       		.byte	0x9c
 2170 02a7 CA020000 		.4byte	0x2ca
 2171 02ab 19       		.uleb128 0x19
 2172 02ac 32020000 		.4byte	.LASF48
 2173 02b0 01       		.byte	0x1
 2174 02b1 2201     		.2byte	0x122
 2175 02b3 AD000000 		.4byte	0xad
 2176 02b7 02       		.uleb128 0x2
 2177 02b8 91       		.byte	0x91
 2178 02b9 77       		.sleb128 -9
 2179 02ba 19       		.uleb128 0x19
 2180 02bb 5E000000 		.4byte	.LASF49
 2181 02bf 01       		.byte	0x1
 2182 02c0 2601     		.2byte	0x126
 2183 02c2 AD000000 		.4byte	0xad
 2184 02c6 02       		.uleb128 0x2
 2185 02c7 91       		.byte	0x91
 2186 02c8 76       		.sleb128 -10
 2187 02c9 00       		.byte	0
 2188 02ca 18       		.uleb128 0x18
 2189 02cb 09000000 		.4byte	.LASF50
 2190 02cf 01       		.byte	0x1
 2191 02d0 5B01     		.2byte	0x15b
 2192 02d2 00000000 		.4byte	.LFB73
 2193 02d6 98010000 		.4byte	.LFE73-.LFB73
 2194 02da 01       		.uleb128 0x1
 2195 02db 9C       		.byte	0x9c
 2196 02dc 09030000 		.4byte	0x309
 2197 02e0 19       		.uleb128 0x19
 2198 02e1 22050000 		.4byte	.LASF51
 2199 02e5 01       		.byte	0x1
 2200 02e6 5D01     		.2byte	0x15d
 2201 02e8 D1000000 		.4byte	0xd1
 2202 02ec 02       		.uleb128 0x2
 2203 02ed 91       		.byte	0x91
 2204 02ee 6F       		.sleb128 -17
 2205 02ef 19       		.uleb128 0x19
 2206 02f0 2B010000 		.4byte	.LASF52
 2207 02f4 01       		.byte	0x1
 2208 02f5 5E01     		.2byte	0x15e
 2209 02f7 AD000000 		.4byte	0xad
 2210 02fb 02       		.uleb128 0x2
 2211 02fc 91       		.byte	0x91
 2212 02fd 6E       		.sleb128 -18
 2213 02fe 1A       		.uleb128 0x1a
 2214 02ff 6900     		.ascii	"i\000"
 2215 0301 01       		.byte	0x1
 2216 0302 5F01     		.2byte	0x15f
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 57


 2217 0304 AD000000 		.4byte	0xad
 2218 0308 00       		.byte	0
 2219 0309 18       		.uleb128 0x18
 2220 030a 30010000 		.4byte	.LASF54
 2221 030e 01       		.byte	0x1
 2222 030f 0602     		.2byte	0x206
 2223 0311 00000000 		.4byte	.LFB74
 2224 0315 68030000 		.4byte	.LFE74-.LFB74
 2225 0319 01       		.uleb128 0x1
 2226 031a 9C       		.byte	0x9c
 2227 031b 87040000 		.4byte	0x487
 2228 031f 1B       		.uleb128 0x1b
 2229 0320 63010000 		.4byte	.LASF44
 2230 0324 01       		.byte	0x1
 2231 0325 0602     		.2byte	0x206
 2232 0327 30010000 		.4byte	0x130
 2233 032b 03       		.uleb128 0x3
 2234 032c 91       		.byte	0x91
 2235 032d BC7F     		.sleb128 -68
 2236 032f 19       		.uleb128 0x19
 2237 0330 2B010000 		.4byte	.LASF52
 2238 0334 01       		.byte	0x1
 2239 0335 0802     		.2byte	0x208
 2240 0337 AD000000 		.4byte	0xad
 2241 033b 02       		.uleb128 0x2
 2242 033c 91       		.byte	0x91
 2243 033d 59       		.sleb128 -39
 2244 033e 19       		.uleb128 0x19
 2245 033f 82010000 		.4byte	.LASF55
 2246 0343 01       		.byte	0x1
 2247 0344 0902     		.2byte	0x209
 2248 0346 AD000000 		.4byte	0xad
 2249 034a 02       		.uleb128 0x2
 2250 034b 91       		.byte	0x91
 2251 034c 77       		.sleb128 -9
 2252 034d 19       		.uleb128 0x19
 2253 034e B2020000 		.4byte	.LASF56
 2254 0352 01       		.byte	0x1
 2255 0353 0A02     		.2byte	0x20a
 2256 0355 AD000000 		.4byte	0xad
 2257 0359 02       		.uleb128 0x2
 2258 035a 91       		.byte	0x91
 2259 035b 76       		.sleb128 -10
 2260 035c 19       		.uleb128 0x19
 2261 035d 05040000 		.4byte	.LASF57
 2262 0361 01       		.byte	0x1
 2263 0362 0B02     		.2byte	0x20b
 2264 0364 AD000000 		.4byte	0xad
 2265 0368 02       		.uleb128 0x2
 2266 0369 91       		.byte	0x91
 2267 036a 75       		.sleb128 -11
 2268 036b 19       		.uleb128 0x19
 2269 036c 5C040000 		.4byte	.LASF58
 2270 0370 01       		.byte	0x1
 2271 0371 0C02     		.2byte	0x20c
 2272 0373 AD000000 		.4byte	0xad
 2273 0377 02       		.uleb128 0x2
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 58


 2274 0378 91       		.byte	0x91
 2275 0379 74       		.sleb128 -12
 2276 037a 1C       		.uleb128 0x1c
 2277 037b 6900     		.ascii	"i\000"
 2278 037d 01       		.byte	0x1
 2279 037e 0D02     		.2byte	0x20d
 2280 0380 AD000000 		.4byte	0xad
 2281 0384 02       		.uleb128 0x2
 2282 0385 91       		.byte	0x91
 2283 0386 73       		.sleb128 -13
 2284 0387 19       		.uleb128 0x19
 2285 0388 4D020000 		.4byte	.LASF59
 2286 038c 01       		.byte	0x1
 2287 038d 0E02     		.2byte	0x20e
 2288 038f 90020000 		.4byte	0x290
 2289 0393 02       		.uleb128 0x2
 2290 0394 91       		.byte	0x91
 2291 0395 5C       		.sleb128 -36
 2292 0396 19       		.uleb128 0x19
 2293 0397 EE040000 		.4byte	.LASF60
 2294 039b 01       		.byte	0x1
 2295 039c 1002     		.2byte	0x210
 2296 039e B9000000 		.4byte	0xb9
 2297 03a2 02       		.uleb128 0x2
 2298 03a3 91       		.byte	0x91
 2299 03a4 70       		.sleb128 -16
 2300 03a5 19       		.uleb128 0x19
 2301 03a6 54050000 		.4byte	.LASF61
 2302 03aa 01       		.byte	0x1
 2303 03ab 1202     		.2byte	0x212
 2304 03ad B9000000 		.4byte	0xb9
 2305 03b1 02       		.uleb128 0x2
 2306 03b2 91       		.byte	0x91
 2307 03b3 6E       		.sleb128 -18
 2308 03b4 19       		.uleb128 0x19
 2309 03b5 37040000 		.4byte	.LASF62
 2310 03b9 01       		.byte	0x1
 2311 03ba 1302     		.2byte	0x213
 2312 03bc 87040000 		.4byte	0x487
 2313 03c0 02       		.uleb128 0x2
 2314 03c1 91       		.byte	0x91
 2315 03c2 50       		.sleb128 -48
 2316 03c3 19       		.uleb128 0x19
 2317 03c4 52010000 		.4byte	.LASF63
 2318 03c8 01       		.byte	0x1
 2319 03c9 1402     		.2byte	0x214
 2320 03cb B9000000 		.4byte	0xb9
 2321 03cf 02       		.uleb128 0x2
 2322 03d0 91       		.byte	0x91
 2323 03d1 6C       		.sleb128 -20
 2324 03d2 19       		.uleb128 0x19
 2325 03d3 3C000000 		.4byte	.LASF64
 2326 03d7 01       		.byte	0x1
 2327 03d8 1502     		.2byte	0x215
 2328 03da B9000000 		.4byte	0xb9
 2329 03de 02       		.uleb128 0x2
 2330 03df 91       		.byte	0x91
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 59


 2331 03e0 6A       		.sleb128 -22
 2332 03e1 19       		.uleb128 0x19
 2333 03e2 4D040000 		.4byte	.LASF65
 2334 03e6 01       		.byte	0x1
 2335 03e7 1602     		.2byte	0x216
 2336 03e9 87040000 		.4byte	0x487
 2337 03ed 02       		.uleb128 0x2
 2338 03ee 91       		.byte	0x91
 2339 03ef 48       		.sleb128 -56
 2340 03f0 19       		.uleb128 0x19
 2341 03f1 A9010000 		.4byte	.LASF66
 2342 03f5 01       		.byte	0x1
 2343 03f6 1702     		.2byte	0x217
 2344 03f8 B9000000 		.4byte	0xb9
 2345 03fc 02       		.uleb128 0x2
 2346 03fd 91       		.byte	0x91
 2347 03fe 46       		.sleb128 -58
 2348 03ff 19       		.uleb128 0x19
 2349 0400 33050000 		.4byte	.LASF67
 2350 0404 01       		.byte	0x1
 2351 0405 1802     		.2byte	0x218
 2352 0407 B9000000 		.4byte	0xb9
 2353 040b 02       		.uleb128 0x2
 2354 040c 91       		.byte	0x91
 2355 040d 68       		.sleb128 -24
 2356 040e 19       		.uleb128 0x19
 2357 040f 28020000 		.4byte	.LASF68
 2358 0413 01       		.byte	0x1
 2359 0414 1A02     		.2byte	0x21a
 2360 0416 B9000000 		.4byte	0xb9
 2361 041a 02       		.uleb128 0x2
 2362 041b 91       		.byte	0x91
 2363 041c 44       		.sleb128 -60
 2364 041d 19       		.uleb128 0x19
 2365 041e 3F040000 		.4byte	.LASF69
 2366 0422 01       		.byte	0x1
 2367 0423 1B02     		.2byte	0x21b
 2368 0425 B9000000 		.4byte	0xb9
 2369 0429 02       		.uleb128 0x2
 2370 042a 91       		.byte	0x91
 2371 042b 5A       		.sleb128 -38
 2372 042c 19       		.uleb128 0x19
 2373 042d 9A030000 		.4byte	.LASF70
 2374 0431 01       		.byte	0x1
 2375 0432 1C02     		.2byte	0x21c
 2376 0434 B9000000 		.4byte	0xb9
 2377 0438 02       		.uleb128 0x2
 2378 0439 91       		.byte	0x91
 2379 043a 66       		.sleb128 -26
 2380 043b 19       		.uleb128 0x19
 2381 043c B4030000 		.4byte	.LASF71
 2382 0440 01       		.byte	0x1
 2383 0441 1D02     		.2byte	0x21d
 2384 0443 B9000000 		.4byte	0xb9
 2385 0447 02       		.uleb128 0x2
 2386 0448 91       		.byte	0x91
 2387 0449 42       		.sleb128 -62
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 60


 2388 044a 19       		.uleb128 0x19
 2389 044b 6E050000 		.4byte	.LASF72
 2390 044f 01       		.byte	0x1
 2391 0450 1E02     		.2byte	0x21e
 2392 0452 B9000000 		.4byte	0xb9
 2393 0456 02       		.uleb128 0x2
 2394 0457 91       		.byte	0x91
 2395 0458 64       		.sleb128 -28
 2396 0459 19       		.uleb128 0x19
 2397 045a 89020000 		.4byte	.LASF53
 2398 045e 01       		.byte	0x1
 2399 045f 1F02     		.2byte	0x21f
 2400 0461 B9000000 		.4byte	0xb9
 2401 0465 02       		.uleb128 0x2
 2402 0466 91       		.byte	0x91
 2403 0467 40       		.sleb128 -64
 2404 0468 19       		.uleb128 0x19
 2405 0469 03050000 		.4byte	.LASF73
 2406 046d 01       		.byte	0x1
 2407 046e 2102     		.2byte	0x221
 2408 0470 B9000000 		.4byte	0xb9
 2409 0474 02       		.uleb128 0x2
 2410 0475 91       		.byte	0x91
 2411 0476 62       		.sleb128 -30
 2412 0477 19       		.uleb128 0x19
 2413 0478 DE030000 		.4byte	.LASF74
 2414 047c 01       		.byte	0x1
 2415 047d 2202     		.2byte	0x222
 2416 047f B9000000 		.4byte	0xb9
 2417 0483 02       		.uleb128 0x2
 2418 0484 91       		.byte	0x91
 2419 0485 60       		.sleb128 -32
 2420 0486 00       		.byte	0
 2421 0487 11       		.uleb128 0x11
 2422 0488 B9000000 		.4byte	0xb9
 2423 048c 97040000 		.4byte	0x497
 2424 0490 1D       		.uleb128 0x1d
 2425 0491 29010000 		.4byte	0x129
 2426 0495 03       		.byte	0x3
 2427 0496 00       		.byte	0
 2428 0497 1E       		.uleb128 0x1e
 2429 0498 3A010000 		.4byte	.LASF75
 2430 049c 01       		.byte	0x1
 2431 049d E402     		.2byte	0x2e4
 2432 049f 00000000 		.4byte	.LFB75
 2433 04a3 10000000 		.4byte	.LFE75-.LFB75
 2434 04a7 01       		.uleb128 0x1
 2435 04a8 9C       		.byte	0x9c
 2436 04a9 18       		.uleb128 0x18
 2437 04aa 3E050000 		.4byte	.LASF76
 2438 04ae 01       		.byte	0x1
 2439 04af FC02     		.2byte	0x2fc
 2440 04b1 00000000 		.4byte	.LFB76
 2441 04b5 84000000 		.4byte	.LFE76-.LFB76
 2442 04b9 01       		.uleb128 0x1
 2443 04ba 9C       		.byte	0x9c
 2444 04bb 07050000 		.4byte	0x507
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 61


 2445 04bf 1F       		.uleb128 0x1f
 2446 04c0 6E756D00 		.ascii	"num\000"
 2447 04c4 01       		.byte	0x1
 2448 04c5 FC02     		.2byte	0x2fc
 2449 04c7 C5000000 		.4byte	0xc5
 2450 04cb 02       		.uleb128 0x2
 2451 04cc 91       		.byte	0x91
 2452 04cd 6C       		.sleb128 -20
 2453 04ce 1B       		.uleb128 0x1b
 2454 04cf AC030000 		.4byte	.LASF77
 2455 04d3 01       		.byte	0x1
 2456 04d4 FC02     		.2byte	0x2fc
 2457 04d6 07050000 		.4byte	0x507
 2458 04da 02       		.uleb128 0x2
 2459 04db 91       		.byte	0x91
 2460 04dc 6B       		.sleb128 -21
 2461 04dd 1C       		.uleb128 0x1c
 2462 04de 6900     		.ascii	"i\000"
 2463 04e0 01       		.byte	0x1
 2464 04e1 FE02     		.2byte	0x2fe
 2465 04e3 AD000000 		.4byte	0xad
 2466 04e7 02       		.uleb128 0x2
 2467 04e8 91       		.byte	0x91
 2468 04e9 77       		.sleb128 -9
 2469 04ea 1C       		.uleb128 0x1c
 2470 04eb 6B00     		.ascii	"k\000"
 2471 04ed 01       		.byte	0x1
 2472 04ee FF02     		.2byte	0x2ff
 2473 04f0 AD000000 		.4byte	0xad
 2474 04f4 02       		.uleb128 0x2
 2475 04f5 91       		.byte	0x91
 2476 04f6 76       		.sleb128 -10
 2477 04f7 19       		.uleb128 0x19
 2478 04f8 2B000000 		.4byte	.LASF78
 2479 04fc 01       		.byte	0x1
 2480 04fd 0003     		.2byte	0x300
 2481 04ff AD000000 		.4byte	0xad
 2482 0503 02       		.uleb128 0x2
 2483 0504 91       		.byte	0x91
 2484 0505 75       		.sleb128 -11
 2485 0506 00       		.byte	0
 2486 0507 17       		.uleb128 0x17
 2487 0508 AD000000 		.4byte	0xad
 2488 050c 18       		.uleb128 0x18
 2489 050d 0C050000 		.4byte	.LASF79
 2490 0511 01       		.byte	0x1
 2491 0512 1203     		.2byte	0x312
 2492 0514 00000000 		.4byte	.LFB77
 2493 0518 8C000000 		.4byte	.LFE77-.LFB77
 2494 051c 01       		.uleb128 0x1
 2495 051d 9C       		.byte	0x9c
 2496 051e 87050000 		.4byte	0x587
 2497 0522 1B       		.uleb128 0x1b
 2498 0523 63010000 		.4byte	.LASF44
 2499 0527 01       		.byte	0x1
 2500 0528 1203     		.2byte	0x312
 2501 052a 30010000 		.4byte	0x130
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 62


 2502 052e 02       		.uleb128 0x2
 2503 052f 91       		.byte	0x91
 2504 0530 44       		.sleb128 -60
 2505 0531 19       		.uleb128 0x19
 2506 0532 89020000 		.4byte	.LASF53
 2507 0536 01       		.byte	0x1
 2508 0537 1403     		.2byte	0x314
 2509 0539 F7000000 		.4byte	0xf7
 2510 053d 02       		.uleb128 0x2
 2511 053e 91       		.byte	0x91
 2512 053f 6F       		.sleb128 -17
 2513 0540 19       		.uleb128 0x19
 2514 0541 A3010000 		.4byte	.LASF80
 2515 0545 01       		.byte	0x1
 2516 0546 1503     		.2byte	0x315
 2517 0548 87050000 		.4byte	0x587
 2518 054c 02       		.uleb128 0x2
 2519 054d 91       		.byte	0x91
 2520 054e 5C       		.sleb128 -36
 2521 054f 19       		.uleb128 0x19
 2522 0550 C5030000 		.4byte	.LASF81
 2523 0554 01       		.byte	0x1
 2524 0555 1603     		.2byte	0x316
 2525 0557 AD000000 		.4byte	0xad
 2526 055b 02       		.uleb128 0x2
 2527 055c 91       		.byte	0x91
 2528 055d 77       		.sleb128 -9
 2529 055e 1C       		.uleb128 0x1c
 2530 055f 73747200 		.ascii	"str\000"
 2531 0563 01       		.byte	0x1
 2532 0564 1703     		.2byte	0x317
 2533 0566 97050000 		.4byte	0x597
 2534 056a 02       		.uleb128 0x2
 2535 056b 91       		.byte	0x91
 2536 056c 48       		.sleb128 -56
 2537 056d 1A       		.uleb128 0x1a
 2538 056e 6900     		.ascii	"i\000"
 2539 0570 01       		.byte	0x1
 2540 0571 1803     		.2byte	0x318
 2541 0573 AD000000 		.4byte	0xad
 2542 0577 19       		.uleb128 0x19
 2543 0578 4D020000 		.4byte	.LASF59
 2544 057c 01       		.byte	0x1
 2545 057d 1903     		.2byte	0x319
 2546 057f 90020000 		.4byte	0x290
 2547 0583 02       		.uleb128 0x2
 2548 0584 91       		.byte	0x91
 2549 0585 70       		.sleb128 -16
 2550 0586 00       		.byte	0
 2551 0587 11       		.uleb128 0x11
 2552 0588 F7000000 		.4byte	0xf7
 2553 058c 97050000 		.4byte	0x597
 2554 0590 1D       		.uleb128 0x1d
 2555 0591 29010000 		.4byte	0x129
 2556 0595 0F       		.byte	0xf
 2557 0596 00       		.byte	0
 2558 0597 11       		.uleb128 0x11
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 63


 2559 0598 F7000000 		.4byte	0xf7
 2560 059c A7050000 		.4byte	0x5a7
 2561 05a0 1D       		.uleb128 0x1d
 2562 05a1 29010000 		.4byte	0x129
 2563 05a5 13       		.byte	0x13
 2564 05a6 00       		.byte	0
 2565 05a7 18       		.uleb128 0x18
 2566 05a8 F6010000 		.4byte	.LASF82
 2567 05ac 01       		.byte	0x1
 2568 05ad 7D03     		.2byte	0x37d
 2569 05af 00000000 		.4byte	.LFB78
 2570 05b3 78000000 		.4byte	.LFE78-.LFB78
 2571 05b7 01       		.uleb128 0x1
 2572 05b8 9C       		.byte	0x9c
 2573 05b9 CC050000 		.4byte	0x5cc
 2574 05bd 1C       		.uleb128 0x1c
 2575 05be 727800   		.ascii	"rx\000"
 2576 05c1 01       		.byte	0x1
 2577 05c2 7F03     		.2byte	0x37f
 2578 05c4 AD000000 		.4byte	0xad
 2579 05c8 02       		.uleb128 0x2
 2580 05c9 91       		.byte	0x91
 2581 05ca 77       		.sleb128 -9
 2582 05cb 00       		.byte	0
 2583 05cc 18       		.uleb128 0x18
 2584 05cd 47050000 		.4byte	.LASF83
 2585 05d1 01       		.byte	0x1
 2586 05d2 9803     		.2byte	0x398
 2587 05d4 00000000 		.4byte	.LFB79
 2588 05d8 60000000 		.4byte	.LFE79-.LFB79
 2589 05dc 01       		.uleb128 0x1
 2590 05dd 9C       		.byte	0x9c
 2591 05de FC050000 		.4byte	0x5fc
 2592 05e2 19       		.uleb128 0x19
 2593 05e3 93020000 		.4byte	.LASF84
 2594 05e7 01       		.byte	0x1
 2595 05e8 9A03     		.2byte	0x39a
 2596 05ea AD000000 		.4byte	0xad
 2597 05ee 02       		.uleb128 0x2
 2598 05ef 91       		.byte	0x91
 2599 05f0 77       		.sleb128 -9
 2600 05f1 1A       		.uleb128 0x1a
 2601 05f2 6900     		.ascii	"i\000"
 2602 05f4 01       		.byte	0x1
 2603 05f5 9B03     		.2byte	0x39b
 2604 05f7 AD000000 		.4byte	0xad
 2605 05fb 00       		.byte	0
 2606 05fc 11       		.uleb128 0x11
 2607 05fd 0C060000 		.4byte	0x60c
 2608 0601 0C060000 		.4byte	0x60c
 2609 0605 1D       		.uleb128 0x1d
 2610 0606 29010000 		.4byte	0x129
 2611 060a 0A       		.byte	0xa
 2612 060b 00       		.byte	0
 2613 060c 17       		.uleb128 0x17
 2614 060d C5000000 		.4byte	0xc5
 2615 0611 19       		.uleb128 0x19
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 64


 2616 0612 22000000 		.4byte	.LASF85
 2617 0616 01       		.byte	0x1
 2618 0617 EC02     		.2byte	0x2ec
 2619 0619 23060000 		.4byte	0x623
 2620 061d 05       		.uleb128 0x5
 2621 061e 03       		.byte	0x3
 2622 061f 40000000 		.4byte	pow10_32
 2623 0623 17       		.uleb128 0x17
 2624 0624 FC050000 		.4byte	0x5fc
 2625 0628 20       		.uleb128 0x20
 2626 0629 A5040000 		.4byte	.LASF87
 2627 062d 08       		.byte	0x8
 2628 062e 1207     		.2byte	0x712
 2629 0630 34060000 		.4byte	0x634
 2630 0634 06       		.uleb128 0x6
 2631 0635 97000000 		.4byte	0x97
 2632 0639 21       		.uleb128 0x21
 2633 063a E5010000 		.4byte	.LASF88
 2634 063e 01       		.byte	0x1
 2635 063f 39       		.byte	0x39
 2636 0640 64010000 		.4byte	0x164
 2637 0644 05       		.uleb128 0x5
 2638 0645 03       		.byte	0x3
 2639 0646 00000000 		.4byte	xQueue_ROT
 2640 064a 21       		.uleb128 0x21
 2641 064b E2040000 		.4byte	.LASF89
 2642 064f 01       		.byte	0x1
 2643 0650 3A       		.byte	0x3a
 2644 0651 64010000 		.4byte	0x164
 2645 0655 05       		.uleb128 0x5
 2646 0656 03       		.byte	0x3
 2647 0657 00000000 		.4byte	xQueue_TONE
 2648 065b 21       		.uleb128 0x21
 2649 065c CC040000 		.4byte	.LASF90
 2650 0660 01       		.byte	0x1
 2651 0661 3B       		.byte	0x3b
 2652 0662 64010000 		.4byte	0x164
 2653 0666 05       		.uleb128 0x5
 2654 0667 03       		.byte	0x3
 2655 0668 00000000 		.4byte	xQueue_CHAR
 2656 066c 21       		.uleb128 0x21
 2657 066d 2C040000 		.4byte	.LASF91
 2658 0671 01       		.byte	0x1
 2659 0672 3C       		.byte	0x3c
 2660 0673 64010000 		.4byte	0x164
 2661 0677 05       		.uleb128 0x5
 2662 0678 03       		.byte	0x3
 2663 0679 00000000 		.4byte	xQueue_WPM
 2664 067d 21       		.uleb128 0x21
 2665 067e 29050000 		.4byte	.LASF92
 2666 0682 01       		.byte	0x1
 2667 0683 3D       		.byte	0x3d
 2668 0684 64010000 		.4byte	0x164
 2669 0688 05       		.uleb128 0x5
 2670 0689 03       		.byte	0x3
 2671 068a 00000000 		.4byte	xQueue_TH
 2672 068e 21       		.uleb128 0x21
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 65


 2673 068f 83000000 		.4byte	.LASF93
 2674 0693 01       		.byte	0x1
 2675 0694 45       		.byte	0x45
 2676 0695 AD000000 		.4byte	0xad
 2677 0699 05       		.uleb128 0x5
 2678 069a 03       		.byte	0x3
 2679 069b 00000000 		.4byte	sign_cntr
 2680 069f 11       		.uleb128 0x11
 2681 06a0 AF060000 		.4byte	0x6af
 2682 06a4 AF060000 		.4byte	0x6af
 2683 06a8 1D       		.uleb128 0x1d
 2684 06a9 29010000 		.4byte	0x129
 2685 06ad 13       		.byte	0x13
 2686 06ae 00       		.byte	0
 2687 06af 17       		.uleb128 0x17
 2688 06b0 D1000000 		.4byte	0xd1
 2689 06b4 21       		.uleb128 0x21
 2690 06b5 00000000 		.4byte	.LASF94
 2691 06b9 01       		.byte	0x1
 2692 06ba 46       		.byte	0x46
 2693 06bb C5060000 		.4byte	0x6c5
 2694 06bf 05       		.uleb128 0x5
 2695 06c0 03       		.byte	0x3
 2696 06c1 00000000 		.4byte	Sign_Sin
 2697 06c5 17       		.uleb128 0x17
 2698 06c6 9F060000 		.4byte	0x69f
 2699 06ca 21       		.uleb128 0x21
 2700 06cb BC020000 		.4byte	.LASF95
 2701 06cf 01       		.byte	0x1
 2702 06d0 47       		.byte	0x47
 2703 06d1 DB060000 		.4byte	0x6db
 2704 06d5 05       		.uleb128 0x5
 2705 06d6 03       		.byte	0x3
 2706 06d7 00000000 		.4byte	Sign_Cos
 2707 06db 17       		.uleb128 0x17
 2708 06dc 9F060000 		.4byte	0x69f
 2709 06e0 21       		.uleb128 0x21
 2710 06e1 1E020000 		.4byte	.LASF96
 2711 06e5 01       		.byte	0x1
 2712 06e6 48       		.byte	0x48
 2713 06e7 DD000000 		.4byte	0xdd
 2714 06eb 05       		.uleb128 0x5
 2715 06ec 03       		.byte	0x3
 2716 06ed 00000000 		.4byte	acc_v_sin
 2717 06f1 21       		.uleb128 0x21
 2718 06f2 D8040000 		.4byte	.LASF97
 2719 06f6 01       		.byte	0x1
 2720 06f7 49       		.byte	0x49
 2721 06f8 DD000000 		.4byte	0xdd
 2722 06fc 05       		.uleb128 0x5
 2723 06fd 03       		.byte	0x3
 2724 06fe 00000000 		.4byte	acc_v_cos
 2725 0702 11       		.uleb128 0x11
 2726 0703 DD000000 		.4byte	0xdd
 2727 0707 12070000 		.4byte	0x712
 2728 070b 1D       		.uleb128 0x1d
 2729 070c 29010000 		.4byte	0x129
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 66


 2730 0710 07       		.byte	0x7
 2731 0711 00       		.byte	0
 2732 0712 21       		.uleb128 0x21
 2733 0713 7B010000 		.4byte	.LASF98
 2734 0717 01       		.byte	0x1
 2735 0718 4B       		.byte	0x4b
 2736 0719 02070000 		.4byte	0x702
 2737 071d 05       		.uleb128 0x5
 2738 071e 03       		.byte	0x3
 2739 071f 00000000 		.4byte	IDelay
 2740 0723 21       		.uleb128 0x21
 2741 0724 59010000 		.4byte	.LASF99
 2742 0728 01       		.byte	0x1
 2743 0729 4C       		.byte	0x4c
 2744 072a AD000000 		.4byte	0xad
 2745 072e 05       		.uleb128 0x5
 2746 072f 03       		.byte	0x3
 2747 0730 00000000 		.4byte	IDelayPtr
 2748 0734 21       		.uleb128 0x21
 2749 0735 4B030000 		.4byte	.LASF100
 2750 0739 01       		.byte	0x1
 2751 073a 4D       		.byte	0x4d
 2752 073b C5000000 		.4byte	0xc5
 2753 073f 05       		.uleb128 0x5
 2754 0740 03       		.byte	0x3
 2755 0741 00000000 		.4byte	acc_Vrms
 2756 0745 21       		.uleb128 0x21
 2757 0746 42030000 		.4byte	.LASF101
 2758 074a 01       		.byte	0x1
 2759 074b 4E       		.byte	0x4e
 2760 074c AD000000 		.4byte	0xad
 2761 0750 05       		.uleb128 0x5
 2762 0751 03       		.byte	0x3
 2763 0752 00000000 		.4byte	int_cntr
 2764 0756 21       		.uleb128 0x21
 2765 0757 BD040000 		.4byte	.LASF102
 2766 075b 01       		.byte	0x1
 2767 075c 4F       		.byte	0x4f
 2768 075d AD000000 		.4byte	0xad
 2769 0761 05       		.uleb128 0x5
 2770 0762 03       		.byte	0x3
 2771 0763 00000000 		.4byte	debouunce_cntr
 2772 0767 11       		.uleb128 0x11
 2773 0768 AD000000 		.4byte	0xad
 2774 076c 77070000 		.4byte	0x777
 2775 0770 1D       		.uleb128 0x1d
 2776 0771 29010000 		.4byte	0x129
 2777 0775 1F       		.byte	0x1f
 2778 0776 00       		.byte	0
 2779 0777 21       		.uleb128 0x21
 2780 0778 9A010000 		.4byte	.LASF103
 2781 077c 01       		.byte	0x1
 2782 077d 52       		.byte	0x52
 2783 077e 67070000 		.4byte	0x767
 2784 0782 05       		.uleb128 0x5
 2785 0783 03       		.byte	0x3
 2786 0784 00000000 		.4byte	ComRxCmd
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 67


 2787 0788 21       		.uleb128 0x21
 2788 0789 23040000 		.4byte	.LASF104
 2789 078d 01       		.byte	0x1
 2790 078e 53       		.byte	0x53
 2791 078f AD000000 		.4byte	0xad
 2792 0793 05       		.uleb128 0x5
 2793 0794 03       		.byte	0x3
 2794 0795 00000000 		.4byte	ComRxPtr
 2795 0799 11       		.uleb128 0x11
 2796 079a AD000000 		.4byte	0xad
 2797 079e A9070000 		.4byte	0x7a9
 2798 07a2 1D       		.uleb128 0x1d
 2799 07a3 29010000 		.4byte	0x129
 2800 07a7 4F       		.byte	0x4f
 2801 07a8 00       		.byte	0
 2802 07a9 21       		.uleb128 0x21
 2803 07aa 67040000 		.4byte	.LASF105
 2804 07ae 01       		.byte	0x1
 2805 07af 54       		.byte	0x54
 2806 07b0 99070000 		.4byte	0x799
 2807 07b4 05       		.uleb128 0x5
 2808 07b5 03       		.byte	0x3
 2809 07b6 00000000 		.4byte	UsbTxBuffer
 2810 07ba 11       		.uleb128 0x11
 2811 07bb AD000000 		.4byte	0xad
 2812 07bf CA070000 		.4byte	0x7ca
 2813 07c3 1D       		.uleb128 0x1d
 2814 07c4 29010000 		.4byte	0x129
 2815 07c8 FF       		.byte	0xff
 2816 07c9 00       		.byte	0
 2817 07ca 21       		.uleb128 0x21
 2818 07cb 30000000 		.4byte	.LASF106
 2819 07cf 01       		.byte	0x1
 2820 07d0 55       		.byte	0x55
 2821 07d1 BA070000 		.4byte	0x7ba
 2822 07d5 05       		.uleb128 0x5
 2823 07d6 03       		.byte	0x3
 2824 07d7 00000000 		.4byte	UsbRxBuffer
 2825 07db 11       		.uleb128 0x11
 2826 07dc F7000000 		.4byte	0xf7
 2827 07e0 E6070000 		.4byte	0x7e6
 2828 07e4 12       		.uleb128 0x12
 2829 07e5 00       		.byte	0
 2830 07e6 10       		.uleb128 0x10
 2831 07e7 D3020000 		.4byte	.LASF107
 2832 07eb 01       		.byte	0x1
 2833 07ec 58       		.byte	0x58
 2834 07ed DB070000 		.4byte	0x7db
 2835 07f1 10       		.uleb128 0x10
 2836 07f2 40020000 		.4byte	.LASF86
 2837 07f6 01       		.byte	0x1
 2838 07f7 C6       		.byte	0xc6
 2839 07f8 E6010000 		.4byte	0x1e6
 2840 07fc 21       		.uleb128 0x21
 2841 07fd 4C010000 		.4byte	.LASF108
 2842 0801 01       		.byte	0x1
 2843 0802 E3       		.byte	0xe3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 68


 2844 0803 AD000000 		.4byte	0xad
 2845 0807 05       		.uleb128 0x5
 2846 0808 03       		.byte	0x3
 2847 0809 00000000 		.4byte	tFlag
 2848 080d 00       		.byte	0
 2849              		.section	.debug_abbrev,"",%progbits
 2850              	.Ldebug_abbrev0:
 2851 0000 01       		.uleb128 0x1
 2852 0001 11       		.uleb128 0x11
 2853 0002 01       		.byte	0x1
 2854 0003 25       		.uleb128 0x25
 2855 0004 0E       		.uleb128 0xe
 2856 0005 13       		.uleb128 0x13
 2857 0006 0B       		.uleb128 0xb
 2858 0007 03       		.uleb128 0x3
 2859 0008 0E       		.uleb128 0xe
 2860 0009 1B       		.uleb128 0x1b
 2861 000a 0E       		.uleb128 0xe
 2862 000b 55       		.uleb128 0x55
 2863 000c 17       		.uleb128 0x17
 2864 000d 11       		.uleb128 0x11
 2865 000e 01       		.uleb128 0x1
 2866 000f 10       		.uleb128 0x10
 2867 0010 17       		.uleb128 0x17
 2868 0011 00       		.byte	0
 2869 0012 00       		.byte	0
 2870 0013 02       		.uleb128 0x2
 2871 0014 24       		.uleb128 0x24
 2872 0015 00       		.byte	0
 2873 0016 0B       		.uleb128 0xb
 2874 0017 0B       		.uleb128 0xb
 2875 0018 3E       		.uleb128 0x3e
 2876 0019 0B       		.uleb128 0xb
 2877 001a 03       		.uleb128 0x3
 2878 001b 0E       		.uleb128 0xe
 2879 001c 00       		.byte	0
 2880 001d 00       		.byte	0
 2881 001e 03       		.uleb128 0x3
 2882 001f 16       		.uleb128 0x16
 2883 0020 00       		.byte	0
 2884 0021 03       		.uleb128 0x3
 2885 0022 0E       		.uleb128 0xe
 2886 0023 3A       		.uleb128 0x3a
 2887 0024 0B       		.uleb128 0xb
 2888 0025 3B       		.uleb128 0x3b
 2889 0026 0B       		.uleb128 0xb
 2890 0027 49       		.uleb128 0x49
 2891 0028 13       		.uleb128 0x13
 2892 0029 00       		.byte	0
 2893 002a 00       		.byte	0
 2894 002b 04       		.uleb128 0x4
 2895 002c 24       		.uleb128 0x24
 2896 002d 00       		.byte	0
 2897 002e 0B       		.uleb128 0xb
 2898 002f 0B       		.uleb128 0xb
 2899 0030 3E       		.uleb128 0x3e
 2900 0031 0B       		.uleb128 0xb
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 69


 2901 0032 03       		.uleb128 0x3
 2902 0033 08       		.uleb128 0x8
 2903 0034 00       		.byte	0
 2904 0035 00       		.byte	0
 2905 0036 05       		.uleb128 0x5
 2906 0037 16       		.uleb128 0x16
 2907 0038 00       		.byte	0
 2908 0039 03       		.uleb128 0x3
 2909 003a 0E       		.uleb128 0xe
 2910 003b 3A       		.uleb128 0x3a
 2911 003c 0B       		.uleb128 0xb
 2912 003d 3B       		.uleb128 0x3b
 2913 003e 05       		.uleb128 0x5
 2914 003f 49       		.uleb128 0x49
 2915 0040 13       		.uleb128 0x13
 2916 0041 00       		.byte	0
 2917 0042 00       		.byte	0
 2918 0043 06       		.uleb128 0x6
 2919 0044 35       		.uleb128 0x35
 2920 0045 00       		.byte	0
 2921 0046 49       		.uleb128 0x49
 2922 0047 13       		.uleb128 0x13
 2923 0048 00       		.byte	0
 2924 0049 00       		.byte	0
 2925 004a 07       		.uleb128 0x7
 2926 004b 0F       		.uleb128 0xf
 2927 004c 00       		.byte	0
 2928 004d 0B       		.uleb128 0xb
 2929 004e 0B       		.uleb128 0xb
 2930 004f 49       		.uleb128 0x49
 2931 0050 13       		.uleb128 0x13
 2932 0051 00       		.byte	0
 2933 0052 00       		.byte	0
 2934 0053 08       		.uleb128 0x8
 2935 0054 15       		.uleb128 0x15
 2936 0055 00       		.byte	0
 2937 0056 27       		.uleb128 0x27
 2938 0057 19       		.uleb128 0x19
 2939 0058 00       		.byte	0
 2940 0059 00       		.byte	0
 2941 005a 09       		.uleb128 0x9
 2942 005b 0F       		.uleb128 0xf
 2943 005c 00       		.byte	0
 2944 005d 0B       		.uleb128 0xb
 2945 005e 0B       		.uleb128 0xb
 2946 005f 00       		.byte	0
 2947 0060 00       		.byte	0
 2948 0061 0A       		.uleb128 0xa
 2949 0062 2E       		.uleb128 0x2e
 2950 0063 00       		.byte	0
 2951 0064 3F       		.uleb128 0x3f
 2952 0065 19       		.uleb128 0x19
 2953 0066 03       		.uleb128 0x3
 2954 0067 0E       		.uleb128 0xe
 2955 0068 3A       		.uleb128 0x3a
 2956 0069 0B       		.uleb128 0xb
 2957 006a 3B       		.uleb128 0x3b
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 70


 2958 006b 0B       		.uleb128 0xb
 2959 006c 49       		.uleb128 0x49
 2960 006d 13       		.uleb128 0x13
 2961 006e 11       		.uleb128 0x11
 2962 006f 01       		.uleb128 0x1
 2963 0070 12       		.uleb128 0x12
 2964 0071 06       		.uleb128 0x6
 2965 0072 40       		.uleb128 0x40
 2966 0073 18       		.uleb128 0x18
 2967 0074 9642     		.uleb128 0x2116
 2968 0076 19       		.uleb128 0x19
 2969 0077 00       		.byte	0
 2970 0078 00       		.byte	0
 2971 0079 0B       		.uleb128 0xb
 2972 007a 2E       		.uleb128 0x2e
 2973 007b 01       		.byte	0x1
 2974 007c 3F       		.uleb128 0x3f
 2975 007d 19       		.uleb128 0x19
 2976 007e 03       		.uleb128 0x3
 2977 007f 0E       		.uleb128 0xe
 2978 0080 3A       		.uleb128 0x3a
 2979 0081 0B       		.uleb128 0xb
 2980 0082 3B       		.uleb128 0x3b
 2981 0083 0B       		.uleb128 0xb
 2982 0084 27       		.uleb128 0x27
 2983 0085 19       		.uleb128 0x19
 2984 0086 11       		.uleb128 0x11
 2985 0087 01       		.uleb128 0x1
 2986 0088 12       		.uleb128 0x12
 2987 0089 06       		.uleb128 0x6
 2988 008a 40       		.uleb128 0x40
 2989 008b 18       		.uleb128 0x18
 2990 008c 9642     		.uleb128 0x2116
 2991 008e 19       		.uleb128 0x19
 2992 008f 01       		.uleb128 0x1
 2993 0090 13       		.uleb128 0x13
 2994 0091 00       		.byte	0
 2995 0092 00       		.byte	0
 2996 0093 0C       		.uleb128 0xc
 2997 0094 0B       		.uleb128 0xb
 2998 0095 01       		.byte	0x1
 2999 0096 11       		.uleb128 0x11
 3000 0097 01       		.uleb128 0x1
 3001 0098 12       		.uleb128 0x12
 3002 0099 06       		.uleb128 0x6
 3003 009a 00       		.byte	0
 3004 009b 00       		.byte	0
 3005 009c 0D       		.uleb128 0xd
 3006 009d 34       		.uleb128 0x34
 3007 009e 00       		.byte	0
 3008 009f 03       		.uleb128 0x3
 3009 00a0 08       		.uleb128 0x8
 3010 00a1 3A       		.uleb128 0x3a
 3011 00a2 0B       		.uleb128 0xb
 3012 00a3 3B       		.uleb128 0x3b
 3013 00a4 0B       		.uleb128 0xb
 3014 00a5 49       		.uleb128 0x49
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 71


 3015 00a6 13       		.uleb128 0x13
 3016 00a7 02       		.uleb128 0x2
 3017 00a8 18       		.uleb128 0x18
 3018 00a9 00       		.byte	0
 3019 00aa 00       		.byte	0
 3020 00ab 0E       		.uleb128 0xe
 3021 00ac 2E       		.uleb128 0x2e
 3022 00ad 01       		.byte	0x1
 3023 00ae 3F       		.uleb128 0x3f
 3024 00af 19       		.uleb128 0x19
 3025 00b0 03       		.uleb128 0x3
 3026 00b1 0E       		.uleb128 0xe
 3027 00b2 3A       		.uleb128 0x3a
 3028 00b3 0B       		.uleb128 0xb
 3029 00b4 3B       		.uleb128 0x3b
 3030 00b5 0B       		.uleb128 0xb
 3031 00b6 27       		.uleb128 0x27
 3032 00b7 19       		.uleb128 0x19
 3033 00b8 11       		.uleb128 0x11
 3034 00b9 01       		.uleb128 0x1
 3035 00ba 12       		.uleb128 0x12
 3036 00bb 06       		.uleb128 0x6
 3037 00bc 40       		.uleb128 0x40
 3038 00bd 18       		.uleb128 0x18
 3039 00be 9742     		.uleb128 0x2117
 3040 00c0 19       		.uleb128 0x19
 3041 00c1 01       		.uleb128 0x1
 3042 00c2 13       		.uleb128 0x13
 3043 00c3 00       		.byte	0
 3044 00c4 00       		.byte	0
 3045 00c5 0F       		.uleb128 0xf
 3046 00c6 2E       		.uleb128 0x2e
 3047 00c7 00       		.byte	0
 3048 00c8 3F       		.uleb128 0x3f
 3049 00c9 19       		.uleb128 0x19
 3050 00ca 03       		.uleb128 0x3
 3051 00cb 0E       		.uleb128 0xe
 3052 00cc 3A       		.uleb128 0x3a
 3053 00cd 0B       		.uleb128 0xb
 3054 00ce 3B       		.uleb128 0x3b
 3055 00cf 0B       		.uleb128 0xb
 3056 00d0 27       		.uleb128 0x27
 3057 00d1 19       		.uleb128 0x19
 3058 00d2 3C       		.uleb128 0x3c
 3059 00d3 19       		.uleb128 0x19
 3060 00d4 00       		.byte	0
 3061 00d5 00       		.byte	0
 3062 00d6 10       		.uleb128 0x10
 3063 00d7 34       		.uleb128 0x34
 3064 00d8 00       		.byte	0
 3065 00d9 03       		.uleb128 0x3
 3066 00da 0E       		.uleb128 0xe
 3067 00db 3A       		.uleb128 0x3a
 3068 00dc 0B       		.uleb128 0xb
 3069 00dd 3B       		.uleb128 0x3b
 3070 00de 0B       		.uleb128 0xb
 3071 00df 49       		.uleb128 0x49
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 72


 3072 00e0 13       		.uleb128 0x13
 3073 00e1 3F       		.uleb128 0x3f
 3074 00e2 19       		.uleb128 0x19
 3075 00e3 3C       		.uleb128 0x3c
 3076 00e4 19       		.uleb128 0x19
 3077 00e5 00       		.byte	0
 3078 00e6 00       		.byte	0
 3079 00e7 11       		.uleb128 0x11
 3080 00e8 01       		.uleb128 0x1
 3081 00e9 01       		.byte	0x1
 3082 00ea 49       		.uleb128 0x49
 3083 00eb 13       		.uleb128 0x13
 3084 00ec 01       		.uleb128 0x1
 3085 00ed 13       		.uleb128 0x13
 3086 00ee 00       		.byte	0
 3087 00ef 00       		.byte	0
 3088 00f0 12       		.uleb128 0x12
 3089 00f1 21       		.uleb128 0x21
 3090 00f2 00       		.byte	0
 3091 00f3 00       		.byte	0
 3092 00f4 00       		.byte	0
 3093 00f5 13       		.uleb128 0x13
 3094 00f6 05       		.uleb128 0x5
 3095 00f7 00       		.byte	0
 3096 00f8 03       		.uleb128 0x3
 3097 00f9 0E       		.uleb128 0xe
 3098 00fa 3A       		.uleb128 0x3a
 3099 00fb 0B       		.uleb128 0xb
 3100 00fc 3B       		.uleb128 0x3b
 3101 00fd 0B       		.uleb128 0xb
 3102 00fe 49       		.uleb128 0x49
 3103 00ff 13       		.uleb128 0x13
 3104 0100 02       		.uleb128 0x2
 3105 0101 18       		.uleb128 0x18
 3106 0102 00       		.byte	0
 3107 0103 00       		.byte	0
 3108 0104 14       		.uleb128 0x14
 3109 0105 2E       		.uleb128 0x2e
 3110 0106 00       		.byte	0
 3111 0107 3F       		.uleb128 0x3f
 3112 0108 19       		.uleb128 0x19
 3113 0109 03       		.uleb128 0x3
 3114 010a 0E       		.uleb128 0xe
 3115 010b 3A       		.uleb128 0x3a
 3116 010c 0B       		.uleb128 0xb
 3117 010d 3B       		.uleb128 0x3b
 3118 010e 0B       		.uleb128 0xb
 3119 010f 27       		.uleb128 0x27
 3120 0110 19       		.uleb128 0x19
 3121 0111 11       		.uleb128 0x11
 3122 0112 01       		.uleb128 0x1
 3123 0113 12       		.uleb128 0x12
 3124 0114 06       		.uleb128 0x6
 3125 0115 40       		.uleb128 0x40
 3126 0116 18       		.uleb128 0x18
 3127 0117 9642     		.uleb128 0x2116
 3128 0119 19       		.uleb128 0x19
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 73


 3129 011a 00       		.byte	0
 3130 011b 00       		.byte	0
 3131 011c 15       		.uleb128 0x15
 3132 011d 34       		.uleb128 0x34
 3133 011e 00       		.byte	0
 3134 011f 03       		.uleb128 0x3
 3135 0120 0E       		.uleb128 0xe
 3136 0121 3A       		.uleb128 0x3a
 3137 0122 0B       		.uleb128 0xb
 3138 0123 3B       		.uleb128 0x3b
 3139 0124 0B       		.uleb128 0xb
 3140 0125 49       		.uleb128 0x49
 3141 0126 13       		.uleb128 0x13
 3142 0127 02       		.uleb128 0x2
 3143 0128 18       		.uleb128 0x18
 3144 0129 00       		.byte	0
 3145 012a 00       		.byte	0
 3146 012b 16       		.uleb128 0x16
 3147 012c 34       		.uleb128 0x34
 3148 012d 00       		.byte	0
 3149 012e 03       		.uleb128 0x3
 3150 012f 0E       		.uleb128 0xe
 3151 0130 3A       		.uleb128 0x3a
 3152 0131 0B       		.uleb128 0xb
 3153 0132 3B       		.uleb128 0x3b
 3154 0133 0B       		.uleb128 0xb
 3155 0134 49       		.uleb128 0x49
 3156 0135 13       		.uleb128 0x13
 3157 0136 00       		.byte	0
 3158 0137 00       		.byte	0
 3159 0138 17       		.uleb128 0x17
 3160 0139 26       		.uleb128 0x26
 3161 013a 00       		.byte	0
 3162 013b 49       		.uleb128 0x49
 3163 013c 13       		.uleb128 0x13
 3164 013d 00       		.byte	0
 3165 013e 00       		.byte	0
 3166 013f 18       		.uleb128 0x18
 3167 0140 2E       		.uleb128 0x2e
 3168 0141 01       		.byte	0x1
 3169 0142 3F       		.uleb128 0x3f
 3170 0143 19       		.uleb128 0x19
 3171 0144 03       		.uleb128 0x3
 3172 0145 0E       		.uleb128 0xe
 3173 0146 3A       		.uleb128 0x3a
 3174 0147 0B       		.uleb128 0xb
 3175 0148 3B       		.uleb128 0x3b
 3176 0149 05       		.uleb128 0x5
 3177 014a 27       		.uleb128 0x27
 3178 014b 19       		.uleb128 0x19
 3179 014c 11       		.uleb128 0x11
 3180 014d 01       		.uleb128 0x1
 3181 014e 12       		.uleb128 0x12
 3182 014f 06       		.uleb128 0x6
 3183 0150 40       		.uleb128 0x40
 3184 0151 18       		.uleb128 0x18
 3185 0152 9642     		.uleb128 0x2116
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 74


 3186 0154 19       		.uleb128 0x19
 3187 0155 01       		.uleb128 0x1
 3188 0156 13       		.uleb128 0x13
 3189 0157 00       		.byte	0
 3190 0158 00       		.byte	0
 3191 0159 19       		.uleb128 0x19
 3192 015a 34       		.uleb128 0x34
 3193 015b 00       		.byte	0
 3194 015c 03       		.uleb128 0x3
 3195 015d 0E       		.uleb128 0xe
 3196 015e 3A       		.uleb128 0x3a
 3197 015f 0B       		.uleb128 0xb
 3198 0160 3B       		.uleb128 0x3b
 3199 0161 05       		.uleb128 0x5
 3200 0162 49       		.uleb128 0x49
 3201 0163 13       		.uleb128 0x13
 3202 0164 02       		.uleb128 0x2
 3203 0165 18       		.uleb128 0x18
 3204 0166 00       		.byte	0
 3205 0167 00       		.byte	0
 3206 0168 1A       		.uleb128 0x1a
 3207 0169 34       		.uleb128 0x34
 3208 016a 00       		.byte	0
 3209 016b 03       		.uleb128 0x3
 3210 016c 08       		.uleb128 0x8
 3211 016d 3A       		.uleb128 0x3a
 3212 016e 0B       		.uleb128 0xb
 3213 016f 3B       		.uleb128 0x3b
 3214 0170 05       		.uleb128 0x5
 3215 0171 49       		.uleb128 0x49
 3216 0172 13       		.uleb128 0x13
 3217 0173 00       		.byte	0
 3218 0174 00       		.byte	0
 3219 0175 1B       		.uleb128 0x1b
 3220 0176 05       		.uleb128 0x5
 3221 0177 00       		.byte	0
 3222 0178 03       		.uleb128 0x3
 3223 0179 0E       		.uleb128 0xe
 3224 017a 3A       		.uleb128 0x3a
 3225 017b 0B       		.uleb128 0xb
 3226 017c 3B       		.uleb128 0x3b
 3227 017d 05       		.uleb128 0x5
 3228 017e 49       		.uleb128 0x49
 3229 017f 13       		.uleb128 0x13
 3230 0180 02       		.uleb128 0x2
 3231 0181 18       		.uleb128 0x18
 3232 0182 00       		.byte	0
 3233 0183 00       		.byte	0
 3234 0184 1C       		.uleb128 0x1c
 3235 0185 34       		.uleb128 0x34
 3236 0186 00       		.byte	0
 3237 0187 03       		.uleb128 0x3
 3238 0188 08       		.uleb128 0x8
 3239 0189 3A       		.uleb128 0x3a
 3240 018a 0B       		.uleb128 0xb
 3241 018b 3B       		.uleb128 0x3b
 3242 018c 05       		.uleb128 0x5
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 75


 3243 018d 49       		.uleb128 0x49
 3244 018e 13       		.uleb128 0x13
 3245 018f 02       		.uleb128 0x2
 3246 0190 18       		.uleb128 0x18
 3247 0191 00       		.byte	0
 3248 0192 00       		.byte	0
 3249 0193 1D       		.uleb128 0x1d
 3250 0194 21       		.uleb128 0x21
 3251 0195 00       		.byte	0
 3252 0196 49       		.uleb128 0x49
 3253 0197 13       		.uleb128 0x13
 3254 0198 2F       		.uleb128 0x2f
 3255 0199 0B       		.uleb128 0xb
 3256 019a 00       		.byte	0
 3257 019b 00       		.byte	0
 3258 019c 1E       		.uleb128 0x1e
 3259 019d 2E       		.uleb128 0x2e
 3260 019e 00       		.byte	0
 3261 019f 3F       		.uleb128 0x3f
 3262 01a0 19       		.uleb128 0x19
 3263 01a1 03       		.uleb128 0x3
 3264 01a2 0E       		.uleb128 0xe
 3265 01a3 3A       		.uleb128 0x3a
 3266 01a4 0B       		.uleb128 0xb
 3267 01a5 3B       		.uleb128 0x3b
 3268 01a6 05       		.uleb128 0x5
 3269 01a7 27       		.uleb128 0x27
 3270 01a8 19       		.uleb128 0x19
 3271 01a9 11       		.uleb128 0x11
 3272 01aa 01       		.uleb128 0x1
 3273 01ab 12       		.uleb128 0x12
 3274 01ac 06       		.uleb128 0x6
 3275 01ad 40       		.uleb128 0x40
 3276 01ae 18       		.uleb128 0x18
 3277 01af 9642     		.uleb128 0x2116
 3278 01b1 19       		.uleb128 0x19
 3279 01b2 00       		.byte	0
 3280 01b3 00       		.byte	0
 3281 01b4 1F       		.uleb128 0x1f
 3282 01b5 05       		.uleb128 0x5
 3283 01b6 00       		.byte	0
 3284 01b7 03       		.uleb128 0x3
 3285 01b8 08       		.uleb128 0x8
 3286 01b9 3A       		.uleb128 0x3a
 3287 01ba 0B       		.uleb128 0xb
 3288 01bb 3B       		.uleb128 0x3b
 3289 01bc 05       		.uleb128 0x5
 3290 01bd 49       		.uleb128 0x49
 3291 01be 13       		.uleb128 0x13
 3292 01bf 02       		.uleb128 0x2
 3293 01c0 18       		.uleb128 0x18
 3294 01c1 00       		.byte	0
 3295 01c2 00       		.byte	0
 3296 01c3 20       		.uleb128 0x20
 3297 01c4 34       		.uleb128 0x34
 3298 01c5 00       		.byte	0
 3299 01c6 03       		.uleb128 0x3
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 76


 3300 01c7 0E       		.uleb128 0xe
 3301 01c8 3A       		.uleb128 0x3a
 3302 01c9 0B       		.uleb128 0xb
 3303 01ca 3B       		.uleb128 0x3b
 3304 01cb 05       		.uleb128 0x5
 3305 01cc 49       		.uleb128 0x49
 3306 01cd 13       		.uleb128 0x13
 3307 01ce 3F       		.uleb128 0x3f
 3308 01cf 19       		.uleb128 0x19
 3309 01d0 3C       		.uleb128 0x3c
 3310 01d1 19       		.uleb128 0x19
 3311 01d2 00       		.byte	0
 3312 01d3 00       		.byte	0
 3313 01d4 21       		.uleb128 0x21
 3314 01d5 34       		.uleb128 0x34
 3315 01d6 00       		.byte	0
 3316 01d7 03       		.uleb128 0x3
 3317 01d8 0E       		.uleb128 0xe
 3318 01d9 3A       		.uleb128 0x3a
 3319 01da 0B       		.uleb128 0xb
 3320 01db 3B       		.uleb128 0x3b
 3321 01dc 0B       		.uleb128 0xb
 3322 01dd 49       		.uleb128 0x49
 3323 01de 13       		.uleb128 0x13
 3324 01df 3F       		.uleb128 0x3f
 3325 01e0 19       		.uleb128 0x19
 3326 01e1 02       		.uleb128 0x2
 3327 01e2 18       		.uleb128 0x18
 3328 01e3 00       		.byte	0
 3329 01e4 00       		.byte	0
 3330 01e5 00       		.byte	0
 3331              		.section	.debug_aranges,"",%progbits
 3332 0000 8C000000 		.4byte	0x8c
 3333 0004 0200     		.2byte	0x2
 3334 0006 00000000 		.4byte	.Ldebug_info0
 3335 000a 04       		.byte	0x4
 3336 000b 00       		.byte	0
 3337 000c 0000     		.2byte	0
 3338 000e 0000     		.2byte	0
 3339 0010 00000000 		.4byte	.LFB65
 3340 0014 0C010000 		.4byte	.LFE65-.LFB65
 3341 0018 00000000 		.4byte	.LFB66
 3342 001c 9C000000 		.4byte	.LFE66-.LFB66
 3343 0020 00000000 		.4byte	.LFB67
 3344 0024 30000000 		.4byte	.LFE67-.LFB67
 3345 0028 00000000 		.4byte	.LFB68
 3346 002c 10000000 		.4byte	.LFE68-.LFB68
 3347 0030 00000000 		.4byte	.LFB69
 3348 0034 0A000000 		.4byte	.LFE69-.LFB69
 3349 0038 00000000 		.4byte	.LFB70
 3350 003c 1C000000 		.4byte	.LFE70-.LFB70
 3351 0040 00000000 		.4byte	.LFB71
 3352 0044 2E000000 		.4byte	.LFE71-.LFB71
 3353 0048 00000000 		.4byte	.LFB72
 3354 004c 5C000000 		.4byte	.LFE72-.LFB72
 3355 0050 00000000 		.4byte	.LFB73
 3356 0054 98010000 		.4byte	.LFE73-.LFB73
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 77


 3357 0058 00000000 		.4byte	.LFB74
 3358 005c 68030000 		.4byte	.LFE74-.LFB74
 3359 0060 00000000 		.4byte	.LFB75
 3360 0064 10000000 		.4byte	.LFE75-.LFB75
 3361 0068 00000000 		.4byte	.LFB76
 3362 006c 84000000 		.4byte	.LFE76-.LFB76
 3363 0070 00000000 		.4byte	.LFB77
 3364 0074 8C000000 		.4byte	.LFE77-.LFB77
 3365 0078 00000000 		.4byte	.LFB78
 3366 007c 78000000 		.4byte	.LFE78-.LFB78
 3367 0080 00000000 		.4byte	.LFB79
 3368 0084 60000000 		.4byte	.LFE79-.LFB79
 3369 0088 00000000 		.4byte	0
 3370 008c 00000000 		.4byte	0
 3371              		.section	.debug_ranges,"",%progbits
 3372              	.Ldebug_ranges0:
 3373 0000 00000000 		.4byte	.LFB65
 3374 0004 0C010000 		.4byte	.LFE65
 3375 0008 00000000 		.4byte	.LFB66
 3376 000c 9C000000 		.4byte	.LFE66
 3377 0010 00000000 		.4byte	.LFB67
 3378 0014 30000000 		.4byte	.LFE67
 3379 0018 00000000 		.4byte	.LFB68
 3380 001c 10000000 		.4byte	.LFE68
 3381 0020 00000000 		.4byte	.LFB69
 3382 0024 0A000000 		.4byte	.LFE69
 3383 0028 00000000 		.4byte	.LFB70
 3384 002c 1C000000 		.4byte	.LFE70
 3385 0030 00000000 		.4byte	.LFB71
 3386 0034 2E000000 		.4byte	.LFE71
 3387 0038 00000000 		.4byte	.LFB72
 3388 003c 5C000000 		.4byte	.LFE72
 3389 0040 00000000 		.4byte	.LFB73
 3390 0044 98010000 		.4byte	.LFE73
 3391 0048 00000000 		.4byte	.LFB74
 3392 004c 68030000 		.4byte	.LFE74
 3393 0050 00000000 		.4byte	.LFB75
 3394 0054 10000000 		.4byte	.LFE75
 3395 0058 00000000 		.4byte	.LFB76
 3396 005c 84000000 		.4byte	.LFE76
 3397 0060 00000000 		.4byte	.LFB77
 3398 0064 8C000000 		.4byte	.LFE77
 3399 0068 00000000 		.4byte	.LFB78
 3400 006c 78000000 		.4byte	.LFE78
 3401 0070 00000000 		.4byte	.LFB79
 3402 0074 60000000 		.4byte	.LFE79
 3403 0078 00000000 		.4byte	0
 3404 007c 00000000 		.4byte	0
 3405              		.section	.debug_line,"",%progbits
 3406              	.Ldebug_line0:
 3407 0000 3B040000 		.section	.debug_str,"MS",%progbits,1
 3407      02007B01 
 3407      00000201 
 3407      FB0E0D00 
 3407      01010101 
 3408              	.LASF94:
 3409 0000 5369676E 		.ascii	"Sign_Sin\000"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 78


 3409      5F53696E 
 3409      00
 3410              	.LASF50:
 3411 0009 46696C74 		.ascii	"Filter_Handler\000"
 3411      65725F48 
 3411      616E646C 
 3411      657200
 3412              	.LASF5:
 3413 0018 5F5F696E 		.ascii	"__int32_t\000"
 3413      7433325F 
 3413      7400
 3414              	.LASF85:
 3415 0022 706F7731 		.ascii	"pow10_32\000"
 3415      305F3332 
 3415      00
 3416              	.LASF78:
 3417 002b 73686F77 		.ascii	"show\000"
 3417      00
 3418              	.LASF106:
 3419 0030 55736252 		.ascii	"UsbRxBuffer\000"
 3419      78427566 
 3419      66657200 
 3420              	.LASF64:
 3421 003c 64616870 		.ascii	"dahptr\000"
 3421      747200
 3422              	.LASF33:
 3423 0043 70727648 		.ascii	"prvHardwareSetup\000"
 3423      61726477 
 3423      61726553 
 3423      65747570 
 3423      00
 3424              	.LASF2:
 3425 0054 73686F72 		.ascii	"short int\000"
 3425      7420696E 
 3425      7400
 3426              	.LASF49:
 3427 005e 74644368 		.ascii	"tdChanA\000"
 3427      616E4100 
 3428              	.LASF26:
 3429 0066 73697A65 		.ascii	"sizetype\000"
 3429      74797065 
 3429      00
 3430              	.LASF35:
 3431 006f 78506F72 		.ascii	"xPortSysTickHandler\000"
 3431      74537973 
 3431      5469636B 
 3431      48616E64 
 3431      6C657200 
 3432              	.LASF93:
 3433 0083 7369676E 		.ascii	"sign_cntr\000"
 3433      5F636E74 
 3433      7200
 3434              	.LASF32:
 3435 008d 496E6974 		.ascii	"Initialize\000"
 3435      69616C69 
 3435      7A6500
 3436              	.LASF109:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 79


 3437 0098 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3437      43313120 
 3437      352E342E 
 3437      31203230 
 3437      31363036 
 3438 00cb 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3438      20726576 
 3438      6973696F 
 3438      6E203233 
 3438      37373135 
 3439 00fe 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3439      66756E63 
 3439      74696F6E 
 3439      2D736563 
 3439      74696F6E 
 3440              	.LASF40:
 3441 0126 6D61696E 		.ascii	"main\000"
 3441      00
 3442              	.LASF52:
 3443 012b 746F6E65 		.ascii	"tone\000"
 3443      00
 3444              	.LASF54:
 3445 0130 5461736B 		.ascii	"Task_TONE\000"
 3445      5F544F4E 
 3445      4500
 3446              	.LASF75:
 3447 013a 696E745F 		.ascii	"int_uartQueue_isr\000"
 3447      75617274 
 3447      51756575 
 3447      655F6973 
 3447      7200
 3448              	.LASF108:
 3449 014c 74466C61 		.ascii	"tFlag\000"
 3449      6700
 3450              	.LASF63:
 3451 0152 64697461 		.ascii	"ditave\000"
 3451      766500
 3452              	.LASF99:
 3453 0159 4944656C 		.ascii	"IDelayPtr\000"
 3453      61795074 
 3453      7200
 3454              	.LASF44:
 3455 0163 70765061 		.ascii	"pvParameters\000"
 3455      72616D65 
 3455      74657273 
 3455      00
 3456              	.LASF47:
 3457 0170 444D415F 		.ascii	"DMA_Config\000"
 3457      436F6E66 
 3457      696700
 3458              	.LASF98:
 3459 017b 4944656C 		.ascii	"IDelay\000"
 3459      617900
 3460              	.LASF55:
 3461 0182 6C617374 		.ascii	"last_tone\000"
 3461      5F746F6E 
 3461      6500
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 80


 3462              	.LASF12:
 3463 018c 75696E74 		.ascii	"uint8_t\000"
 3463      385F7400 
 3464              	.LASF15:
 3465 0194 75696E74 		.ascii	"uint8\000"
 3465      3800
 3466              	.LASF103:
 3467 019a 436F6D52 		.ascii	"ComRxCmd\000"
 3467      78436D64 
 3467      00
 3468              	.LASF80:
 3469 01a3 635F6275 		.ascii	"c_buf\000"
 3469      6600
 3470              	.LASF66:
 3471 01a9 64616861 		.ascii	"dahave\000"
 3471      766500
 3472              	.LASF36:
 3473 01b0 76506F72 		.ascii	"vPortSVCHandler\000"
 3473      74535643 
 3473      48616E64 
 3473      6C657200 
 3474              	.LASF37:
 3475 01c0 76417070 		.ascii	"vApplicationStackOverflowHook\000"
 3475      6C696361 
 3475      74696F6E 
 3475      53746163 
 3475      6B4F7665 
 3476              	.LASF38:
 3477 01de 70785461 		.ascii	"pxTask\000"
 3477      736B00
 3478              	.LASF88:
 3479 01e5 78517565 		.ascii	"xQueue_ROT\000"
 3479      75655F52 
 3479      4F5400
 3480              	.LASF20:
 3481 01f0 666C6F61 		.ascii	"float\000"
 3481      7400
 3482              	.LASF82:
 3483 01f6 52656164 		.ascii	"ReadUSB\000"
 3483      55534200 
 3484              	.LASF9:
 3485 01fe 6C6F6E67 		.ascii	"long long int\000"
 3485      206C6F6E 
 3485      6720696E 
 3485      7400
 3486              	.LASF24:
 3487 020c 63796973 		.ascii	"cyisraddress\000"
 3487      72616464 
 3487      72657373 
 3487      00
 3488              	.LASF18:
 3489 0219 696E7438 		.ascii	"int8\000"
 3489      00
 3490              	.LASF96:
 3491 021e 6163635F 		.ascii	"acc_v_sin\000"
 3491      765F7369 
 3491      6E00
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 81


 3492              	.LASF68:
 3493 0228 74687265 		.ascii	"threshold\000"
 3493      73686F6C 
 3493      6400
 3494              	.LASF48:
 3495 0232 6368616E 		.ascii	"channelHandle\000"
 3495      6E656C48 
 3495      616E646C 
 3495      6500
 3496              	.LASF86:
 3497 0240 43795261 		.ascii	"CyRamVectors\000"
 3497      6D566563 
 3497      746F7273 
 3497      00
 3498              	.LASF59:
 3499 024d 7844656C 		.ascii	"xDelay\000"
 3499      617900
 3500              	.LASF4:
 3501 0254 5F5F7569 		.ascii	"__uint8_t\000"
 3501      6E74385F 
 3501      7400
 3502              	.LASF31:
 3503 025e 51756575 		.ascii	"QueueHandle_t\000"
 3503      6548616E 
 3503      646C655F 
 3503      7400
 3504              	.LASF41:
 3505 026c 76417070 		.ascii	"vApplicationMallocFailedHook\000"
 3505      6C696361 
 3505      74696F6E 
 3505      4D616C6C 
 3505      6F634661 
 3506              	.LASF53:
 3507 0289 63686172 		.ascii	"character\000"
 3507      61637465 
 3507      7200
 3508              	.LASF84:
 3509 0293 73656E64 		.ascii	"sendUsb\000"
 3509      55736200 
 3510              	.LASF29:
 3511 029b 5469636B 		.ascii	"TickType_t\000"
 3511      54797065 
 3511      5F7400
 3512              	.LASF25:
 3513 02a6 6C6F6E67 		.ascii	"long double\000"
 3513      20646F75 
 3513      626C6500 
 3514              	.LASF56:
 3515 02b2 746F6E65 		.ascii	"tone_flag\000"
 3515      5F666C61 
 3515      6700
 3516              	.LASF95:
 3517 02bc 5369676E 		.ascii	"Sign_Cos\000"
 3517      5F436F73 
 3517      00
 3518              	.LASF1:
 3519 02c5 756E7369 		.ascii	"unsigned char\000"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 82


 3519      676E6564 
 3519      20636861 
 3519      7200
 3520              	.LASF107:
 3521 02d3 4D6F7273 		.ascii	"MorseCharTraslateTable\000"
 3521      65436861 
 3521      72547261 
 3521      736C6174 
 3521      65546162 
 3522              	.LASF111:
 3523 02ea 453A5C50 		.ascii	"E:\\PSoC_Creator\\CY8CKIT-059\\CY8CKIT-059_CW_Decod"
 3523      536F435F 
 3523      43726561 
 3523      746F725C 
 3523      43593843 
 3524 031a 65725F55 		.ascii	"er_USB\\CY8CKIT-059_CW_Decoder_USB.cydsn\000"
 3524      53425C43 
 3524      5938434B 
 3524      49542D30 
 3524      35395F43 
 3525              	.LASF101:
 3526 0342 696E745F 		.ascii	"int_cntr\000"
 3526      636E7472 
 3526      00
 3527              	.LASF100:
 3528 034b 6163635F 		.ascii	"acc_Vrms\000"
 3528      56726D73 
 3528      00
 3529              	.LASF0:
 3530 0354 7369676E 		.ascii	"signed char\000"
 3530      65642063 
 3530      68617200 
 3531              	.LASF10:
 3532 0360 6C6F6E67 		.ascii	"long long unsigned int\000"
 3532      206C6F6E 
 3532      6720756E 
 3532      7369676E 
 3532      65642069 
 3533              	.LASF14:
 3534 0377 75696E74 		.ascii	"uint32_t\000"
 3534      33325F74 
 3534      00
 3535              	.LASF30:
 3536 0380 5461736B 		.ascii	"TaskHandle_t\000"
 3536      48616E64 
 3536      6C655F74 
 3536      00
 3537              	.LASF11:
 3538 038d 756E7369 		.ascii	"unsigned int\000"
 3538      676E6564 
 3538      20696E74 
 3538      00
 3539              	.LASF70:
 3540 039a 70657269 		.ascii	"period\000"
 3540      6F6400
 3541              	.LASF27:
 3542 03a1 42617365 		.ascii	"BaseType_t\000"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 83


 3542      54797065 
 3542      5F7400
 3543              	.LASF77:
 3544 03ac 6E446967 		.ascii	"nDigits\000"
 3544      69747300 
 3545              	.LASF71:
 3546 03b4 636F6465 		.ascii	"code\000"
 3546      00
 3547              	.LASF28:
 3548 03b9 55426173 		.ascii	"UBaseType_t\000"
 3548      65547970 
 3548      655F7400 
 3549              	.LASF81:
 3550 03c5 635F7074 		.ascii	"c_ptr\000"
 3550      7200
 3551              	.LASF3:
 3552 03cb 73686F72 		.ascii	"short unsigned int\000"
 3552      7420756E 
 3552      7369676E 
 3552      65642069 
 3552      6E7400
 3553              	.LASF74:
 3554 03de 6461685F 		.ascii	"dah_cntr\000"
 3554      636E7472 
 3554      00
 3555              	.LASF45:
 3556 03e7 4F6E4465 		.ascii	"OnDelay\000"
 3556      6C617900 
 3557              	.LASF22:
 3558 03ef 63686172 		.ascii	"char\000"
 3558      00
 3559              	.LASF6:
 3560 03f4 6C6F6E67 		.ascii	"long int\000"
 3560      20696E74 
 3560      00
 3561              	.LASF13:
 3562 03fd 696E7433 		.ascii	"int32_t\000"
 3562      325F7400 
 3563              	.LASF57:
 3564 0405 70617573 		.ascii	"pause_flag\000"
 3564      655F666C 
 3564      616700
 3565              	.LASF34:
 3566 0410 78506F72 		.ascii	"xPortPendSVHandler\000"
 3566      7450656E 
 3566      64535648 
 3566      616E646C 
 3566      657200
 3567              	.LASF104:
 3568 0423 436F6D52 		.ascii	"ComRxPtr\000"
 3568      78507472 
 3568      00
 3569              	.LASF91:
 3570 042c 78517565 		.ascii	"xQueue_WPM\000"
 3570      75655F57 
 3570      504D00
 3571              	.LASF62:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 84


 3572 0437 64697476 		.ascii	"ditvals\000"
 3572      616C7300 
 3573              	.LASF69:
 3574 043f 6E65775F 		.ascii	"new_threshold\000"
 3574      74687265 
 3574      73686F6C 
 3574      6400
 3575              	.LASF65:
 3576 044d 64616876 		.ascii	"dahvals\000"
 3576      616C7300 
 3577              	.LASF16:
 3578 0455 75696E74 		.ascii	"uint16\000"
 3578      313600
 3579              	.LASF58:
 3580 045c 72657365 		.ascii	"reset_flag\000"
 3580      745F666C 
 3580      616700
 3581              	.LASF105:
 3582 0467 55736254 		.ascii	"UsbTxBuffer\000"
 3582      78427566 
 3582      66657200 
 3583              	.LASF17:
 3584 0473 75696E74 		.ascii	"uint32\000"
 3584      333200
 3585              	.LASF110:
 3586 047a 6D61696E 		.ascii	"main.c\000"
 3586      2E6300
 3587              	.LASF23:
 3588 0481 72656738 		.ascii	"reg8\000"
 3588      00
 3589              	.LASF8:
 3590 0486 6C6F6E67 		.ascii	"long unsigned int\000"
 3590      20756E73 
 3590      69676E65 
 3590      6420696E 
 3590      7400
 3591              	.LASF19:
 3592 0498 696E7433 		.ascii	"int32\000"
 3592      3200
 3593              	.LASF21:
 3594 049e 646F7562 		.ascii	"double\000"
 3594      6C6500
 3595              	.LASF87:
 3596 04a5 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3596      52784275 
 3596      66666572 
 3596      00
 3597              	.LASF7:
 3598 04b2 5F5F7569 		.ascii	"__uint32_t\000"
 3598      6E743332 
 3598      5F7400
 3599              	.LASF102:
 3600 04bd 6465626F 		.ascii	"debouunce_cntr\000"
 3600      75756E63 
 3600      655F636E 
 3600      747200
 3601              	.LASF90:
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 85


 3602 04cc 78517565 		.ascii	"xQueue_CHAR\000"
 3602      75655F43 
 3602      48415200 
 3603              	.LASF97:
 3604 04d8 6163635F 		.ascii	"acc_v_cos\000"
 3604      765F636F 
 3604      7300
 3605              	.LASF89:
 3606 04e2 78517565 		.ascii	"xQueue_TONE\000"
 3606      75655F54 
 3606      4F4E4500 
 3607              	.LASF60:
 3608 04ee 5F436F75 		.ascii	"_Counter5ms\000"
 3608      6E746572 
 3608      356D7300 
 3609              	.LASF46:
 3610 04fa 4F666644 		.ascii	"OffDelay\000"
 3610      656C6179 
 3610      00
 3611              	.LASF73:
 3612 0503 6469745F 		.ascii	"dit_cntr\000"
 3612      636E7472 
 3612      00
 3613              	.LASF79:
 3614 050c 5461736B 		.ascii	"Task_USBUART\000"
 3614      5F555342 
 3614      55415254 
 3614      00
 3615              	.LASF43:
 3616 0519 5461736B 		.ascii	"Task_LED\000"
 3616      5F4C4544 
 3616      00
 3617              	.LASF51:
 3618 0522 66696C74 		.ascii	"filter\000"
 3618      657200
 3619              	.LASF92:
 3620 0529 78517565 		.ascii	"xQueue_TH\000"
 3620      75655F54 
 3620      4800
 3621              	.LASF67:
 3622 0533 6E65775F 		.ascii	"new_dahave\000"
 3622      64616861 
 3622      766500
 3623              	.LASF76:
 3624 053e 70757464 		.ascii	"putdec32\000"
 3624      65633332 
 3624      00
 3625              	.LASF83:
 3626 0547 46616374 		.ascii	"FactorySetup\000"
 3626      6F727953 
 3626      65747570 
 3626      00
 3627              	.LASF61:
 3628 0554 64697470 		.ascii	"ditptr\000"
 3628      747200
 3629              	.LASF42:
 3630 055b 74696D65 		.ascii	"timerISR_1_Routine\000"
ARM GAS  C:\Users\koseki\AppData\Local\Temp\ccrnawwQ.s 			page 86


 3630      72495352 
 3630      5F315F52 
 3630      6F757469 
 3630      6E6500
 3631              	.LASF72:
 3632 056e 6D61736B 		.ascii	"mask\000"
 3632      00
 3633              	.LASF39:
 3634 0573 70635461 		.ascii	"pcTaskName\000"
 3634      736B4E61 
 3634      6D6500
 3635              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
